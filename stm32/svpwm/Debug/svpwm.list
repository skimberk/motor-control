
svpwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a68  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f6c  08003f6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f6c  08003f6c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f6c  08003f6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f6c  08003f6c  00013f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08003f80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08003f80  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f61  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013c7  00000000  00000000  00027f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000900  00000000  00000000  00029360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000858  00000000  00000000  00029c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000138f9  00000000  00000000  0002a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005ef4  00000000  00000000  0003ddb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006eb59  00000000  00000000  00043ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b27fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b4  00000000  00000000  000b287c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b60 	.word	0x08003b60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003b60 	.word	0x08003b60

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_d2f>:
 80005d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005e0:	bf24      	itt	cs
 80005e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005ea:	d90d      	bls.n	8000608 <__aeabi_d2f+0x30>
 80005ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000600:	bf08      	it	eq
 8000602:	f020 0001 	biceq.w	r0, r0, #1
 8000606:	4770      	bx	lr
 8000608:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800060c:	d121      	bne.n	8000652 <__aeabi_d2f+0x7a>
 800060e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000612:	bfbc      	itt	lt
 8000614:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000618:	4770      	bxlt	lr
 800061a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000622:	f1c2 0218 	rsb	r2, r2, #24
 8000626:	f1c2 0c20 	rsb	ip, r2, #32
 800062a:	fa10 f30c 	lsls.w	r3, r0, ip
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	bf18      	it	ne
 8000634:	f040 0001 	orrne.w	r0, r0, #1
 8000638:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800063c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000640:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000644:	ea40 000c 	orr.w	r0, r0, ip
 8000648:	fa23 f302 	lsr.w	r3, r3, r2
 800064c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000650:	e7cc      	b.n	80005ec <__aeabi_d2f+0x14>
 8000652:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000656:	d107      	bne.n	8000668 <__aeabi_d2f+0x90>
 8000658:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800065c:	bf1e      	ittt	ne
 800065e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000662:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000666:	4770      	bxne	lr
 8000668:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800066c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_frsub>:
 8000678:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800067c:	e002      	b.n	8000684 <__addsf3>
 800067e:	bf00      	nop

08000680 <__aeabi_fsub>:
 8000680:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000684 <__addsf3>:
 8000684:	0042      	lsls	r2, r0, #1
 8000686:	bf1f      	itttt	ne
 8000688:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800068c:	ea92 0f03 	teqne	r2, r3
 8000690:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000694:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000698:	d06a      	beq.n	8000770 <__addsf3+0xec>
 800069a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800069e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006a2:	bfc1      	itttt	gt
 80006a4:	18d2      	addgt	r2, r2, r3
 80006a6:	4041      	eorgt	r1, r0
 80006a8:	4048      	eorgt	r0, r1
 80006aa:	4041      	eorgt	r1, r0
 80006ac:	bfb8      	it	lt
 80006ae:	425b      	neglt	r3, r3
 80006b0:	2b19      	cmp	r3, #25
 80006b2:	bf88      	it	hi
 80006b4:	4770      	bxhi	lr
 80006b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4240      	negne	r0, r0
 80006c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006d2:	bf18      	it	ne
 80006d4:	4249      	negne	r1, r1
 80006d6:	ea92 0f03 	teq	r2, r3
 80006da:	d03f      	beq.n	800075c <__addsf3+0xd8>
 80006dc:	f1a2 0201 	sub.w	r2, r2, #1
 80006e0:	fa41 fc03 	asr.w	ip, r1, r3
 80006e4:	eb10 000c 	adds.w	r0, r0, ip
 80006e8:	f1c3 0320 	rsb	r3, r3, #32
 80006ec:	fa01 f103 	lsl.w	r1, r1, r3
 80006f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006f4:	d502      	bpl.n	80006fc <__addsf3+0x78>
 80006f6:	4249      	negs	r1, r1
 80006f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000700:	d313      	bcc.n	800072a <__addsf3+0xa6>
 8000702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000706:	d306      	bcc.n	8000716 <__addsf3+0x92>
 8000708:	0840      	lsrs	r0, r0, #1
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	f102 0201 	add.w	r2, r2, #1
 8000712:	2afe      	cmp	r2, #254	; 0xfe
 8000714:	d251      	bcs.n	80007ba <__addsf3+0x136>
 8000716:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800071a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800071e:	bf08      	it	eq
 8000720:	f020 0001 	biceq.w	r0, r0, #1
 8000724:	ea40 0003 	orr.w	r0, r0, r3
 8000728:	4770      	bx	lr
 800072a:	0049      	lsls	r1, r1, #1
 800072c:	eb40 0000 	adc.w	r0, r0, r0
 8000730:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000734:	f1a2 0201 	sub.w	r2, r2, #1
 8000738:	d1ed      	bne.n	8000716 <__addsf3+0x92>
 800073a:	fab0 fc80 	clz	ip, r0
 800073e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000742:	ebb2 020c 	subs.w	r2, r2, ip
 8000746:	fa00 f00c 	lsl.w	r0, r0, ip
 800074a:	bfaa      	itet	ge
 800074c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000750:	4252      	neglt	r2, r2
 8000752:	4318      	orrge	r0, r3
 8000754:	bfbc      	itt	lt
 8000756:	40d0      	lsrlt	r0, r2
 8000758:	4318      	orrlt	r0, r3
 800075a:	4770      	bx	lr
 800075c:	f092 0f00 	teq	r2, #0
 8000760:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000764:	bf06      	itte	eq
 8000766:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800076a:	3201      	addeq	r2, #1
 800076c:	3b01      	subne	r3, #1
 800076e:	e7b5      	b.n	80006dc <__addsf3+0x58>
 8000770:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000774:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000778:	bf18      	it	ne
 800077a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077e:	d021      	beq.n	80007c4 <__addsf3+0x140>
 8000780:	ea92 0f03 	teq	r2, r3
 8000784:	d004      	beq.n	8000790 <__addsf3+0x10c>
 8000786:	f092 0f00 	teq	r2, #0
 800078a:	bf08      	it	eq
 800078c:	4608      	moveq	r0, r1
 800078e:	4770      	bx	lr
 8000790:	ea90 0f01 	teq	r0, r1
 8000794:	bf1c      	itt	ne
 8000796:	2000      	movne	r0, #0
 8000798:	4770      	bxne	lr
 800079a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800079e:	d104      	bne.n	80007aa <__addsf3+0x126>
 80007a0:	0040      	lsls	r0, r0, #1
 80007a2:	bf28      	it	cs
 80007a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007a8:	4770      	bx	lr
 80007aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007ae:	bf3c      	itt	cc
 80007b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007b4:	4770      	bxcc	lr
 80007b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c2:	4770      	bx	lr
 80007c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007c8:	bf16      	itet	ne
 80007ca:	4608      	movne	r0, r1
 80007cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007d0:	4601      	movne	r1, r0
 80007d2:	0242      	lsls	r2, r0, #9
 80007d4:	bf06      	itte	eq
 80007d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007da:	ea90 0f01 	teqeq	r0, r1
 80007de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_ui2f>:
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e004      	b.n	80007f4 <__aeabi_i2f+0x8>
 80007ea:	bf00      	nop

080007ec <__aeabi_i2f>:
 80007ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	ea5f 0c00 	movs.w	ip, r0
 80007f8:	bf08      	it	eq
 80007fa:	4770      	bxeq	lr
 80007fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000800:	4601      	mov	r1, r0
 8000802:	f04f 0000 	mov.w	r0, #0
 8000806:	e01c      	b.n	8000842 <__aeabi_l2f+0x2a>

08000808 <__aeabi_ul2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	e00a      	b.n	800082c <__aeabi_l2f+0x14>
 8000816:	bf00      	nop

08000818 <__aeabi_l2f>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000824:	d502      	bpl.n	800082c <__aeabi_l2f+0x14>
 8000826:	4240      	negs	r0, r0
 8000828:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082c:	ea5f 0c01 	movs.w	ip, r1
 8000830:	bf02      	ittt	eq
 8000832:	4684      	moveq	ip, r0
 8000834:	4601      	moveq	r1, r0
 8000836:	2000      	moveq	r0, #0
 8000838:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800083c:	bf08      	it	eq
 800083e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000842:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000846:	fabc f28c 	clz	r2, ip
 800084a:	3a08      	subs	r2, #8
 800084c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000850:	db10      	blt.n	8000874 <__aeabi_l2f+0x5c>
 8000852:	fa01 fc02 	lsl.w	ip, r1, r2
 8000856:	4463      	add	r3, ip
 8000858:	fa00 fc02 	lsl.w	ip, r0, r2
 800085c:	f1c2 0220 	rsb	r2, r2, #32
 8000860:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000864:	fa20 f202 	lsr.w	r2, r0, r2
 8000868:	eb43 0002 	adc.w	r0, r3, r2
 800086c:	bf08      	it	eq
 800086e:	f020 0001 	biceq.w	r0, r0, #1
 8000872:	4770      	bx	lr
 8000874:	f102 0220 	add.w	r2, r2, #32
 8000878:	fa01 fc02 	lsl.w	ip, r1, r2
 800087c:	f1c2 0220 	rsb	r2, r2, #32
 8000880:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000884:	fa21 f202 	lsr.w	r2, r1, r2
 8000888:	eb43 0002 	adc.w	r0, r3, r2
 800088c:	bf08      	it	eq
 800088e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000892:	4770      	bx	lr

08000894 <__aeabi_fmul>:
 8000894:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000898:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800089c:	bf1e      	ittt	ne
 800089e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008a2:	ea92 0f0c 	teqne	r2, ip
 80008a6:	ea93 0f0c 	teqne	r3, ip
 80008aa:	d06f      	beq.n	800098c <__aeabi_fmul+0xf8>
 80008ac:	441a      	add	r2, r3
 80008ae:	ea80 0c01 	eor.w	ip, r0, r1
 80008b2:	0240      	lsls	r0, r0, #9
 80008b4:	bf18      	it	ne
 80008b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008ba:	d01e      	beq.n	80008fa <__aeabi_fmul+0x66>
 80008bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008c8:	fba0 3101 	umull	r3, r1, r0, r1
 80008cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008d4:	bf3e      	ittt	cc
 80008d6:	0049      	lslcc	r1, r1, #1
 80008d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008dc:	005b      	lslcc	r3, r3, #1
 80008de:	ea40 0001 	orr.w	r0, r0, r1
 80008e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008e6:	2afd      	cmp	r2, #253	; 0xfd
 80008e8:	d81d      	bhi.n	8000926 <__aeabi_fmul+0x92>
 80008ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008f2:	bf08      	it	eq
 80008f4:	f020 0001 	biceq.w	r0, r0, #1
 80008f8:	4770      	bx	lr
 80008fa:	f090 0f00 	teq	r0, #0
 80008fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000902:	bf08      	it	eq
 8000904:	0249      	lsleq	r1, r1, #9
 8000906:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800090a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800090e:	3a7f      	subs	r2, #127	; 0x7f
 8000910:	bfc2      	ittt	gt
 8000912:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000916:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800091a:	4770      	bxgt	lr
 800091c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	3a01      	subs	r2, #1
 8000926:	dc5d      	bgt.n	80009e4 <__aeabi_fmul+0x150>
 8000928:	f112 0f19 	cmn.w	r2, #25
 800092c:	bfdc      	itt	le
 800092e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000932:	4770      	bxle	lr
 8000934:	f1c2 0200 	rsb	r2, r2, #0
 8000938:	0041      	lsls	r1, r0, #1
 800093a:	fa21 f102 	lsr.w	r1, r1, r2
 800093e:	f1c2 0220 	rsb	r2, r2, #32
 8000942:	fa00 fc02 	lsl.w	ip, r0, r2
 8000946:	ea5f 0031 	movs.w	r0, r1, rrx
 800094a:	f140 0000 	adc.w	r0, r0, #0
 800094e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000952:	bf08      	it	eq
 8000954:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000958:	4770      	bx	lr
 800095a:	f092 0f00 	teq	r2, #0
 800095e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0040      	lsleq	r0, r0, #1
 8000966:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800096a:	3a01      	subeq	r2, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xce>
 800096e:	ea40 000c 	orr.w	r0, r0, ip
 8000972:	f093 0f00 	teq	r3, #0
 8000976:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097a:	bf02      	ittt	eq
 800097c:	0049      	lsleq	r1, r1, #1
 800097e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000982:	3b01      	subeq	r3, #1
 8000984:	d0f9      	beq.n	800097a <__aeabi_fmul+0xe6>
 8000986:	ea41 010c 	orr.w	r1, r1, ip
 800098a:	e78f      	b.n	80008ac <__aeabi_fmul+0x18>
 800098c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000990:	ea92 0f0c 	teq	r2, ip
 8000994:	bf18      	it	ne
 8000996:	ea93 0f0c 	teqne	r3, ip
 800099a:	d00a      	beq.n	80009b2 <__aeabi_fmul+0x11e>
 800099c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009a0:	bf18      	it	ne
 80009a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009a6:	d1d8      	bne.n	800095a <__aeabi_fmul+0xc6>
 80009a8:	ea80 0001 	eor.w	r0, r0, r1
 80009ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	4770      	bx	lr
 80009b2:	f090 0f00 	teq	r0, #0
 80009b6:	bf17      	itett	ne
 80009b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009bc:	4608      	moveq	r0, r1
 80009be:	f091 0f00 	teqne	r1, #0
 80009c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009c6:	d014      	beq.n	80009f2 <__aeabi_fmul+0x15e>
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d101      	bne.n	80009d2 <__aeabi_fmul+0x13e>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	d10f      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009d2:	ea93 0f0c 	teq	r3, ip
 80009d6:	d103      	bne.n	80009e0 <__aeabi_fmul+0x14c>
 80009d8:	024b      	lsls	r3, r1, #9
 80009da:	bf18      	it	ne
 80009dc:	4608      	movne	r0, r1
 80009de:	d108      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009e0:	ea80 0001 	eor.w	r0, r0, r1
 80009e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f0:	4770      	bx	lr
 80009f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bx	lr

080009fc <__aeabi_fdiv>:
 80009fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a04:	bf1e      	ittt	ne
 8000a06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a0a:	ea92 0f0c 	teqne	r2, ip
 8000a0e:	ea93 0f0c 	teqne	r3, ip
 8000a12:	d069      	beq.n	8000ae8 <__aeabi_fdiv+0xec>
 8000a14:	eba2 0203 	sub.w	r2, r2, r3
 8000a18:	ea80 0c01 	eor.w	ip, r0, r1
 8000a1c:	0249      	lsls	r1, r1, #9
 8000a1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a22:	d037      	beq.n	8000a94 <__aeabi_fdiv+0x98>
 8000a24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a34:	428b      	cmp	r3, r1
 8000a36:	bf38      	it	cc
 8000a38:	005b      	lslcc	r3, r3, #1
 8000a3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a42:	428b      	cmp	r3, r1
 8000a44:	bf24      	itt	cs
 8000a46:	1a5b      	subcs	r3, r3, r1
 8000a48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a50:	bf24      	itt	cs
 8000a52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a5e:	bf24      	itt	cs
 8000a60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a6c:	bf24      	itt	cs
 8000a6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	bf18      	it	ne
 8000a7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a7e:	d1e0      	bne.n	8000a42 <__aeabi_fdiv+0x46>
 8000a80:	2afd      	cmp	r2, #253	; 0xfd
 8000a82:	f63f af50 	bhi.w	8000926 <__aeabi_fmul+0x92>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a8c:	bf08      	it	eq
 8000a8e:	f020 0001 	biceq.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a9c:	327f      	adds	r2, #127	; 0x7f
 8000a9e:	bfc2      	ittt	gt
 8000aa0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000aa4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000aa8:	4770      	bxgt	lr
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f04f 0300 	mov.w	r3, #0
 8000ab2:	3a01      	subs	r2, #1
 8000ab4:	e737      	b.n	8000926 <__aeabi_fmul+0x92>
 8000ab6:	f092 0f00 	teq	r2, #0
 8000aba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0040      	lsleq	r0, r0, #1
 8000ac2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ac6:	3a01      	subeq	r2, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xc2>
 8000aca:	ea40 000c 	orr.w	r0, r0, ip
 8000ace:	f093 0f00 	teq	r3, #0
 8000ad2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad6:	bf02      	ittt	eq
 8000ad8:	0049      	lsleq	r1, r1, #1
 8000ada:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ade:	3b01      	subeq	r3, #1
 8000ae0:	d0f9      	beq.n	8000ad6 <__aeabi_fdiv+0xda>
 8000ae2:	ea41 010c 	orr.w	r1, r1, ip
 8000ae6:	e795      	b.n	8000a14 <__aeabi_fdiv+0x18>
 8000ae8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000aec:	ea92 0f0c 	teq	r2, ip
 8000af0:	d108      	bne.n	8000b04 <__aeabi_fdiv+0x108>
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	f47f af7d 	bne.w	80009f2 <__aeabi_fmul+0x15e>
 8000af8:	ea93 0f0c 	teq	r3, ip
 8000afc:	f47f af70 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e776      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b04:	ea93 0f0c 	teq	r3, ip
 8000b08:	d104      	bne.n	8000b14 <__aeabi_fdiv+0x118>
 8000b0a:	024b      	lsls	r3, r1, #9
 8000b0c:	f43f af4c 	beq.w	80009a8 <__aeabi_fmul+0x114>
 8000b10:	4608      	mov	r0, r1
 8000b12:	e76e      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b18:	bf18      	it	ne
 8000b1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b1e:	d1ca      	bne.n	8000ab6 <__aeabi_fdiv+0xba>
 8000b20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b24:	f47f af5c 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b2c:	f47f af3c 	bne.w	80009a8 <__aeabi_fmul+0x114>
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b32:	bf00      	nop

08000b34 <__gesf2>:
 8000b34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b38:	e006      	b.n	8000b48 <__cmpsf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__lesf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	e002      	b.n	8000b48 <__cmpsf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__cmpsf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b58:	bf18      	it	ne
 8000b5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5e:	d011      	beq.n	8000b84 <__cmpsf2+0x40>
 8000b60:	b001      	add	sp, #4
 8000b62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b66:	bf18      	it	ne
 8000b68:	ea90 0f01 	teqne	r0, r1
 8000b6c:	bf58      	it	pl
 8000b6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b72:	bf88      	it	hi
 8000b74:	17c8      	asrhi	r0, r1, #31
 8000b76:	bf38      	it	cc
 8000b78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b7c:	bf18      	it	ne
 8000b7e:	f040 0001 	orrne.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	d102      	bne.n	8000b90 <__cmpsf2+0x4c>
 8000b8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b8e:	d105      	bne.n	8000b9c <__cmpsf2+0x58>
 8000b90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b94:	d1e4      	bne.n	8000b60 <__cmpsf2+0x1c>
 8000b96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b9a:	d0e1      	beq.n	8000b60 <__cmpsf2+0x1c>
 8000b9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_cfrcmple>:
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4661      	mov	r1, ip
 8000baa:	e7ff      	b.n	8000bac <__aeabi_cfcmpeq>

08000bac <__aeabi_cfcmpeq>:
 8000bac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bae:	f7ff ffc9 	bl	8000b44 <__cmpsf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	bf48      	it	mi
 8000bb6:	f110 0f00 	cmnmi.w	r0, #0
 8000bba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bbc <__aeabi_fcmpeq>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff fff4 	bl	8000bac <__aeabi_cfcmpeq>
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2001      	moveq	r0, #1
 8000bc8:	2000      	movne	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fcmplt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffea 	bl	8000bac <__aeabi_cfcmpeq>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_fcmple>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffe0 	bl	8000bac <__aeabi_cfcmpeq>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fcmpge>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffd2 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fcmpgt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffc8 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_f2iz>:
 8000c20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c28:	d30f      	bcc.n	8000c4a <__aeabi_f2iz+0x2a>
 8000c2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c32:	d90d      	bls.n	8000c50 <__aeabi_f2iz+0x30>
 8000c34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c3c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c40:	fa23 f002 	lsr.w	r0, r3, r2
 8000c44:	bf18      	it	ne
 8000c46:	4240      	negne	r0, r0
 8000c48:	4770      	bx	lr
 8000c4a:	f04f 0000 	mov.w	r0, #0
 8000c4e:	4770      	bx	lr
 8000c50:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c54:	d101      	bne.n	8000c5a <__aeabi_f2iz+0x3a>
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	d105      	bne.n	8000c66 <__aeabi_f2iz+0x46>
 8000c5a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c5e:	bf08      	it	eq
 8000c60:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	4770      	bx	lr
 8000c6c:	0000      	movs	r0, r0
	...

08000c70 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

float theta = 0.0f;
float thetaAdd = 0.0f;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1_1) {
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b08d      	sub	sp, #52	; 0x34
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	float third_sector = floorf(theta / S_2_PI_3);
 8000c78:	4b7d      	ldr	r3, [pc, #500]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a7d      	ldr	r2, [pc, #500]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff febb 	bl	80009fc <__aeabi_fdiv>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 f9b1 	bl	8002ff0 <floorf>
 8000c8e:	62f8      	str	r0, [r7, #44]	; 0x2c
	float third_sector_theta = theta - third_sector * S_2_PI_3;
 8000c90:	4b77      	ldr	r3, [pc, #476]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000c92:	681c      	ldr	r4, [r3, #0]
 8000c94:	4b77      	ldr	r3, [pc, #476]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fdfb 	bl	8000894 <__aeabi_fmul>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f7ff fcec 	bl	8000680 <__aeabi_fsub>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28

	float x = cosf(third_sector_theta);
 8000cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cae:	f002 f96b 	bl	8002f88 <cosf>
 8000cb2:	6278      	str	r0, [r7, #36]	; 0x24
	float y = sinf(third_sector_theta);
 8000cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cb6:	f002 f9db 	bl	8003070 <sinf>
 8000cba:	6238      	str	r0, [r7, #32]

	float a = SCALE_TO_ONE * (S_1_SQRT3 * y + x);
 8000cbc:	4b6e      	ldr	r3, [pc, #440]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000cbe:	6a39      	ldr	r1, [r7, #32]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fde7 	bl	8000894 <__aeabi_fmul>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fcda 	bl	8000684 <__addsf3>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b69      	ldr	r3, [pc, #420]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4610      	mov	r0, r2
 8000cda:	f7ff fddb 	bl	8000894 <__aeabi_fmul>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	61fb      	str	r3, [r7, #28]
	float b = SCALE_TO_ONE * (S_2_SQRT3 * y);
 8000ce2:	4b67      	ldr	r3, [pc, #412]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000ce4:	6a39      	ldr	r1, [r7, #32]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fdd4 	bl	8000894 <__aeabi_fmul>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4b62      	ldr	r3, [pc, #392]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	f7ff fdcd 	bl	8000894 <__aeabi_fmul>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	61bb      	str	r3, [r7, #24]

	float multiplyBy = 200.0f * (1.0f + 12.5f * thetaAdd);
 8000cfe:	4b61      	ldr	r3, [pc, #388]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4961      	ldr	r1, [pc, #388]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fdc5 	bl	8000894 <__aeabi_fmul>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fcb7 	bl	8000684 <__addsf3>
 8000d16:	4603      	mov	r3, r0
 8000d18:	495c      	ldr	r1, [pc, #368]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fdba 	bl	8000894 <__aeabi_fmul>
 8000d20:	4603      	mov	r3, r0
 8000d22:	617b      	str	r3, [r7, #20]
	int addTo = (2000.0f - multiplyBy) / 2.0f;
 8000d24:	6979      	ldr	r1, [r7, #20]
 8000d26:	485a      	ldr	r0, [pc, #360]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d28:	f7ff fcaa 	bl	8000680 <__aeabi_fsub>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe62 	bl	80009fc <__aeabi_fdiv>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff70 	bl	8000c20 <__aeabi_f2iz>
 8000d40:	4603      	mov	r3, r0
 8000d42:	613b      	str	r3, [r7, #16]

	int a_time = a * multiplyBy;
 8000d44:	6979      	ldr	r1, [r7, #20]
 8000d46:	69f8      	ldr	r0, [r7, #28]
 8000d48:	f7ff fda4 	bl	8000894 <__aeabi_fmul>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff66 	bl	8000c20 <__aeabi_f2iz>
 8000d54:	4603      	mov	r3, r0
 8000d56:	60fb      	str	r3, [r7, #12]
	int b_time = b * multiplyBy;
 8000d58:	6979      	ldr	r1, [r7, #20]
 8000d5a:	69b8      	ldr	r0, [r7, #24]
 8000d5c:	f7ff fd9a 	bl	8000894 <__aeabi_fmul>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff5c 	bl	8000c20 <__aeabi_f2iz>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60bb      	str	r3, [r7, #8]

	if (third_sector == 0) {
 8000d6c:	f04f 0100 	mov.w	r1, #0
 8000d70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d72:	f7ff ff23 	bl	8000bbc <__aeabi_fcmpeq>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d010      	beq.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x12e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, a_time + addTo);
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	441a      	add	r2, r3
 8000d82:	4b44      	ldr	r3, [pc, #272]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, b_time + addTo);
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	441a      	add	r2, r3
 8000d8e:	4b41      	ldr	r3, [pc, #260]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, addTo);
 8000d94:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d9c:	e028      	b.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x180>
	} else if (third_sector == 1) {
 8000d9e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000da2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000da4:	f7ff ff0a 	bl	8000bbc <__aeabi_fcmpeq>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d010      	beq.n	8000dd0 <HAL_TIM_PeriodElapsedCallback+0x160>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, addTo);
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, a_time + addTo);
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	441a      	add	r2, r3
 8000dbc:	4b35      	ldr	r3, [pc, #212]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b_time + addTo);
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	441a      	add	r2, r3
 8000dc8:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dce:	e00f      	b.n	8000df0 <HAL_TIM_PeriodElapsedCallback+0x180>
	} else { // third_sector == 2
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, b_time + addTo);
 8000dd0:	68ba      	ldr	r2, [r7, #8]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	441a      	add	r2, r3
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, addTo);
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, a_time + addTo);
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	441a      	add	r2, r3
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	theta += thetaAdd;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	f7ff fc42 	bl	8000684 <__addsf3>
 8000e00:	4603      	mov	r3, r0
 8000e02:	461a      	mov	r2, r3
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e06:	601a      	str	r2, [r3, #0]
	thetaAdd += 0.0000002f;
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4922      	ldr	r1, [pc, #136]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fc38 	bl	8000684 <__addsf3>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000e1a:	601a      	str	r2, [r3, #0]

	if (theta >= 2.0f * M_PI) {
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff faf9 	bl	8000418 <__aeabi_f2d>
 8000e26:	a310      	add	r3, pc, #64	; (adr r3, 8000e68 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2c:	f7ff fbc0 	bl	80005b0 <__aeabi_dcmpge>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d100      	bne.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0x1c8>
		theta -= 2.0f * M_PI;
	}
}
 8000e36:	e012      	b.n	8000e5e <HAL_TIM_PeriodElapsedCallback+0x1ee>
		theta -= 2.0f * M_PI;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff faeb 	bl	8000418 <__aeabi_f2d>
 8000e42:	a309      	add	r3, pc, #36	; (adr r3, 8000e68 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	f7ff f986 	bl	8000158 <__aeabi_dsub>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	4618      	mov	r0, r3
 8000e52:	4621      	mov	r1, r4
 8000e54:	f7ff fbc0 	bl	80005d8 <__aeabi_d2f>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000e5c:	601a      	str	r2, [r3, #0]
}
 8000e5e:	bf00      	nop
 8000e60:	3734      	adds	r7, #52	; 0x34
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd90      	pop	{r4, r7, pc}
 8000e66:	bf00      	nop
 8000e68:	54442d18 	.word	0x54442d18
 8000e6c:	401921fb 	.word	0x401921fb
 8000e70:	20000028 	.word	0x20000028
 8000e74:	40060a92 	.word	0x40060a92
 8000e78:	3f13cd3a 	.word	0x3f13cd3a
 8000e7c:	3f5db3d8 	.word	0x3f5db3d8
 8000e80:	3f93cd3a 	.word	0x3f93cd3a
 8000e84:	2000002c 	.word	0x2000002c
 8000e88:	41480000 	.word	0x41480000
 8000e8c:	43480000 	.word	0x43480000
 8000e90:	44fa0000 	.word	0x44fa0000
 8000e94:	20000030 	.word	0x20000030
 8000e98:	3456bf95 	.word	0x3456bf95

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea0:	f000 fabc 	bl	800141c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea4:	f000 f828 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f000 f92a 	bl	8001100 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000eac:	f000 f86a 	bl	8000f84 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <main+0x58>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <main+0x58>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0201 	orr.w	r2, r2, #1
 8000ebe:	60da      	str	r2, [r3, #12]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <main+0x58>)
 8000ec4:	f001 f9be 	bl	8002244 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <main+0x58>)
 8000ecc:	f001 ff3a 	bl	8002d44 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <main+0x58>)
 8000ed4:	f001 f9b6 	bl	8002244 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000ed8:	2104      	movs	r1, #4
 8000eda:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <main+0x58>)
 8000edc:	f001 ff32 	bl	8002d44 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <main+0x58>)
 8000ee4:	f001 f9ae 	bl	8002244 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000ee8:	2108      	movs	r1, #8
 8000eea:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <main+0x58>)
 8000eec:	f001 ff2a 	bl	8002d44 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <main+0x54>
 8000ef2:	bf00      	nop
 8000ef4:	20000030 	.word	0x20000030

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b090      	sub	sp, #64	; 0x40
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0318 	add.w	r3, r7, #24
 8000f02:	2228      	movs	r2, #40	; 0x28
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 f836 	bl	8002f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f36:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 fd35 	bl	80019b0 <HAL_RCC_OscConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f4c:	f000 f906 	bl	800115c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f50:	230f      	movs	r3, #15
 8000f52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f54:	2302      	movs	r3, #2
 8000f56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 ffa0 	bl	8001eb0 <HAL_RCC_ClockConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f76:	f000 f8f1 	bl	800115c <Error_Handler>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	3740      	adds	r7, #64	; 0x40
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b096      	sub	sp, #88	; 0x58
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	615a      	str	r2, [r3, #20]
 8000fb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2220      	movs	r2, #32
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 ffdb 	bl	8002f78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fc2:	4b4d      	ldr	r3, [pc, #308]	; (80010f8 <MX_TIM1_Init+0x174>)
 8000fc4:	4a4d      	ldr	r2, [pc, #308]	; (80010fc <MX_TIM1_Init+0x178>)
 8000fc6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fc8:	4b4b      	ldr	r3, [pc, #300]	; (80010f8 <MX_TIM1_Init+0x174>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b4a      	ldr	r3, [pc, #296]	; (80010f8 <MX_TIM1_Init+0x174>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000fd4:	4b48      	ldr	r3, [pc, #288]	; (80010f8 <MX_TIM1_Init+0x174>)
 8000fd6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fdc:	4b46      	ldr	r3, [pc, #280]	; (80010f8 <MX_TIM1_Init+0x174>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fe2:	4b45      	ldr	r3, [pc, #276]	; (80010f8 <MX_TIM1_Init+0x174>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fe8:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <MX_TIM1_Init+0x174>)
 8000fea:	2280      	movs	r2, #128	; 0x80
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fee:	4842      	ldr	r0, [pc, #264]	; (80010f8 <MX_TIM1_Init+0x174>)
 8000ff0:	f001 f8c8 	bl	8002184 <HAL_TIM_Base_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ffa:	f000 f8af 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001004:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001008:	4619      	mov	r1, r3
 800100a:	483b      	ldr	r0, [pc, #236]	; (80010f8 <MX_TIM1_Init+0x174>)
 800100c:	f001 fb1a 	bl	8002644 <HAL_TIM_ConfigClockSource>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001016:	f000 f8a1 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800101a:	4837      	ldr	r0, [pc, #220]	; (80010f8 <MX_TIM1_Init+0x174>)
 800101c:	f001 f8dd 	bl	80021da <HAL_TIM_PWM_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001026:	f000 f899 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102e:	2300      	movs	r3, #0
 8001030:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001032:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001036:	4619      	mov	r1, r3
 8001038:	482f      	ldr	r0, [pc, #188]	; (80010f8 <MX_TIM1_Init+0x174>)
 800103a:	f001 fead 	bl	8002d98 <HAL_TIMEx_MasterConfigSynchronization>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001044:	f000 f88a 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001048:	2360      	movs	r3, #96	; 0x60
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 800104c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	4822      	ldr	r0, [pc, #136]	; (80010f8 <MX_TIM1_Init+0x174>)
 8001070:	f001 fa22 	bl	80024b8 <HAL_TIM_PWM_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800107a:	f000 f86f 	bl	800115c <Error_Handler>
  }
  sConfigOC.Pulse = 250;
 800107e:	23fa      	movs	r3, #250	; 0xfa
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	2204      	movs	r2, #4
 8001088:	4619      	mov	r1, r3
 800108a:	481b      	ldr	r0, [pc, #108]	; (80010f8 <MX_TIM1_Init+0x174>)
 800108c:	f001 fa14 	bl	80024b8 <HAL_TIM_PWM_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001096:	f000 f861 	bl	800115c <Error_Handler>
  }
  sConfigOC.Pulse = 750;
 800109a:	f240 23ee 	movw	r3, #750	; 0x2ee
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a4:	2208      	movs	r2, #8
 80010a6:	4619      	mov	r1, r3
 80010a8:	4813      	ldr	r0, [pc, #76]	; (80010f8 <MX_TIM1_Init+0x174>)
 80010aa:	f001 fa05 	bl	80024b8 <HAL_TIM_PWM_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80010b4:	f000 f852 	bl	800115c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <MX_TIM1_Init+0x174>)
 80010dc:	f001 fea0 	bl	8002e20 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 80010e6:	f000 f839 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <MX_TIM1_Init+0x174>)
 80010ec:	f000 f89c 	bl	8001228 <HAL_TIM_MspPostInit>

}
 80010f0:	bf00      	nop
 80010f2:	3758      	adds	r7, #88	; 0x58
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000030 	.word	0x20000030
 80010fc:	40012c00 	.word	0x40012c00

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_GPIO_Init+0x58>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	4a13      	ldr	r2, [pc, #76]	; (8001158 <MX_GPIO_Init+0x58>)
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	6193      	str	r3, [r2, #24]
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_GPIO_Init+0x58>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_GPIO_Init+0x58>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <MX_GPIO_Init+0x58>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_GPIO_Init+0x58>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_GPIO_Init+0x58>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4a07      	ldr	r2, [pc, #28]	; (8001158 <MX_GPIO_Init+0x58>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6193      	str	r3, [r2, #24]
 8001142:	4b05      	ldr	r3, [pc, #20]	; (8001158 <MX_GPIO_Init+0x58>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	40021000 	.word	0x40021000

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_MspInit+0x5c>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <HAL_MspInit+0x5c>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6193      	str	r3, [r2, #24]
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_MspInit+0x5c>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_MspInit+0x5c>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <HAL_MspInit+0x5c>)
 800118c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001190:	61d3      	str	r3, [r2, #28]
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_MspInit+0x5c>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_MspInit+0x60>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_MspInit+0x60>)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010000 	.word	0x40010000

080011cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a11      	ldr	r2, [pc, #68]	; (8001220 <HAL_TIM_Base_MspInit+0x54>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d11b      	bne.n	8001216 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_TIM_Base_MspInit+0x58>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_TIM_Base_MspInit+0x58>)
 80011e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011e8:	6193      	str	r3, [r2, #24]
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_TIM_Base_MspInit+0x58>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2018      	movs	r0, #24
 80011fc:	f000 fa47 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001200:	2018      	movs	r0, #24
 8001202:	f000 fa60 	bl	80016c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2019      	movs	r0, #25
 800120c:	f000 fa3f 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001210:	2019      	movs	r0, #25
 8001212:	f000 fa58 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40012c00 	.word	0x40012c00
 8001224:	40021000 	.word	0x40021000

08001228 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a25      	ldr	r2, [pc, #148]	; (80012d8 <HAL_TIM_MspPostInit+0xb0>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d142      	bne.n	80012ce <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b24      	ldr	r3, [pc, #144]	; (80012dc <HAL_TIM_MspPostInit+0xb4>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a23      	ldr	r2, [pc, #140]	; (80012dc <HAL_TIM_MspPostInit+0xb4>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <HAL_TIM_MspPostInit+0xb4>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <HAL_TIM_MspPostInit+0xb4>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <HAL_TIM_MspPostInit+0xb4>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_TIM_MspPostInit+0xb4>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001278:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2302      	movs	r3, #2
 8001284:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4814      	ldr	r0, [pc, #80]	; (80012e0 <HAL_TIM_MspPostInit+0xb8>)
 800128e:	f000 fa35 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001292:	2303      	movs	r3, #3
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2302      	movs	r3, #2
 800129c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	480f      	ldr	r0, [pc, #60]	; (80012e4 <HAL_TIM_MspPostInit+0xbc>)
 80012a6:	f000 fa29 	bl	80016fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_TIM_MspPostInit+0xc0>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_TIM_MspPostInit+0xc0>)
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40012c00 	.word	0x40012c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010800 	.word	0x40010800
 80012e4:	40010c00 	.word	0x40010c00
 80012e8:	40010000 	.word	0x40010000

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <HardFault_Handler+0x4>

080012fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <MemManage_Handler+0x4>

08001304 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <BusFault_Handler+0x4>

0800130a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <UsageFault_Handler+0x4>

08001310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 f8b6 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <TIM1_BRK_IRQHandler+0x10>)
 8001346:	f000 ffaf 	bl	80022a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000030 	.word	0x20000030

08001354 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <TIM1_UP_IRQHandler+0x10>)
 800135a:	f000 ffa5 	bl	80022a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000030 	.word	0x20000030

08001368 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <SystemInit+0x5c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <SystemInit+0x5c>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <SystemInit+0x5c>)
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	4911      	ldr	r1, [pc, #68]	; (80013c4 <SystemInit+0x5c>)
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <SystemInit+0x60>)
 8001380:	4013      	ands	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <SystemInit+0x5c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <SystemInit+0x5c>)
 800138a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800138e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001392:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <SystemInit+0x5c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <SystemInit+0x5c>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <SystemInit+0x5c>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <SystemInit+0x5c>)
 80013a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80013aa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <SystemInit+0x5c>)
 80013ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80013b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <SystemInit+0x64>)
 80013b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000
 80013c8:	f8ff0000 	.word	0xf8ff0000
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013d2:	e003      	b.n	80013dc <LoopCopyDataInit>

080013d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013da:	3104      	adds	r1, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013e4:	d3f6      	bcc.n	80013d4 <CopyDataInit>
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013e8:	e002      	b.n	80013f0 <LoopFillZerobss>

080013ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013ec:	f842 3b04 	str.w	r3, [r2], #4

080013f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013f4:	d3f9      	bcc.n	80013ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013f6:	f7ff ffb7 	bl	8001368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fa:	f001 fd99 	bl	8002f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013fe:	f7ff fd4d 	bl	8000e9c <main>
  bx lr
 8001402:	4770      	bx	lr
  ldr r3, =_sidata
 8001404:	08003f74 	.word	0x08003f74
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800140c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001410:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001414:	20000074 	.word	0x20000074

08001418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC1_2_IRQHandler>
	...

0800141c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_Init+0x28>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <HAL_Init+0x28>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 f923 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f808 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fe96 	bl	8001168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40022000 	.word	0x40022000

08001448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x54>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x58>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f93b 	bl	80016e2 <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001484:	f000 f903 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <HAL_InitTick+0x5c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000004 	.word	0x20000004

080014a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_IncTick+0x1c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_IncTick+0x20>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a03      	ldr	r2, [pc, #12]	; (80014c8 <HAL_IncTick+0x20>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000070 	.word	0x20000070

080014cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b02      	ldr	r3, [pc, #8]	; (80014dc <HAL_GetTick+0x10>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000070 	.word	0x20000070

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4906      	ldr	r1, [pc, #24]	; (8001578 <__NVIC_EnableIRQ+0x34>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001658:	f7ff ff90 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff2d 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff42 	bl	8001528 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff90 	bl	80015d0 <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5f 	bl	800157c <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff35 	bl	8001544 <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b08b      	sub	sp, #44	; 0x2c
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170e:	e127      	b.n	8001960 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001710:	2201      	movs	r2, #1
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	429a      	cmp	r2, r3
 800172a:	f040 8116 	bne.w	800195a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b12      	cmp	r3, #18
 8001734:	d034      	beq.n	80017a0 <HAL_GPIO_Init+0xa4>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d80d      	bhi.n	8001756 <HAL_GPIO_Init+0x5a>
 800173a:	2b02      	cmp	r3, #2
 800173c:	d02b      	beq.n	8001796 <HAL_GPIO_Init+0x9a>
 800173e:	2b02      	cmp	r3, #2
 8001740:	d804      	bhi.n	800174c <HAL_GPIO_Init+0x50>
 8001742:	2b00      	cmp	r3, #0
 8001744:	d031      	beq.n	80017aa <HAL_GPIO_Init+0xae>
 8001746:	2b01      	cmp	r3, #1
 8001748:	d01c      	beq.n	8001784 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174a:	e048      	b.n	80017de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800174c:	2b03      	cmp	r3, #3
 800174e:	d043      	beq.n	80017d8 <HAL_GPIO_Init+0xdc>
 8001750:	2b11      	cmp	r3, #17
 8001752:	d01b      	beq.n	800178c <HAL_GPIO_Init+0x90>
          break;
 8001754:	e043      	b.n	80017de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001756:	4a89      	ldr	r2, [pc, #548]	; (800197c <HAL_GPIO_Init+0x280>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d026      	beq.n	80017aa <HAL_GPIO_Init+0xae>
 800175c:	4a87      	ldr	r2, [pc, #540]	; (800197c <HAL_GPIO_Init+0x280>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d806      	bhi.n	8001770 <HAL_GPIO_Init+0x74>
 8001762:	4a87      	ldr	r2, [pc, #540]	; (8001980 <HAL_GPIO_Init+0x284>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d020      	beq.n	80017aa <HAL_GPIO_Init+0xae>
 8001768:	4a86      	ldr	r2, [pc, #536]	; (8001984 <HAL_GPIO_Init+0x288>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01d      	beq.n	80017aa <HAL_GPIO_Init+0xae>
          break;
 800176e:	e036      	b.n	80017de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001770:	4a85      	ldr	r2, [pc, #532]	; (8001988 <HAL_GPIO_Init+0x28c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0xae>
 8001776:	4a85      	ldr	r2, [pc, #532]	; (800198c <HAL_GPIO_Init+0x290>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d016      	beq.n	80017aa <HAL_GPIO_Init+0xae>
 800177c:	4a84      	ldr	r2, [pc, #528]	; (8001990 <HAL_GPIO_Init+0x294>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_GPIO_Init+0xae>
          break;
 8001782:	e02c      	b.n	80017de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	623b      	str	r3, [r7, #32]
          break;
 800178a:	e028      	b.n	80017de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	3304      	adds	r3, #4
 8001792:	623b      	str	r3, [r7, #32]
          break;
 8001794:	e023      	b.n	80017de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	3308      	adds	r3, #8
 800179c:	623b      	str	r3, [r7, #32]
          break;
 800179e:	e01e      	b.n	80017de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	330c      	adds	r3, #12
 80017a6:	623b      	str	r3, [r7, #32]
          break;
 80017a8:	e019      	b.n	80017de <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d102      	bne.n	80017b8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017b2:	2304      	movs	r3, #4
 80017b4:	623b      	str	r3, [r7, #32]
          break;
 80017b6:	e012      	b.n	80017de <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c0:	2308      	movs	r3, #8
 80017c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	611a      	str	r2, [r3, #16]
          break;
 80017ca:	e008      	b.n	80017de <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017cc:	2308      	movs	r3, #8
 80017ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	615a      	str	r2, [r3, #20]
          break;
 80017d6:	e002      	b.n	80017de <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
          break;
 80017dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2bff      	cmp	r3, #255	; 0xff
 80017e2:	d801      	bhi.n	80017e8 <HAL_GPIO_Init+0xec>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	e001      	b.n	80017ec <HAL_GPIO_Init+0xf0>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3304      	adds	r3, #4
 80017ec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2bff      	cmp	r3, #255	; 0xff
 80017f2:	d802      	bhi.n	80017fa <HAL_GPIO_Init+0xfe>
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x104>
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	3b08      	subs	r3, #8
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	210f      	movs	r1, #15
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	401a      	ands	r2, r3
 8001812:	6a39      	ldr	r1, [r7, #32]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	431a      	orrs	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 8096 	beq.w	800195a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800182e:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_GPIO_Init+0x298>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_GPIO_Init+0x298>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6193      	str	r3, [r2, #24]
 800183a:	4b56      	ldr	r3, [pc, #344]	; (8001994 <HAL_GPIO_Init+0x298>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001846:	4a54      	ldr	r2, [pc, #336]	; (8001998 <HAL_GPIO_Init+0x29c>)
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4013      	ands	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4b      	ldr	r2, [pc, #300]	; (800199c <HAL_GPIO_Init+0x2a0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0x19e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4a      	ldr	r2, [pc, #296]	; (80019a0 <HAL_GPIO_Init+0x2a4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00d      	beq.n	8001896 <HAL_GPIO_Init+0x19a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a49      	ldr	r2, [pc, #292]	; (80019a4 <HAL_GPIO_Init+0x2a8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d007      	beq.n	8001892 <HAL_GPIO_Init+0x196>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <HAL_GPIO_Init+0x2ac>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_GPIO_Init+0x192>
 800188a:	2303      	movs	r3, #3
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x1a0>
 800188e:	2304      	movs	r3, #4
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x1a0>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x1a0>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x1a0>
 800189a:	2300      	movs	r3, #0
 800189c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ac:	493a      	ldr	r1, [pc, #232]	; (8001998 <HAL_GPIO_Init+0x29c>)
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018c6:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4938      	ldr	r1, [pc, #224]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]
 80018d2:	e006      	b.n	80018e2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018d4:	4b35      	ldr	r3, [pc, #212]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	43db      	mvns	r3, r3
 80018dc:	4933      	ldr	r1, [pc, #204]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018de:	4013      	ands	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ee:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	492e      	ldr	r1, [pc, #184]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
 80018fa:	e006      	b.n	800190a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	43db      	mvns	r3, r3
 8001904:	4929      	ldr	r1, [pc, #164]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001906:	4013      	ands	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001916:	4b25      	ldr	r3, [pc, #148]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	4924      	ldr	r1, [pc, #144]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
 8001922:	e006      	b.n	8001932 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	43db      	mvns	r3, r3
 800192c:	491f      	ldr	r1, [pc, #124]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 800192e:	4013      	ands	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d006      	beq.n	800194c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	491a      	ldr	r1, [pc, #104]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	60cb      	str	r3, [r1, #12]
 800194a:	e006      	b.n	800195a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	43db      	mvns	r3, r3
 8001954:	4915      	ldr	r1, [pc, #84]	; (80019ac <HAL_GPIO_Init+0x2b0>)
 8001956:	4013      	ands	r3, r2
 8001958:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	3301      	adds	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	fa22 f303 	lsr.w	r3, r2, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	f47f aed0 	bne.w	8001710 <HAL_GPIO_Init+0x14>
  }
}
 8001970:	bf00      	nop
 8001972:	372c      	adds	r7, #44	; 0x2c
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	10210000 	.word	0x10210000
 8001980:	10110000 	.word	0x10110000
 8001984:	10120000 	.word	0x10120000
 8001988:	10310000 	.word	0x10310000
 800198c:	10320000 	.word	0x10320000
 8001990:	10220000 	.word	0x10220000
 8001994:	40021000 	.word	0x40021000
 8001998:	40010000 	.word	0x40010000
 800199c:	40010800 	.word	0x40010800
 80019a0:	40010c00 	.word	0x40010c00
 80019a4:	40011000 	.word	0x40011000
 80019a8:	40011400 	.word	0x40011400
 80019ac:	40010400 	.word	0x40010400

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e26c      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8087 	beq.w	8001ade <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d0:	4b92      	ldr	r3, [pc, #584]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d00c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019dc:	4b8f      	ldr	r3, [pc, #572]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d112      	bne.n	8001a0e <HAL_RCC_OscConfig+0x5e>
 80019e8:	4b8c      	ldr	r3, [pc, #560]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f4:	d10b      	bne.n	8001a0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f6:	4b89      	ldr	r3, [pc, #548]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d06c      	beq.n	8001adc <HAL_RCC_OscConfig+0x12c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d168      	bne.n	8001adc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e246      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x76>
 8001a18:	4b80      	ldr	r3, [pc, #512]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a7f      	ldr	r2, [pc, #508]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e02e      	b.n	8001a84 <HAL_RCC_OscConfig+0xd4>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x98>
 8001a2e:	4b7b      	ldr	r3, [pc, #492]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a7a      	ldr	r2, [pc, #488]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b78      	ldr	r3, [pc, #480]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a77      	ldr	r2, [pc, #476]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e01d      	b.n	8001a84 <HAL_RCC_OscConfig+0xd4>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0xbc>
 8001a52:	4b72      	ldr	r3, [pc, #456]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a71      	ldr	r2, [pc, #452]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b6f      	ldr	r3, [pc, #444]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a6e      	ldr	r2, [pc, #440]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0xd4>
 8001a6c:	4b6b      	ldr	r3, [pc, #428]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6a      	ldr	r2, [pc, #424]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b68      	ldr	r3, [pc, #416]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a67      	ldr	r2, [pc, #412]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fd1e 	bl	80014cc <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fd1a 	bl	80014cc <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1fa      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b5d      	ldr	r3, [pc, #372]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0xe4>
 8001ab2:	e014      	b.n	8001ade <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fd0a 	bl	80014cc <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff fd06 	bl	80014cc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e1e6      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	4b53      	ldr	r3, [pc, #332]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x10c>
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d063      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aea:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001af6:	4b49      	ldr	r3, [pc, #292]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d11c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x18c>
 8001b02:	4b46      	ldr	r3, [pc, #280]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d116      	bne.n	8001b3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_RCC_OscConfig+0x176>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e1ba      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4939      	ldr	r1, [pc, #228]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	e03a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b44:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fcbf 	bl	80014cc <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b52:	f7ff fcbb 	bl	80014cc <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e19b      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b70:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4927      	ldr	r1, [pc, #156]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
 8001b84:	e015      	b.n	8001bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fc9e 	bl	80014cc <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b94:	f7ff fc9a 	bl	80014cc <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e17a      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d03a      	beq.n	8001c34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d019      	beq.n	8001bfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bcc:	f7ff fc7e 	bl	80014cc <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd4:	f7ff fc7a 	bl	80014cc <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e15a      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f000 faa8 	bl	8002148 <RCC_Delay>
 8001bf8:	e01c      	b.n	8001c34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c00:	f7ff fc64 	bl	80014cc <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c06:	e00f      	b.n	8001c28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff fc60 	bl	80014cc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d908      	bls.n	8001c28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e140      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	42420000 	.word	0x42420000
 8001c24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	4b9e      	ldr	r3, [pc, #632]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e9      	bne.n	8001c08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80a6 	beq.w	8001d8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c46:	4b97      	ldr	r3, [pc, #604]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10d      	bne.n	8001c6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	4b94      	ldr	r3, [pc, #592]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a93      	ldr	r2, [pc, #588]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	61d3      	str	r3, [r2, #28]
 8001c5e:	4b91      	ldr	r3, [pc, #580]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6e:	4b8e      	ldr	r3, [pc, #568]	; (8001ea8 <HAL_RCC_OscConfig+0x4f8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d118      	bne.n	8001cac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7a:	4b8b      	ldr	r3, [pc, #556]	; (8001ea8 <HAL_RCC_OscConfig+0x4f8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a8a      	ldr	r2, [pc, #552]	; (8001ea8 <HAL_RCC_OscConfig+0x4f8>)
 8001c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c86:	f7ff fc21 	bl	80014cc <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8e:	f7ff fc1d 	bl	80014cc <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b64      	cmp	r3, #100	; 0x64
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0fd      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	4b81      	ldr	r3, [pc, #516]	; (8001ea8 <HAL_RCC_OscConfig+0x4f8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x312>
 8001cb4:	4b7b      	ldr	r3, [pc, #492]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4a7a      	ldr	r2, [pc, #488]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6213      	str	r3, [r2, #32]
 8001cc0:	e02d      	b.n	8001d1e <HAL_RCC_OscConfig+0x36e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x334>
 8001cca:	4b76      	ldr	r3, [pc, #472]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a75      	ldr	r2, [pc, #468]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	4b73      	ldr	r3, [pc, #460]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a72      	ldr	r2, [pc, #456]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	f023 0304 	bic.w	r3, r3, #4
 8001ce0:	6213      	str	r3, [r2, #32]
 8001ce2:	e01c      	b.n	8001d1e <HAL_RCC_OscConfig+0x36e>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b05      	cmp	r3, #5
 8001cea:	d10c      	bne.n	8001d06 <HAL_RCC_OscConfig+0x356>
 8001cec:	4b6d      	ldr	r3, [pc, #436]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a6c      	ldr	r2, [pc, #432]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a69      	ldr	r2, [pc, #420]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	e00b      	b.n	8001d1e <HAL_RCC_OscConfig+0x36e>
 8001d06:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a66      	ldr	r2, [pc, #408]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6213      	str	r3, [r2, #32]
 8001d12:	4b64      	ldr	r3, [pc, #400]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a63      	ldr	r2, [pc, #396]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d015      	beq.n	8001d52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fbd1 	bl	80014cc <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff fbcd 	bl	80014cc <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0ab      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	4b57      	ldr	r3, [pc, #348]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0ee      	beq.n	8001d2e <HAL_RCC_OscConfig+0x37e>
 8001d50:	e014      	b.n	8001d7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d52:	f7ff fbbb 	bl	80014cc <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7ff fbb7 	bl	80014cc <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e095      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d70:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1ee      	bne.n	8001d5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d105      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d82:	4b48      	ldr	r3, [pc, #288]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	4a47      	ldr	r2, [pc, #284]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8081 	beq.w	8001e9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d98:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d061      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d146      	bne.n	8001e3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dac:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <HAL_RCC_OscConfig+0x4fc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff fb8b 	bl	80014cc <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dba:	f7ff fb87 	bl	80014cc <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e067      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dcc:	4b35      	ldr	r3, [pc, #212]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f0      	bne.n	8001dba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de0:	d108      	bne.n	8001df4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001de2:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	492d      	ldr	r1, [pc, #180]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df4:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a19      	ldr	r1, [r3, #32]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	430b      	orrs	r3, r1
 8001e06:	4927      	ldr	r1, [pc, #156]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_RCC_OscConfig+0x4fc>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7ff fb5b 	bl	80014cc <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7ff fb57 	bl	80014cc <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e037      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x46a>
 8001e38:	e02f      	b.n	8001e9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <HAL_RCC_OscConfig+0x4fc>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fb44 	bl	80014cc <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7ff fb40 	bl	80014cc <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e020      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x498>
 8001e66:	e018      	b.n	8001e9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e013      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	42420060 	.word	0x42420060

08001eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0d0      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d910      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 0207 	bic.w	r2, r3, #7
 8001eda:	4965      	ldr	r1, [pc, #404]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0b8      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d020      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f0c:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a58      	ldr	r2, [pc, #352]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f24:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a52      	ldr	r2, [pc, #328]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f30:	4b50      	ldr	r3, [pc, #320]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	494d      	ldr	r1, [pc, #308]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d040      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d115      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e07f      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6e:	4b41      	ldr	r3, [pc, #260]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e073      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e06b      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8e:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f023 0203 	bic.w	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4936      	ldr	r1, [pc, #216]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa0:	f7ff fa94 	bl	80014cc <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa8:	f7ff fa90 	bl	80014cc <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e053      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 020c 	and.w	r2, r3, #12
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1eb      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d210      	bcs.n	8002000 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 0207 	bic.w	r2, r3, #7
 8001fe6:	4922      	ldr	r1, [pc, #136]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e032      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4916      	ldr	r1, [pc, #88]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	490e      	ldr	r1, [pc, #56]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203e:	f000 f821 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8002042:	4601      	mov	r1, r0
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <HAL_RCC_ClockConfig+0x1c8>)
 8002050:	5cd3      	ldrb	r3, [r2, r3]
 8002052:	fa21 f303 	lsr.w	r3, r1, r3
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1cc>)
 8002058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_ClockConfig+0x1d0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f9f2 	bl	8001448 <HAL_InitTick>

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40022000 	.word	0x40022000
 8002074:	40021000 	.word	0x40021000
 8002078:	08003b8c 	.word	0x08003b8c
 800207c:	20000000 	.word	0x20000000
 8002080:	20000004 	.word	0x20000004

08002084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	b490      	push	{r4, r7}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800208a:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb0>)
 800208c:	1d3c      	adds	r4, r7, #4
 800208e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002094:	4b28      	ldr	r3, [pc, #160]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ae:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d002      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x40>
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0x46>
 80020c2:	e02d      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c4:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020c6:	623b      	str	r3, [r7, #32]
      break;
 80020c8:	e02d      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	0c9b      	lsrs	r3, r3, #18
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020d6:	4413      	add	r3, r2
 80020d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d013      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	0c5b      	lsrs	r3, r3, #17
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020f6:	4413      	add	r3, r2
 80020f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002102:	fb02 f203 	mul.w	r2, r2, r3
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	fbb2 f3f3 	udiv	r3, r2, r3
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
 800210e:	e004      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002114:	fb02 f303 	mul.w	r3, r2, r3
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	623b      	str	r3, [r7, #32]
      break;
 800211e:	e002      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002122:	623b      	str	r3, [r7, #32]
      break;
 8002124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002126:	6a3b      	ldr	r3, [r7, #32]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3728      	adds	r7, #40	; 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bc90      	pop	{r4, r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	08003b78 	.word	0x08003b78
 8002138:	08003b88 	.word	0x08003b88
 800213c:	40021000 	.word	0x40021000
 8002140:	007a1200 	.word	0x007a1200
 8002144:	003d0900 	.word	0x003d0900

08002148 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002150:	4b0a      	ldr	r3, [pc, #40]	; (800217c <RCC_Delay+0x34>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <RCC_Delay+0x38>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	0a5b      	lsrs	r3, r3, #9
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002164:	bf00      	nop
  }
  while (Delay --);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1e5a      	subs	r2, r3, #1
 800216a:	60fa      	str	r2, [r7, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f9      	bne.n	8002164 <RCC_Delay+0x1c>
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000000 	.word	0x20000000
 8002180:	10624dd3 	.word	0x10624dd3

08002184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e01d      	b.n	80021d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff f80e 	bl	80011cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3304      	adds	r3, #4
 80021c0:	4619      	mov	r1, r3
 80021c2:	4610      	mov	r0, r2
 80021c4:	f000 fb1a 	bl	80027fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e01d      	b.n	8002228 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f815 	bl	8002230 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3304      	adds	r3, #4
 8002216:	4619      	mov	r1, r3
 8002218:	4610      	mov	r0, r2
 800221a:	f000 faef 	bl	80027fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
	...

08002244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2201      	movs	r2, #1
 8002254:	6839      	ldr	r1, [r7, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fd50 	bl	8002cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a10      	ldr	r2, [pc, #64]	; (80022a4 <HAL_TIM_PWM_Start+0x60>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d107      	bne.n	8002276 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b06      	cmp	r3, #6
 8002286:	d007      	beq.n	8002298 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40012c00 	.word	0x40012c00

080022a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d122      	bne.n	8002304 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d11b      	bne.n	8002304 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0202 	mvn.w	r2, #2
 80022d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fa6a 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 80022f0:	e005      	b.n	80022fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fa5d 	bl	80027b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fa6c 	bl	80027d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b04      	cmp	r3, #4
 8002310:	d122      	bne.n	8002358 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b04      	cmp	r3, #4
 800231e:	d11b      	bne.n	8002358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f06f 0204 	mvn.w	r2, #4
 8002328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fa40 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 8002344:	e005      	b.n	8002352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fa33 	bl	80027b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fa42 	bl	80027d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b08      	cmp	r3, #8
 8002364:	d122      	bne.n	80023ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b08      	cmp	r3, #8
 8002372:	d11b      	bne.n	80023ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0208 	mvn.w	r2, #8
 800237c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2204      	movs	r2, #4
 8002382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fa16 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 8002398:	e005      	b.n	80023a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa09 	bl	80027b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 fa18 	bl	80027d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b10      	cmp	r3, #16
 80023b8:	d122      	bne.n	8002400 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d11b      	bne.n	8002400 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0210 	mvn.w	r2, #16
 80023d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2208      	movs	r2, #8
 80023d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f9ec 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 80023ec:	e005      	b.n	80023fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f9df 	bl	80027b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f9ee 	bl	80027d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d10e      	bne.n	800242c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b01      	cmp	r3, #1
 800241a:	d107      	bne.n	800242c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0201 	mvn.w	r2, #1
 8002424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe fc22 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002436:	2b80      	cmp	r3, #128	; 0x80
 8002438:	d10e      	bne.n	8002458 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002444:	2b80      	cmp	r3, #128	; 0x80
 8002446:	d107      	bne.n	8002458 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fd3e 	bl	8002ed4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002462:	2b40      	cmp	r3, #64	; 0x40
 8002464:	d10e      	bne.n	8002484 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d107      	bne.n	8002484 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f9b2 	bl	80027e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	2b20      	cmp	r3, #32
 8002490:	d10e      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0320 	and.w	r3, r3, #32
 800249c:	2b20      	cmp	r3, #32
 800249e:	d107      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0220 	mvn.w	r2, #32
 80024a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fd09 	bl	8002ec2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e0b4      	b.n	800263c <HAL_TIM_PWM_ConfigChannel+0x184>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b0c      	cmp	r3, #12
 80024e6:	f200 809f 	bhi.w	8002628 <HAL_TIM_PWM_ConfigChannel+0x170>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	08002525 	.word	0x08002525
 80024f4:	08002629 	.word	0x08002629
 80024f8:	08002629 	.word	0x08002629
 80024fc:	08002629 	.word	0x08002629
 8002500:	08002565 	.word	0x08002565
 8002504:	08002629 	.word	0x08002629
 8002508:	08002629 	.word	0x08002629
 800250c:	08002629 	.word	0x08002629
 8002510:	080025a7 	.word	0x080025a7
 8002514:	08002629 	.word	0x08002629
 8002518:	08002629 	.word	0x08002629
 800251c:	08002629 	.word	0x08002629
 8002520:	080025e7 	.word	0x080025e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f9c8 	bl	80028c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0208 	orr.w	r2, r2, #8
 800253e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699a      	ldr	r2, [r3, #24]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0204 	bic.w	r2, r2, #4
 800254e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6999      	ldr	r1, [r3, #24]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	619a      	str	r2, [r3, #24]
      break;
 8002562:	e062      	b.n	800262a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fa0e 	bl	800298c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6999      	ldr	r1, [r3, #24]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	021a      	lsls	r2, r3, #8
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	619a      	str	r2, [r3, #24]
      break;
 80025a4:	e041      	b.n	800262a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fa57 	bl	8002a60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69da      	ldr	r2, [r3, #28]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f042 0208 	orr.w	r2, r2, #8
 80025c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0204 	bic.w	r2, r2, #4
 80025d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69d9      	ldr	r1, [r3, #28]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	61da      	str	r2, [r3, #28]
      break;
 80025e4:	e021      	b.n	800262a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 faa1 	bl	8002b34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69d9      	ldr	r1, [r3, #28]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	021a      	lsls	r2, r3, #8
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	61da      	str	r2, [r3, #28]
      break;
 8002626:	e000      	b.n	800262a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002628:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_TIM_ConfigClockSource+0x18>
 8002658:	2302      	movs	r3, #2
 800265a:	e0a6      	b.n	80027aa <HAL_TIM_ConfigClockSource+0x166>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800267a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002682:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b40      	cmp	r3, #64	; 0x40
 8002692:	d067      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0x120>
 8002694:	2b40      	cmp	r3, #64	; 0x40
 8002696:	d80b      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x6c>
 8002698:	2b10      	cmp	r3, #16
 800269a:	d073      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x140>
 800269c:	2b10      	cmp	r3, #16
 800269e:	d802      	bhi.n	80026a6 <HAL_TIM_ConfigClockSource+0x62>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06f      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80026a4:	e078      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d06c      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x140>
 80026aa:	2b30      	cmp	r3, #48	; 0x30
 80026ac:	d06a      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80026ae:	e073      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026b0:	2b70      	cmp	r3, #112	; 0x70
 80026b2:	d00d      	beq.n	80026d0 <HAL_TIM_ConfigClockSource+0x8c>
 80026b4:	2b70      	cmp	r3, #112	; 0x70
 80026b6:	d804      	bhi.n	80026c2 <HAL_TIM_ConfigClockSource+0x7e>
 80026b8:	2b50      	cmp	r3, #80	; 0x50
 80026ba:	d033      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0xe0>
 80026bc:	2b60      	cmp	r3, #96	; 0x60
 80026be:	d041      	beq.n	8002744 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80026c0:	e06a      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c6:	d066      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x152>
 80026c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026cc:	d017      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80026ce:	e063      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6899      	ldr	r1, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f000 faed 	bl	8002cbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	609a      	str	r2, [r3, #8]
      break;
 80026fc:	e04c      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f000 fad6 	bl	8002cbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002720:	609a      	str	r2, [r3, #8]
      break;
 8002722:	e039      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	461a      	mov	r2, r3
 8002732:	f000 fa4d 	bl	8002bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2150      	movs	r1, #80	; 0x50
 800273c:	4618      	mov	r0, r3
 800273e:	f000 faa4 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 8002742:	e029      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	461a      	mov	r2, r3
 8002752:	f000 fa6b 	bl	8002c2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2160      	movs	r1, #96	; 0x60
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fa94 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 8002762:	e019      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	461a      	mov	r2, r3
 8002772:	f000 fa2d 	bl	8002bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2140      	movs	r1, #64	; 0x40
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fa84 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 8002782:	e009      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f000 fa7b 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 8002794:	e000      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
	...

080027fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <TIM_Base_SetConfig+0xb8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d00b      	beq.n	800282c <TIM_Base_SetConfig+0x30>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281a:	d007      	beq.n	800282c <TIM_Base_SetConfig+0x30>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <TIM_Base_SetConfig+0xbc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d003      	beq.n	800282c <TIM_Base_SetConfig+0x30>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a25      	ldr	r2, [pc, #148]	; (80028bc <TIM_Base_SetConfig+0xc0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d108      	bne.n	800283e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1c      	ldr	r2, [pc, #112]	; (80028b4 <TIM_Base_SetConfig+0xb8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00b      	beq.n	800285e <TIM_Base_SetConfig+0x62>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284c:	d007      	beq.n	800285e <TIM_Base_SetConfig+0x62>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <TIM_Base_SetConfig+0xbc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d003      	beq.n	800285e <TIM_Base_SetConfig+0x62>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a18      	ldr	r2, [pc, #96]	; (80028bc <TIM_Base_SetConfig+0xc0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d108      	bne.n	8002870 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <TIM_Base_SetConfig+0xb8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d103      	bne.n	80028a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	615a      	str	r2, [r3, #20]
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40000800 	.word	0x40000800

080028c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f023 0201 	bic.w	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0303 	bic.w	r3, r3, #3
 80028f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f023 0302 	bic.w	r3, r3, #2
 8002908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a1c      	ldr	r2, [pc, #112]	; (8002988 <TIM_OC1_SetConfig+0xc8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d10c      	bne.n	8002936 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f023 0308 	bic.w	r3, r3, #8
 8002922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a13      	ldr	r2, [pc, #76]	; (8002988 <TIM_OC1_SetConfig+0xc8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d111      	bne.n	8002962 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800294c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	621a      	str	r2, [r3, #32]
}
 800297c:	bf00      	nop
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40012c00 	.word	0x40012c00

0800298c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	f023 0210 	bic.w	r2, r3, #16
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f023 0320 	bic.w	r3, r3, #32
 80029d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <TIM_OC2_SetConfig+0xd0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d10d      	bne.n	8002a08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <TIM_OC2_SetConfig+0xd0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d113      	bne.n	8002a38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	621a      	str	r2, [r3, #32]
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	40012c00 	.word	0x40012c00

08002a60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <TIM_OC3_SetConfig+0xd0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10d      	bne.n	8002ada <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <TIM_OC3_SetConfig+0xd0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d113      	bne.n	8002b0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	621a      	str	r2, [r3, #32]
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40012c00 	.word	0x40012c00

08002b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	031b      	lsls	r3, r3, #12
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a0f      	ldr	r2, [pc, #60]	; (8002bcc <TIM_OC4_SetConfig+0x98>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d109      	bne.n	8002ba8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	019b      	lsls	r3, r3, #6
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	621a      	str	r2, [r3, #32]
}
 8002bc2:	bf00      	nop
 8002bc4:	371c      	adds	r7, #28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	40012c00 	.word	0x40012c00

08002bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f023 0201 	bic.w	r2, r3, #1
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f023 030a 	bic.w	r3, r3, #10
 8002c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	621a      	str	r2, [r3, #32]
}
 8002c22:	bf00      	nop
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f023 0210 	bic.w	r2, r3, #16
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	031b      	lsls	r3, r3, #12
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	621a      	str	r2, [r3, #32]
}
 8002c80:	bf00      	nop
 8002c82:	371c      	adds	r7, #28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b085      	sub	sp, #20
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f043 0307 	orr.w	r3, r3, #7
 8002cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	609a      	str	r2, [r3, #8]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b087      	sub	sp, #28
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	021a      	lsls	r2, r3, #8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	609a      	str	r2, [r3, #8]
}
 8002cf2:	bf00      	nop
 8002cf4:	371c      	adds	r7, #28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	2201      	movs	r2, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a1a      	ldr	r2, [r3, #32]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	401a      	ands	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a1a      	ldr	r2, [r3, #32]
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	fa01 f303 	lsl.w	r3, r1, r3
 8002d34:	431a      	orrs	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	621a      	str	r2, [r3, #32]
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2204      	movs	r2, #4
 8002d54:	6839      	ldr	r1, [r7, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f8c5 	bl	8002ee6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d007      	beq.n	8002d8e <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0201 	orr.w	r2, r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e032      	b.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002de8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e03d      	b.n	8002eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b087      	sub	sp, #28
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	2204      	movs	r2, #4
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1a      	ldr	r2, [r3, #32]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	401a      	ands	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a1a      	ldr	r2, [r3, #32]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	621a      	str	r2, [r3, #32]
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
	...

08002f30 <__libc_init_array>:
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	2500      	movs	r5, #0
 8002f34:	4e0c      	ldr	r6, [pc, #48]	; (8002f68 <__libc_init_array+0x38>)
 8002f36:	4c0d      	ldr	r4, [pc, #52]	; (8002f6c <__libc_init_array+0x3c>)
 8002f38:	1ba4      	subs	r4, r4, r6
 8002f3a:	10a4      	asrs	r4, r4, #2
 8002f3c:	42a5      	cmp	r5, r4
 8002f3e:	d109      	bne.n	8002f54 <__libc_init_array+0x24>
 8002f40:	f000 fe0e 	bl	8003b60 <_init>
 8002f44:	2500      	movs	r5, #0
 8002f46:	4e0a      	ldr	r6, [pc, #40]	; (8002f70 <__libc_init_array+0x40>)
 8002f48:	4c0a      	ldr	r4, [pc, #40]	; (8002f74 <__libc_init_array+0x44>)
 8002f4a:	1ba4      	subs	r4, r4, r6
 8002f4c:	10a4      	asrs	r4, r4, #2
 8002f4e:	42a5      	cmp	r5, r4
 8002f50:	d105      	bne.n	8002f5e <__libc_init_array+0x2e>
 8002f52:	bd70      	pop	{r4, r5, r6, pc}
 8002f54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f58:	4798      	blx	r3
 8002f5a:	3501      	adds	r5, #1
 8002f5c:	e7ee      	b.n	8002f3c <__libc_init_array+0xc>
 8002f5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f62:	4798      	blx	r3
 8002f64:	3501      	adds	r5, #1
 8002f66:	e7f2      	b.n	8002f4e <__libc_init_array+0x1e>
 8002f68:	08003f6c 	.word	0x08003f6c
 8002f6c:	08003f6c 	.word	0x08003f6c
 8002f70:	08003f6c 	.word	0x08003f6c
 8002f74:	08003f70 	.word	0x08003f70

08002f78 <memset>:
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4402      	add	r2, r0
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d100      	bne.n	8002f82 <memset+0xa>
 8002f80:	4770      	bx	lr
 8002f82:	f803 1b01 	strb.w	r1, [r3], #1
 8002f86:	e7f9      	b.n	8002f7c <memset+0x4>

08002f88 <cosf>:
 8002f88:	b507      	push	{r0, r1, r2, lr}
 8002f8a:	4a18      	ldr	r2, [pc, #96]	; (8002fec <cosf+0x64>)
 8002f8c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8002f90:	4293      	cmp	r3, r2
 8002f92:	4601      	mov	r1, r0
 8002f94:	dc03      	bgt.n	8002f9e <cosf+0x16>
 8002f96:	2100      	movs	r1, #0
 8002f98:	f000 f9f8 	bl	800338c <__kernel_cosf>
 8002f9c:	e004      	b.n	8002fa8 <cosf+0x20>
 8002f9e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002fa2:	db04      	blt.n	8002fae <cosf+0x26>
 8002fa4:	f7fd fb6c 	bl	8000680 <__aeabi_fsub>
 8002fa8:	b003      	add	sp, #12
 8002faa:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fae:	4669      	mov	r1, sp
 8002fb0:	f000 f894 	bl	80030dc <__ieee754_rem_pio2f>
 8002fb4:	f000 0203 	and.w	r2, r0, #3
 8002fb8:	2a01      	cmp	r2, #1
 8002fba:	d005      	beq.n	8002fc8 <cosf+0x40>
 8002fbc:	2a02      	cmp	r2, #2
 8002fbe:	d00a      	beq.n	8002fd6 <cosf+0x4e>
 8002fc0:	b972      	cbnz	r2, 8002fe0 <cosf+0x58>
 8002fc2:	9901      	ldr	r1, [sp, #4]
 8002fc4:	9800      	ldr	r0, [sp, #0]
 8002fc6:	e7e7      	b.n	8002f98 <cosf+0x10>
 8002fc8:	9901      	ldr	r1, [sp, #4]
 8002fca:	9800      	ldr	r0, [sp, #0]
 8002fcc:	f000 fcfc 	bl	80039c8 <__kernel_sinf>
 8002fd0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8002fd4:	e7e8      	b.n	8002fa8 <cosf+0x20>
 8002fd6:	9901      	ldr	r1, [sp, #4]
 8002fd8:	9800      	ldr	r0, [sp, #0]
 8002fda:	f000 f9d7 	bl	800338c <__kernel_cosf>
 8002fde:	e7f7      	b.n	8002fd0 <cosf+0x48>
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	9901      	ldr	r1, [sp, #4]
 8002fe4:	9800      	ldr	r0, [sp, #0]
 8002fe6:	f000 fcef 	bl	80039c8 <__kernel_sinf>
 8002fea:	e7dd      	b.n	8002fa8 <cosf+0x20>
 8002fec:	3f490fd8 	.word	0x3f490fd8

08002ff0 <floorf>:
 8002ff0:	b570      	push	{r4, r5, r6, lr}
 8002ff2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8002ff6:	0df5      	lsrs	r5, r6, #23
 8002ff8:	3d7f      	subs	r5, #127	; 0x7f
 8002ffa:	2d16      	cmp	r5, #22
 8002ffc:	4601      	mov	r1, r0
 8002ffe:	4604      	mov	r4, r0
 8003000:	dc26      	bgt.n	8003050 <floorf+0x60>
 8003002:	2d00      	cmp	r5, #0
 8003004:	da0e      	bge.n	8003024 <floorf+0x34>
 8003006:	4917      	ldr	r1, [pc, #92]	; (8003064 <floorf+0x74>)
 8003008:	f7fd fb3c 	bl	8000684 <__addsf3>
 800300c:	2100      	movs	r1, #0
 800300e:	f7fd fdfd 	bl	8000c0c <__aeabi_fcmpgt>
 8003012:	b128      	cbz	r0, 8003020 <floorf+0x30>
 8003014:	2c00      	cmp	r4, #0
 8003016:	da23      	bge.n	8003060 <floorf+0x70>
 8003018:	4b13      	ldr	r3, [pc, #76]	; (8003068 <floorf+0x78>)
 800301a:	2e00      	cmp	r6, #0
 800301c:	bf18      	it	ne
 800301e:	461c      	movne	r4, r3
 8003020:	4621      	mov	r1, r4
 8003022:	e01b      	b.n	800305c <floorf+0x6c>
 8003024:	4e11      	ldr	r6, [pc, #68]	; (800306c <floorf+0x7c>)
 8003026:	412e      	asrs	r6, r5
 8003028:	4230      	tst	r0, r6
 800302a:	d017      	beq.n	800305c <floorf+0x6c>
 800302c:	490d      	ldr	r1, [pc, #52]	; (8003064 <floorf+0x74>)
 800302e:	f7fd fb29 	bl	8000684 <__addsf3>
 8003032:	2100      	movs	r1, #0
 8003034:	f7fd fdea 	bl	8000c0c <__aeabi_fcmpgt>
 8003038:	2800      	cmp	r0, #0
 800303a:	d0f1      	beq.n	8003020 <floorf+0x30>
 800303c:	2c00      	cmp	r4, #0
 800303e:	bfbe      	ittt	lt
 8003040:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8003044:	fa43 f505 	asrlt.w	r5, r3, r5
 8003048:	1964      	addlt	r4, r4, r5
 800304a:	ea24 0406 	bic.w	r4, r4, r6
 800304e:	e7e7      	b.n	8003020 <floorf+0x30>
 8003050:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8003054:	d302      	bcc.n	800305c <floorf+0x6c>
 8003056:	f7fd fb15 	bl	8000684 <__addsf3>
 800305a:	4601      	mov	r1, r0
 800305c:	4608      	mov	r0, r1
 800305e:	bd70      	pop	{r4, r5, r6, pc}
 8003060:	2400      	movs	r4, #0
 8003062:	e7dd      	b.n	8003020 <floorf+0x30>
 8003064:	7149f2ca 	.word	0x7149f2ca
 8003068:	bf800000 	.word	0xbf800000
 800306c:	007fffff 	.word	0x007fffff

08003070 <sinf>:
 8003070:	b507      	push	{r0, r1, r2, lr}
 8003072:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <sinf+0x68>)
 8003074:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003078:	4293      	cmp	r3, r2
 800307a:	4601      	mov	r1, r0
 800307c:	dc04      	bgt.n	8003088 <sinf+0x18>
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	f000 fca1 	bl	80039c8 <__kernel_sinf>
 8003086:	e004      	b.n	8003092 <sinf+0x22>
 8003088:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800308c:	db04      	blt.n	8003098 <sinf+0x28>
 800308e:	f7fd faf7 	bl	8000680 <__aeabi_fsub>
 8003092:	b003      	add	sp, #12
 8003094:	f85d fb04 	ldr.w	pc, [sp], #4
 8003098:	4669      	mov	r1, sp
 800309a:	f000 f81f 	bl	80030dc <__ieee754_rem_pio2f>
 800309e:	f000 0003 	and.w	r0, r0, #3
 80030a2:	2801      	cmp	r0, #1
 80030a4:	d006      	beq.n	80030b4 <sinf+0x44>
 80030a6:	2802      	cmp	r0, #2
 80030a8:	d009      	beq.n	80030be <sinf+0x4e>
 80030aa:	b980      	cbnz	r0, 80030ce <sinf+0x5e>
 80030ac:	2201      	movs	r2, #1
 80030ae:	9901      	ldr	r1, [sp, #4]
 80030b0:	9800      	ldr	r0, [sp, #0]
 80030b2:	e7e6      	b.n	8003082 <sinf+0x12>
 80030b4:	9901      	ldr	r1, [sp, #4]
 80030b6:	9800      	ldr	r0, [sp, #0]
 80030b8:	f000 f968 	bl	800338c <__kernel_cosf>
 80030bc:	e7e9      	b.n	8003092 <sinf+0x22>
 80030be:	2201      	movs	r2, #1
 80030c0:	9901      	ldr	r1, [sp, #4]
 80030c2:	9800      	ldr	r0, [sp, #0]
 80030c4:	f000 fc80 	bl	80039c8 <__kernel_sinf>
 80030c8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80030cc:	e7e1      	b.n	8003092 <sinf+0x22>
 80030ce:	9901      	ldr	r1, [sp, #4]
 80030d0:	9800      	ldr	r0, [sp, #0]
 80030d2:	f000 f95b 	bl	800338c <__kernel_cosf>
 80030d6:	e7f7      	b.n	80030c8 <sinf+0x58>
 80030d8:	3f490fd8 	.word	0x3f490fd8

080030dc <__ieee754_rem_pio2f>:
 80030dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e0:	4a9d      	ldr	r2, [pc, #628]	; (8003358 <__ieee754_rem_pio2f+0x27c>)
 80030e2:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80030e6:	4295      	cmp	r5, r2
 80030e8:	b087      	sub	sp, #28
 80030ea:	460c      	mov	r4, r1
 80030ec:	4607      	mov	r7, r0
 80030ee:	dc04      	bgt.n	80030fa <__ieee754_rem_pio2f+0x1e>
 80030f0:	2300      	movs	r3, #0
 80030f2:	6020      	str	r0, [r4, #0]
 80030f4:	604b      	str	r3, [r1, #4]
 80030f6:	2600      	movs	r6, #0
 80030f8:	e01a      	b.n	8003130 <__ieee754_rem_pio2f+0x54>
 80030fa:	4a98      	ldr	r2, [pc, #608]	; (800335c <__ieee754_rem_pio2f+0x280>)
 80030fc:	4295      	cmp	r5, r2
 80030fe:	dc4b      	bgt.n	8003198 <__ieee754_rem_pio2f+0xbc>
 8003100:	2800      	cmp	r0, #0
 8003102:	f025 050f 	bic.w	r5, r5, #15
 8003106:	4996      	ldr	r1, [pc, #600]	; (8003360 <__ieee754_rem_pio2f+0x284>)
 8003108:	4e96      	ldr	r6, [pc, #600]	; (8003364 <__ieee754_rem_pio2f+0x288>)
 800310a:	dd23      	ble.n	8003154 <__ieee754_rem_pio2f+0x78>
 800310c:	f7fd fab8 	bl	8000680 <__aeabi_fsub>
 8003110:	42b5      	cmp	r5, r6
 8003112:	4607      	mov	r7, r0
 8003114:	d010      	beq.n	8003138 <__ieee754_rem_pio2f+0x5c>
 8003116:	4994      	ldr	r1, [pc, #592]	; (8003368 <__ieee754_rem_pio2f+0x28c>)
 8003118:	f7fd fab2 	bl	8000680 <__aeabi_fsub>
 800311c:	4601      	mov	r1, r0
 800311e:	6020      	str	r0, [r4, #0]
 8003120:	4638      	mov	r0, r7
 8003122:	f7fd faad 	bl	8000680 <__aeabi_fsub>
 8003126:	4990      	ldr	r1, [pc, #576]	; (8003368 <__ieee754_rem_pio2f+0x28c>)
 8003128:	f7fd faaa 	bl	8000680 <__aeabi_fsub>
 800312c:	2601      	movs	r6, #1
 800312e:	6060      	str	r0, [r4, #4]
 8003130:	4630      	mov	r0, r6
 8003132:	b007      	add	sp, #28
 8003134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003138:	498c      	ldr	r1, [pc, #560]	; (800336c <__ieee754_rem_pio2f+0x290>)
 800313a:	f7fd faa1 	bl	8000680 <__aeabi_fsub>
 800313e:	498c      	ldr	r1, [pc, #560]	; (8003370 <__ieee754_rem_pio2f+0x294>)
 8003140:	4605      	mov	r5, r0
 8003142:	f7fd fa9d 	bl	8000680 <__aeabi_fsub>
 8003146:	4601      	mov	r1, r0
 8003148:	6020      	str	r0, [r4, #0]
 800314a:	4628      	mov	r0, r5
 800314c:	f7fd fa98 	bl	8000680 <__aeabi_fsub>
 8003150:	4987      	ldr	r1, [pc, #540]	; (8003370 <__ieee754_rem_pio2f+0x294>)
 8003152:	e7e9      	b.n	8003128 <__ieee754_rem_pio2f+0x4c>
 8003154:	f7fd fa96 	bl	8000684 <__addsf3>
 8003158:	42b5      	cmp	r5, r6
 800315a:	4607      	mov	r7, r0
 800315c:	d00e      	beq.n	800317c <__ieee754_rem_pio2f+0xa0>
 800315e:	4982      	ldr	r1, [pc, #520]	; (8003368 <__ieee754_rem_pio2f+0x28c>)
 8003160:	f7fd fa90 	bl	8000684 <__addsf3>
 8003164:	4601      	mov	r1, r0
 8003166:	6020      	str	r0, [r4, #0]
 8003168:	4638      	mov	r0, r7
 800316a:	f7fd fa89 	bl	8000680 <__aeabi_fsub>
 800316e:	497e      	ldr	r1, [pc, #504]	; (8003368 <__ieee754_rem_pio2f+0x28c>)
 8003170:	f7fd fa88 	bl	8000684 <__addsf3>
 8003174:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003178:	6060      	str	r0, [r4, #4]
 800317a:	e7d9      	b.n	8003130 <__ieee754_rem_pio2f+0x54>
 800317c:	497b      	ldr	r1, [pc, #492]	; (800336c <__ieee754_rem_pio2f+0x290>)
 800317e:	f7fd fa81 	bl	8000684 <__addsf3>
 8003182:	497b      	ldr	r1, [pc, #492]	; (8003370 <__ieee754_rem_pio2f+0x294>)
 8003184:	4605      	mov	r5, r0
 8003186:	f7fd fa7d 	bl	8000684 <__addsf3>
 800318a:	4601      	mov	r1, r0
 800318c:	6020      	str	r0, [r4, #0]
 800318e:	4628      	mov	r0, r5
 8003190:	f7fd fa76 	bl	8000680 <__aeabi_fsub>
 8003194:	4976      	ldr	r1, [pc, #472]	; (8003370 <__ieee754_rem_pio2f+0x294>)
 8003196:	e7eb      	b.n	8003170 <__ieee754_rem_pio2f+0x94>
 8003198:	4a76      	ldr	r2, [pc, #472]	; (8003374 <__ieee754_rem_pio2f+0x298>)
 800319a:	4295      	cmp	r5, r2
 800319c:	f300 808c 	bgt.w	80032b8 <__ieee754_rem_pio2f+0x1dc>
 80031a0:	f000 fc88 	bl	8003ab4 <fabsf>
 80031a4:	4974      	ldr	r1, [pc, #464]	; (8003378 <__ieee754_rem_pio2f+0x29c>)
 80031a6:	4680      	mov	r8, r0
 80031a8:	f7fd fb74 	bl	8000894 <__aeabi_fmul>
 80031ac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80031b0:	f7fd fa68 	bl	8000684 <__addsf3>
 80031b4:	f7fd fd34 	bl	8000c20 <__aeabi_f2iz>
 80031b8:	4606      	mov	r6, r0
 80031ba:	f7fd fb17 	bl	80007ec <__aeabi_i2f>
 80031be:	4968      	ldr	r1, [pc, #416]	; (8003360 <__ieee754_rem_pio2f+0x284>)
 80031c0:	4682      	mov	sl, r0
 80031c2:	f7fd fb67 	bl	8000894 <__aeabi_fmul>
 80031c6:	4601      	mov	r1, r0
 80031c8:	4640      	mov	r0, r8
 80031ca:	f7fd fa59 	bl	8000680 <__aeabi_fsub>
 80031ce:	4966      	ldr	r1, [pc, #408]	; (8003368 <__ieee754_rem_pio2f+0x28c>)
 80031d0:	4680      	mov	r8, r0
 80031d2:	4650      	mov	r0, sl
 80031d4:	f7fd fb5e 	bl	8000894 <__aeabi_fmul>
 80031d8:	2e1f      	cmp	r6, #31
 80031da:	4681      	mov	r9, r0
 80031dc:	dc0c      	bgt.n	80031f8 <__ieee754_rem_pio2f+0x11c>
 80031de:	4a67      	ldr	r2, [pc, #412]	; (800337c <__ieee754_rem_pio2f+0x2a0>)
 80031e0:	1e71      	subs	r1, r6, #1
 80031e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80031e6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d004      	beq.n	80031f8 <__ieee754_rem_pio2f+0x11c>
 80031ee:	4649      	mov	r1, r9
 80031f0:	4640      	mov	r0, r8
 80031f2:	f7fd fa45 	bl	8000680 <__aeabi_fsub>
 80031f6:	e009      	b.n	800320c <__ieee754_rem_pio2f+0x130>
 80031f8:	4649      	mov	r1, r9
 80031fa:	4640      	mov	r0, r8
 80031fc:	f7fd fa40 	bl	8000680 <__aeabi_fsub>
 8003200:	15ed      	asrs	r5, r5, #23
 8003202:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003206:	1aeb      	subs	r3, r5, r3
 8003208:	2b08      	cmp	r3, #8
 800320a:	dc01      	bgt.n	8003210 <__ieee754_rem_pio2f+0x134>
 800320c:	6020      	str	r0, [r4, #0]
 800320e:	e024      	b.n	800325a <__ieee754_rem_pio2f+0x17e>
 8003210:	4956      	ldr	r1, [pc, #344]	; (800336c <__ieee754_rem_pio2f+0x290>)
 8003212:	4650      	mov	r0, sl
 8003214:	f7fd fb3e 	bl	8000894 <__aeabi_fmul>
 8003218:	4681      	mov	r9, r0
 800321a:	4601      	mov	r1, r0
 800321c:	4640      	mov	r0, r8
 800321e:	f7fd fa2f 	bl	8000680 <__aeabi_fsub>
 8003222:	4601      	mov	r1, r0
 8003224:	4683      	mov	fp, r0
 8003226:	4640      	mov	r0, r8
 8003228:	f7fd fa2a 	bl	8000680 <__aeabi_fsub>
 800322c:	4649      	mov	r1, r9
 800322e:	f7fd fa27 	bl	8000680 <__aeabi_fsub>
 8003232:	4680      	mov	r8, r0
 8003234:	494e      	ldr	r1, [pc, #312]	; (8003370 <__ieee754_rem_pio2f+0x294>)
 8003236:	4650      	mov	r0, sl
 8003238:	f7fd fb2c 	bl	8000894 <__aeabi_fmul>
 800323c:	4641      	mov	r1, r8
 800323e:	f7fd fa1f 	bl	8000680 <__aeabi_fsub>
 8003242:	4601      	mov	r1, r0
 8003244:	4681      	mov	r9, r0
 8003246:	4658      	mov	r0, fp
 8003248:	f7fd fa1a 	bl	8000680 <__aeabi_fsub>
 800324c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003250:	1aed      	subs	r5, r5, r3
 8003252:	2d19      	cmp	r5, #25
 8003254:	dc15      	bgt.n	8003282 <__ieee754_rem_pio2f+0x1a6>
 8003256:	46d8      	mov	r8, fp
 8003258:	6020      	str	r0, [r4, #0]
 800325a:	6825      	ldr	r5, [r4, #0]
 800325c:	4640      	mov	r0, r8
 800325e:	4629      	mov	r1, r5
 8003260:	f7fd fa0e 	bl	8000680 <__aeabi_fsub>
 8003264:	4649      	mov	r1, r9
 8003266:	f7fd fa0b 	bl	8000680 <__aeabi_fsub>
 800326a:	2f00      	cmp	r7, #0
 800326c:	6060      	str	r0, [r4, #4]
 800326e:	f6bf af5f 	bge.w	8003130 <__ieee754_rem_pio2f+0x54>
 8003272:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8003276:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800327a:	6025      	str	r5, [r4, #0]
 800327c:	6060      	str	r0, [r4, #4]
 800327e:	4276      	negs	r6, r6
 8003280:	e756      	b.n	8003130 <__ieee754_rem_pio2f+0x54>
 8003282:	493f      	ldr	r1, [pc, #252]	; (8003380 <__ieee754_rem_pio2f+0x2a4>)
 8003284:	4650      	mov	r0, sl
 8003286:	f7fd fb05 	bl	8000894 <__aeabi_fmul>
 800328a:	4605      	mov	r5, r0
 800328c:	4601      	mov	r1, r0
 800328e:	4658      	mov	r0, fp
 8003290:	f7fd f9f6 	bl	8000680 <__aeabi_fsub>
 8003294:	4601      	mov	r1, r0
 8003296:	4680      	mov	r8, r0
 8003298:	4658      	mov	r0, fp
 800329a:	f7fd f9f1 	bl	8000680 <__aeabi_fsub>
 800329e:	4629      	mov	r1, r5
 80032a0:	f7fd f9ee 	bl	8000680 <__aeabi_fsub>
 80032a4:	4605      	mov	r5, r0
 80032a6:	4937      	ldr	r1, [pc, #220]	; (8003384 <__ieee754_rem_pio2f+0x2a8>)
 80032a8:	4650      	mov	r0, sl
 80032aa:	f7fd faf3 	bl	8000894 <__aeabi_fmul>
 80032ae:	4629      	mov	r1, r5
 80032b0:	f7fd f9e6 	bl	8000680 <__aeabi_fsub>
 80032b4:	4681      	mov	r9, r0
 80032b6:	e79a      	b.n	80031ee <__ieee754_rem_pio2f+0x112>
 80032b8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80032bc:	db05      	blt.n	80032ca <__ieee754_rem_pio2f+0x1ee>
 80032be:	4601      	mov	r1, r0
 80032c0:	f7fd f9de 	bl	8000680 <__aeabi_fsub>
 80032c4:	6060      	str	r0, [r4, #4]
 80032c6:	6020      	str	r0, [r4, #0]
 80032c8:	e715      	b.n	80030f6 <__ieee754_rem_pio2f+0x1a>
 80032ca:	15ee      	asrs	r6, r5, #23
 80032cc:	3e86      	subs	r6, #134	; 0x86
 80032ce:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 80032d2:	4628      	mov	r0, r5
 80032d4:	f7fd fca4 	bl	8000c20 <__aeabi_f2iz>
 80032d8:	f7fd fa88 	bl	80007ec <__aeabi_i2f>
 80032dc:	4601      	mov	r1, r0
 80032de:	9003      	str	r0, [sp, #12]
 80032e0:	4628      	mov	r0, r5
 80032e2:	f7fd f9cd 	bl	8000680 <__aeabi_fsub>
 80032e6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80032ea:	f7fd fad3 	bl	8000894 <__aeabi_fmul>
 80032ee:	4680      	mov	r8, r0
 80032f0:	f7fd fc96 	bl	8000c20 <__aeabi_f2iz>
 80032f4:	f7fd fa7a 	bl	80007ec <__aeabi_i2f>
 80032f8:	4601      	mov	r1, r0
 80032fa:	9004      	str	r0, [sp, #16]
 80032fc:	4605      	mov	r5, r0
 80032fe:	4640      	mov	r0, r8
 8003300:	f7fd f9be 	bl	8000680 <__aeabi_fsub>
 8003304:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003308:	f7fd fac4 	bl	8000894 <__aeabi_fmul>
 800330c:	2100      	movs	r1, #0
 800330e:	9005      	str	r0, [sp, #20]
 8003310:	f7fd fc54 	bl	8000bbc <__aeabi_fcmpeq>
 8003314:	b1e8      	cbz	r0, 8003352 <__ieee754_rem_pio2f+0x276>
 8003316:	2100      	movs	r1, #0
 8003318:	4628      	mov	r0, r5
 800331a:	f7fd fc4f 	bl	8000bbc <__aeabi_fcmpeq>
 800331e:	2800      	cmp	r0, #0
 8003320:	bf14      	ite	ne
 8003322:	2301      	movne	r3, #1
 8003324:	2302      	moveq	r3, #2
 8003326:	4a18      	ldr	r2, [pc, #96]	; (8003388 <__ieee754_rem_pio2f+0x2ac>)
 8003328:	4621      	mov	r1, r4
 800332a:	9201      	str	r2, [sp, #4]
 800332c:	2202      	movs	r2, #2
 800332e:	a803      	add	r0, sp, #12
 8003330:	9200      	str	r2, [sp, #0]
 8003332:	4632      	mov	r2, r6
 8003334:	f000 f8aa 	bl	800348c <__kernel_rem_pio2f>
 8003338:	2f00      	cmp	r7, #0
 800333a:	4606      	mov	r6, r0
 800333c:	f6bf aef8 	bge.w	8003130 <__ieee754_rem_pio2f+0x54>
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003346:	6023      	str	r3, [r4, #0]
 8003348:	6863      	ldr	r3, [r4, #4]
 800334a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800334e:	6063      	str	r3, [r4, #4]
 8003350:	e795      	b.n	800327e <__ieee754_rem_pio2f+0x1a2>
 8003352:	2303      	movs	r3, #3
 8003354:	e7e7      	b.n	8003326 <__ieee754_rem_pio2f+0x24a>
 8003356:	bf00      	nop
 8003358:	3f490fd8 	.word	0x3f490fd8
 800335c:	4016cbe3 	.word	0x4016cbe3
 8003360:	3fc90f80 	.word	0x3fc90f80
 8003364:	3fc90fd0 	.word	0x3fc90fd0
 8003368:	37354443 	.word	0x37354443
 800336c:	37354400 	.word	0x37354400
 8003370:	2e85a308 	.word	0x2e85a308
 8003374:	43490f80 	.word	0x43490f80
 8003378:	3f22f984 	.word	0x3f22f984
 800337c:	08003b9c 	.word	0x08003b9c
 8003380:	2e85a300 	.word	0x2e85a300
 8003384:	248d3132 	.word	0x248d3132
 8003388:	08003c1c 	.word	0x08003c1c

0800338c <__kernel_cosf>:
 800338c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003390:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003394:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8003398:	4606      	mov	r6, r0
 800339a:	4688      	mov	r8, r1
 800339c:	da03      	bge.n	80033a6 <__kernel_cosf+0x1a>
 800339e:	f7fd fc3f 	bl	8000c20 <__aeabi_f2iz>
 80033a2:	2800      	cmp	r0, #0
 80033a4:	d05c      	beq.n	8003460 <__kernel_cosf+0xd4>
 80033a6:	4631      	mov	r1, r6
 80033a8:	4630      	mov	r0, r6
 80033aa:	f7fd fa73 	bl	8000894 <__aeabi_fmul>
 80033ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80033b2:	4605      	mov	r5, r0
 80033b4:	f7fd fa6e 	bl	8000894 <__aeabi_fmul>
 80033b8:	492b      	ldr	r1, [pc, #172]	; (8003468 <__kernel_cosf+0xdc>)
 80033ba:	4607      	mov	r7, r0
 80033bc:	4628      	mov	r0, r5
 80033be:	f7fd fa69 	bl	8000894 <__aeabi_fmul>
 80033c2:	492a      	ldr	r1, [pc, #168]	; (800346c <__kernel_cosf+0xe0>)
 80033c4:	f7fd f95e 	bl	8000684 <__addsf3>
 80033c8:	4629      	mov	r1, r5
 80033ca:	f7fd fa63 	bl	8000894 <__aeabi_fmul>
 80033ce:	4928      	ldr	r1, [pc, #160]	; (8003470 <__kernel_cosf+0xe4>)
 80033d0:	f7fd f956 	bl	8000680 <__aeabi_fsub>
 80033d4:	4629      	mov	r1, r5
 80033d6:	f7fd fa5d 	bl	8000894 <__aeabi_fmul>
 80033da:	4926      	ldr	r1, [pc, #152]	; (8003474 <__kernel_cosf+0xe8>)
 80033dc:	f7fd f952 	bl	8000684 <__addsf3>
 80033e0:	4629      	mov	r1, r5
 80033e2:	f7fd fa57 	bl	8000894 <__aeabi_fmul>
 80033e6:	4924      	ldr	r1, [pc, #144]	; (8003478 <__kernel_cosf+0xec>)
 80033e8:	f7fd f94a 	bl	8000680 <__aeabi_fsub>
 80033ec:	4629      	mov	r1, r5
 80033ee:	f7fd fa51 	bl	8000894 <__aeabi_fmul>
 80033f2:	4922      	ldr	r1, [pc, #136]	; (800347c <__kernel_cosf+0xf0>)
 80033f4:	f7fd f946 	bl	8000684 <__addsf3>
 80033f8:	4629      	mov	r1, r5
 80033fa:	f7fd fa4b 	bl	8000894 <__aeabi_fmul>
 80033fe:	4629      	mov	r1, r5
 8003400:	f7fd fa48 	bl	8000894 <__aeabi_fmul>
 8003404:	4641      	mov	r1, r8
 8003406:	4605      	mov	r5, r0
 8003408:	4630      	mov	r0, r6
 800340a:	f7fd fa43 	bl	8000894 <__aeabi_fmul>
 800340e:	4601      	mov	r1, r0
 8003410:	4628      	mov	r0, r5
 8003412:	f7fd f935 	bl	8000680 <__aeabi_fsub>
 8003416:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <__kernel_cosf+0xf4>)
 8003418:	4605      	mov	r5, r0
 800341a:	429c      	cmp	r4, r3
 800341c:	dc0a      	bgt.n	8003434 <__kernel_cosf+0xa8>
 800341e:	4601      	mov	r1, r0
 8003420:	4638      	mov	r0, r7
 8003422:	f7fd f92d 	bl	8000680 <__aeabi_fsub>
 8003426:	4601      	mov	r1, r0
 8003428:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800342c:	f7fd f928 	bl	8000680 <__aeabi_fsub>
 8003430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003434:	4b13      	ldr	r3, [pc, #76]	; (8003484 <__kernel_cosf+0xf8>)
 8003436:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800343a:	429c      	cmp	r4, r3
 800343c:	bfcc      	ite	gt
 800343e:	4c12      	ldrgt	r4, [pc, #72]	; (8003488 <__kernel_cosf+0xfc>)
 8003440:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8003444:	4621      	mov	r1, r4
 8003446:	f7fd f91b 	bl	8000680 <__aeabi_fsub>
 800344a:	4621      	mov	r1, r4
 800344c:	4606      	mov	r6, r0
 800344e:	4638      	mov	r0, r7
 8003450:	f7fd f916 	bl	8000680 <__aeabi_fsub>
 8003454:	4629      	mov	r1, r5
 8003456:	f7fd f913 	bl	8000680 <__aeabi_fsub>
 800345a:	4601      	mov	r1, r0
 800345c:	4630      	mov	r0, r6
 800345e:	e7e5      	b.n	800342c <__kernel_cosf+0xa0>
 8003460:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003464:	e7e4      	b.n	8003430 <__kernel_cosf+0xa4>
 8003466:	bf00      	nop
 8003468:	ad47d74e 	.word	0xad47d74e
 800346c:	310f74f6 	.word	0x310f74f6
 8003470:	3493f27c 	.word	0x3493f27c
 8003474:	37d00d01 	.word	0x37d00d01
 8003478:	3ab60b61 	.word	0x3ab60b61
 800347c:	3d2aaaab 	.word	0x3d2aaaab
 8003480:	3e999999 	.word	0x3e999999
 8003484:	3f480000 	.word	0x3f480000
 8003488:	3e900000 	.word	0x3e900000

0800348c <__kernel_rem_pio2f>:
 800348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003490:	b0d9      	sub	sp, #356	; 0x164
 8003492:	9304      	str	r3, [sp, #16]
 8003494:	9101      	str	r1, [sp, #4]
 8003496:	4bc3      	ldr	r3, [pc, #780]	; (80037a4 <__kernel_rem_pio2f+0x318>)
 8003498:	9962      	ldr	r1, [sp, #392]	; 0x188
 800349a:	1ed4      	subs	r4, r2, #3
 800349c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034a0:	2500      	movs	r5, #0
 80034a2:	9302      	str	r3, [sp, #8]
 80034a4:	9b04      	ldr	r3, [sp, #16]
 80034a6:	f04f 0a00 	mov.w	sl, #0
 80034aa:	3b01      	subs	r3, #1
 80034ac:	9303      	str	r3, [sp, #12]
 80034ae:	2308      	movs	r3, #8
 80034b0:	fb94 f4f3 	sdiv	r4, r4, r3
 80034b4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80034b8:	1c66      	adds	r6, r4, #1
 80034ba:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 80034be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80034c2:	eb03 0802 	add.w	r8, r3, r2
 80034c6:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80034c8:	1aa7      	subs	r7, r4, r2
 80034ca:	9005      	str	r0, [sp, #20]
 80034cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80034d0:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 80034d4:	4545      	cmp	r5, r8
 80034d6:	dd7f      	ble.n	80035d8 <__kernel_rem_pio2f+0x14c>
 80034d8:	f04f 0800 	mov.w	r8, #0
 80034dc:	f04f 0a00 	mov.w	sl, #0
 80034e0:	f06f 0b03 	mvn.w	fp, #3
 80034e4:	9b04      	ldr	r3, [sp, #16]
 80034e6:	aa1c      	add	r2, sp, #112	; 0x70
 80034e8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80034ec:	ab44      	add	r3, sp, #272	; 0x110
 80034ee:	9a02      	ldr	r2, [sp, #8]
 80034f0:	4590      	cmp	r8, r2
 80034f2:	f340 8097 	ble.w	8003624 <__kernel_rem_pio2f+0x198>
 80034f6:	4613      	mov	r3, r2
 80034f8:	aa08      	add	r2, sp, #32
 80034fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80034fe:	9307      	str	r3, [sp, #28]
 8003500:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8003502:	9f02      	ldr	r7, [sp, #8]
 8003504:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003508:	9306      	str	r3, [sp, #24]
 800350a:	46ba      	mov	sl, r7
 800350c:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8003510:	ab58      	add	r3, sp, #352	; 0x160
 8003512:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8003516:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800351a:	ad07      	add	r5, sp, #28
 800351c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8003520:	f1ba 0f00 	cmp.w	sl, #0
 8003524:	f300 8081 	bgt.w	800362a <__kernel_rem_pio2f+0x19e>
 8003528:	4631      	mov	r1, r6
 800352a:	4620      	mov	r0, r4
 800352c:	f000 fac6 	bl	8003abc <scalbnf>
 8003530:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8003534:	4604      	mov	r4, r0
 8003536:	f7fd f9ad 	bl	8000894 <__aeabi_fmul>
 800353a:	f7ff fd59 	bl	8002ff0 <floorf>
 800353e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8003542:	f7fd f9a7 	bl	8000894 <__aeabi_fmul>
 8003546:	4601      	mov	r1, r0
 8003548:	4620      	mov	r0, r4
 800354a:	f7fd f899 	bl	8000680 <__aeabi_fsub>
 800354e:	4604      	mov	r4, r0
 8003550:	f7fd fb66 	bl	8000c20 <__aeabi_f2iz>
 8003554:	4681      	mov	r9, r0
 8003556:	f7fd f949 	bl	80007ec <__aeabi_i2f>
 800355a:	4601      	mov	r1, r0
 800355c:	4620      	mov	r0, r4
 800355e:	f7fd f88f 	bl	8000680 <__aeabi_fsub>
 8003562:	2e00      	cmp	r6, #0
 8003564:	4604      	mov	r4, r0
 8003566:	dd7e      	ble.n	8003666 <__kernel_rem_pio2f+0x1da>
 8003568:	1e7b      	subs	r3, r7, #1
 800356a:	aa08      	add	r2, sp, #32
 800356c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8003570:	f1c6 0208 	rsb	r2, r6, #8
 8003574:	fa45 f002 	asr.w	r0, r5, r2
 8003578:	4481      	add	r9, r0
 800357a:	4090      	lsls	r0, r2
 800357c:	1a2d      	subs	r5, r5, r0
 800357e:	aa08      	add	r2, sp, #32
 8003580:	f1c6 0007 	rsb	r0, r6, #7
 8003584:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8003588:	4105      	asrs	r5, r0
 800358a:	2d00      	cmp	r5, #0
 800358c:	dd79      	ble.n	8003682 <__kernel_rem_pio2f+0x1f6>
 800358e:	2200      	movs	r2, #0
 8003590:	4690      	mov	r8, r2
 8003592:	f109 0901 	add.w	r9, r9, #1
 8003596:	4297      	cmp	r7, r2
 8003598:	f300 80ae 	bgt.w	80036f8 <__kernel_rem_pio2f+0x26c>
 800359c:	2e00      	cmp	r6, #0
 800359e:	dd05      	ble.n	80035ac <__kernel_rem_pio2f+0x120>
 80035a0:	2e01      	cmp	r6, #1
 80035a2:	f000 80c0 	beq.w	8003726 <__kernel_rem_pio2f+0x29a>
 80035a6:	2e02      	cmp	r6, #2
 80035a8:	f000 80c7 	beq.w	800373a <__kernel_rem_pio2f+0x2ae>
 80035ac:	2d02      	cmp	r5, #2
 80035ae:	d168      	bne.n	8003682 <__kernel_rem_pio2f+0x1f6>
 80035b0:	4621      	mov	r1, r4
 80035b2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80035b6:	f7fd f863 	bl	8000680 <__aeabi_fsub>
 80035ba:	4604      	mov	r4, r0
 80035bc:	f1b8 0f00 	cmp.w	r8, #0
 80035c0:	d05f      	beq.n	8003682 <__kernel_rem_pio2f+0x1f6>
 80035c2:	4631      	mov	r1, r6
 80035c4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80035c8:	f000 fa78 	bl	8003abc <scalbnf>
 80035cc:	4601      	mov	r1, r0
 80035ce:	4620      	mov	r0, r4
 80035d0:	f7fd f856 	bl	8000680 <__aeabi_fsub>
 80035d4:	4604      	mov	r4, r0
 80035d6:	e054      	b.n	8003682 <__kernel_rem_pio2f+0x1f6>
 80035d8:	42ef      	cmn	r7, r5
 80035da:	d407      	bmi.n	80035ec <__kernel_rem_pio2f+0x160>
 80035dc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80035e0:	f7fd f904 	bl	80007ec <__aeabi_i2f>
 80035e4:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 80035e8:	3501      	adds	r5, #1
 80035ea:	e773      	b.n	80034d4 <__kernel_rem_pio2f+0x48>
 80035ec:	4650      	mov	r0, sl
 80035ee:	e7f9      	b.n	80035e4 <__kernel_rem_pio2f+0x158>
 80035f0:	fb0b 5207 	mla	r2, fp, r7, r5
 80035f4:	9306      	str	r3, [sp, #24]
 80035f6:	9b05      	ldr	r3, [sp, #20]
 80035f8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80035fc:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8003600:	f7fd f948 	bl	8000894 <__aeabi_fmul>
 8003604:	4601      	mov	r1, r0
 8003606:	4648      	mov	r0, r9
 8003608:	f7fd f83c 	bl	8000684 <__addsf3>
 800360c:	4681      	mov	r9, r0
 800360e:	9b06      	ldr	r3, [sp, #24]
 8003610:	3701      	adds	r7, #1
 8003612:	9a03      	ldr	r2, [sp, #12]
 8003614:	4297      	cmp	r7, r2
 8003616:	ddeb      	ble.n	80035f0 <__kernel_rem_pio2f+0x164>
 8003618:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 800361c:	3504      	adds	r5, #4
 800361e:	f108 0801 	add.w	r8, r8, #1
 8003622:	e764      	b.n	80034ee <__kernel_rem_pio2f+0x62>
 8003624:	46d1      	mov	r9, sl
 8003626:	2700      	movs	r7, #0
 8003628:	e7f3      	b.n	8003612 <__kernel_rem_pio2f+0x186>
 800362a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800362e:	4620      	mov	r0, r4
 8003630:	f7fd f930 	bl	8000894 <__aeabi_fmul>
 8003634:	f7fd faf4 	bl	8000c20 <__aeabi_f2iz>
 8003638:	f7fd f8d8 	bl	80007ec <__aeabi_i2f>
 800363c:	4641      	mov	r1, r8
 800363e:	4683      	mov	fp, r0
 8003640:	f7fd f928 	bl	8000894 <__aeabi_fmul>
 8003644:	4601      	mov	r1, r0
 8003646:	4620      	mov	r0, r4
 8003648:	f7fd f81a 	bl	8000680 <__aeabi_fsub>
 800364c:	f7fd fae8 	bl	8000c20 <__aeabi_f2iz>
 8003650:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003654:	f845 0f04 	str.w	r0, [r5, #4]!
 8003658:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800365c:	4658      	mov	r0, fp
 800365e:	f7fd f811 	bl	8000684 <__addsf3>
 8003662:	4604      	mov	r4, r0
 8003664:	e75c      	b.n	8003520 <__kernel_rem_pio2f+0x94>
 8003666:	d105      	bne.n	8003674 <__kernel_rem_pio2f+0x1e8>
 8003668:	1e7b      	subs	r3, r7, #1
 800366a:	aa08      	add	r2, sp, #32
 800366c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8003670:	122d      	asrs	r5, r5, #8
 8003672:	e78a      	b.n	800358a <__kernel_rem_pio2f+0xfe>
 8003674:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003678:	f7fd fabe 	bl	8000bf8 <__aeabi_fcmpge>
 800367c:	2800      	cmp	r0, #0
 800367e:	d139      	bne.n	80036f4 <__kernel_rem_pio2f+0x268>
 8003680:	4605      	mov	r5, r0
 8003682:	2100      	movs	r1, #0
 8003684:	4620      	mov	r0, r4
 8003686:	f7fd fa99 	bl	8000bbc <__aeabi_fcmpeq>
 800368a:	2800      	cmp	r0, #0
 800368c:	f000 80a0 	beq.w	80037d0 <__kernel_rem_pio2f+0x344>
 8003690:	1e7c      	subs	r4, r7, #1
 8003692:	4623      	mov	r3, r4
 8003694:	2200      	movs	r2, #0
 8003696:	9902      	ldr	r1, [sp, #8]
 8003698:	428b      	cmp	r3, r1
 800369a:	da55      	bge.n	8003748 <__kernel_rem_pio2f+0x2bc>
 800369c:	2a00      	cmp	r2, #0
 800369e:	d07e      	beq.n	800379e <__kernel_rem_pio2f+0x312>
 80036a0:	ab08      	add	r3, sp, #32
 80036a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80036a6:	3e08      	subs	r6, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 808f 	beq.w	80037cc <__kernel_rem_pio2f+0x340>
 80036ae:	4631      	mov	r1, r6
 80036b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80036b4:	f000 fa02 	bl	8003abc <scalbnf>
 80036b8:	46a0      	mov	r8, r4
 80036ba:	4682      	mov	sl, r0
 80036bc:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 80036c0:	af44      	add	r7, sp, #272	; 0x110
 80036c2:	f1b8 0f00 	cmp.w	r8, #0
 80036c6:	f280 80b5 	bge.w	8003834 <__kernel_rem_pio2f+0x3a8>
 80036ca:	f04f 0a00 	mov.w	sl, #0
 80036ce:	2300      	movs	r3, #0
 80036d0:	00a6      	lsls	r6, r4, #2
 80036d2:	4a35      	ldr	r2, [pc, #212]	; (80037a8 <__kernel_rem_pio2f+0x31c>)
 80036d4:	4437      	add	r7, r6
 80036d6:	eba4 010a 	sub.w	r1, r4, sl
 80036da:	2900      	cmp	r1, #0
 80036dc:	f280 80db 	bge.w	8003896 <__kernel_rem_pio2f+0x40a>
 80036e0:	9b62      	ldr	r3, [sp, #392]	; 0x188
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	f200 80ff 	bhi.w	80038e6 <__kernel_rem_pio2f+0x45a>
 80036e8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80036ec:	01200102 	.word	0x01200102
 80036f0:	00d90120 	.word	0x00d90120
 80036f4:	2502      	movs	r5, #2
 80036f6:	e74a      	b.n	800358e <__kernel_rem_pio2f+0x102>
 80036f8:	ab08      	add	r3, sp, #32
 80036fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fe:	f1b8 0f00 	cmp.w	r8, #0
 8003702:	d109      	bne.n	8003718 <__kernel_rem_pio2f+0x28c>
 8003704:	b12b      	cbz	r3, 8003712 <__kernel_rem_pio2f+0x286>
 8003706:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800370a:	a908      	add	r1, sp, #32
 800370c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003710:	2301      	movs	r3, #1
 8003712:	3201      	adds	r2, #1
 8003714:	4698      	mov	r8, r3
 8003716:	e73e      	b.n	8003596 <__kernel_rem_pio2f+0x10a>
 8003718:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800371c:	a908      	add	r1, sp, #32
 800371e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003722:	4643      	mov	r3, r8
 8003724:	e7f5      	b.n	8003712 <__kernel_rem_pio2f+0x286>
 8003726:	1e7a      	subs	r2, r7, #1
 8003728:	ab08      	add	r3, sp, #32
 800372a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003732:	a908      	add	r1, sp, #32
 8003734:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003738:	e738      	b.n	80035ac <__kernel_rem_pio2f+0x120>
 800373a:	1e7a      	subs	r2, r7, #1
 800373c:	ab08      	add	r3, sp, #32
 800373e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003746:	e7f4      	b.n	8003732 <__kernel_rem_pio2f+0x2a6>
 8003748:	a908      	add	r1, sp, #32
 800374a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800374e:	3b01      	subs	r3, #1
 8003750:	430a      	orrs	r2, r1
 8003752:	e7a0      	b.n	8003696 <__kernel_rem_pio2f+0x20a>
 8003754:	3301      	adds	r3, #1
 8003756:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800375a:	2900      	cmp	r1, #0
 800375c:	d0fa      	beq.n	8003754 <__kernel_rem_pio2f+0x2c8>
 800375e:	f06f 0803 	mvn.w	r8, #3
 8003762:	9a04      	ldr	r2, [sp, #16]
 8003764:	1c7d      	adds	r5, r7, #1
 8003766:	18bc      	adds	r4, r7, r2
 8003768:	aa1c      	add	r2, sp, #112	; 0x70
 800376a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800376e:	441f      	add	r7, r3
 8003770:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8003774:	42af      	cmp	r7, r5
 8003776:	f6ff aec8 	blt.w	800350a <__kernel_rem_pio2f+0x7e>
 800377a:	9b06      	ldr	r3, [sp, #24]
 800377c:	f04f 0a00 	mov.w	sl, #0
 8003780:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003784:	f7fd f832 	bl	80007ec <__aeabi_i2f>
 8003788:	f04f 0b00 	mov.w	fp, #0
 800378c:	6020      	str	r0, [r4, #0]
 800378e:	9b03      	ldr	r3, [sp, #12]
 8003790:	459a      	cmp	sl, r3
 8003792:	dd0b      	ble.n	80037ac <__kernel_rem_pio2f+0x320>
 8003794:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8003798:	3404      	adds	r4, #4
 800379a:	3501      	adds	r5, #1
 800379c:	e7ea      	b.n	8003774 <__kernel_rem_pio2f+0x2e8>
 800379e:	9a07      	ldr	r2, [sp, #28]
 80037a0:	2301      	movs	r3, #1
 80037a2:	e7d8      	b.n	8003756 <__kernel_rem_pio2f+0x2ca>
 80037a4:	08003f60 	.word	0x08003f60
 80037a8:	08003f34 	.word	0x08003f34
 80037ac:	fb08 f30a 	mul.w	r3, r8, sl
 80037b0:	9a05      	ldr	r2, [sp, #20]
 80037b2:	58e0      	ldr	r0, [r4, r3]
 80037b4:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 80037b8:	f7fd f86c 	bl	8000894 <__aeabi_fmul>
 80037bc:	4601      	mov	r1, r0
 80037be:	4658      	mov	r0, fp
 80037c0:	f7fc ff60 	bl	8000684 <__addsf3>
 80037c4:	f10a 0a01 	add.w	sl, sl, #1
 80037c8:	4683      	mov	fp, r0
 80037ca:	e7e0      	b.n	800378e <__kernel_rem_pio2f+0x302>
 80037cc:	3c01      	subs	r4, #1
 80037ce:	e767      	b.n	80036a0 <__kernel_rem_pio2f+0x214>
 80037d0:	4271      	negs	r1, r6
 80037d2:	4620      	mov	r0, r4
 80037d4:	f000 f972 	bl	8003abc <scalbnf>
 80037d8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80037dc:	4604      	mov	r4, r0
 80037de:	f7fd fa0b 	bl	8000bf8 <__aeabi_fcmpge>
 80037e2:	b1f8      	cbz	r0, 8003824 <__kernel_rem_pio2f+0x398>
 80037e4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80037e8:	4620      	mov	r0, r4
 80037ea:	f7fd f853 	bl	8000894 <__aeabi_fmul>
 80037ee:	f7fd fa17 	bl	8000c20 <__aeabi_f2iz>
 80037f2:	f7fc fffb 	bl	80007ec <__aeabi_i2f>
 80037f6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80037fa:	4680      	mov	r8, r0
 80037fc:	f7fd f84a 	bl	8000894 <__aeabi_fmul>
 8003800:	4601      	mov	r1, r0
 8003802:	4620      	mov	r0, r4
 8003804:	f7fc ff3c 	bl	8000680 <__aeabi_fsub>
 8003808:	f7fd fa0a 	bl	8000c20 <__aeabi_f2iz>
 800380c:	ab08      	add	r3, sp, #32
 800380e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003812:	4640      	mov	r0, r8
 8003814:	f7fd fa04 	bl	8000c20 <__aeabi_f2iz>
 8003818:	1c7c      	adds	r4, r7, #1
 800381a:	ab08      	add	r3, sp, #32
 800381c:	3608      	adds	r6, #8
 800381e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003822:	e744      	b.n	80036ae <__kernel_rem_pio2f+0x222>
 8003824:	4620      	mov	r0, r4
 8003826:	f7fd f9fb 	bl	8000c20 <__aeabi_f2iz>
 800382a:	ab08      	add	r3, sp, #32
 800382c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003830:	463c      	mov	r4, r7
 8003832:	e73c      	b.n	80036ae <__kernel_rem_pio2f+0x222>
 8003834:	ab08      	add	r3, sp, #32
 8003836:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800383a:	f7fc ffd7 	bl	80007ec <__aeabi_i2f>
 800383e:	4651      	mov	r1, sl
 8003840:	f7fd f828 	bl	8000894 <__aeabi_fmul>
 8003844:	4631      	mov	r1, r6
 8003846:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 800384a:	4650      	mov	r0, sl
 800384c:	f7fd f822 	bl	8000894 <__aeabi_fmul>
 8003850:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003854:	4682      	mov	sl, r0
 8003856:	e734      	b.n	80036c2 <__kernel_rem_pio2f+0x236>
 8003858:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 800385c:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8003860:	9304      	str	r3, [sp, #16]
 8003862:	9203      	str	r2, [sp, #12]
 8003864:	f7fd f816 	bl	8000894 <__aeabi_fmul>
 8003868:	4601      	mov	r1, r0
 800386a:	4658      	mov	r0, fp
 800386c:	f7fc ff0a 	bl	8000684 <__addsf3>
 8003870:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8003874:	4683      	mov	fp, r0
 8003876:	f108 0801 	add.w	r8, r8, #1
 800387a:	9902      	ldr	r1, [sp, #8]
 800387c:	4588      	cmp	r8, r1
 800387e:	dc01      	bgt.n	8003884 <__kernel_rem_pio2f+0x3f8>
 8003880:	45c2      	cmp	sl, r8
 8003882:	dae9      	bge.n	8003858 <__kernel_rem_pio2f+0x3cc>
 8003884:	a958      	add	r1, sp, #352	; 0x160
 8003886:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800388a:	f841 bca0 	str.w	fp, [r1, #-160]
 800388e:	f10a 0a01 	add.w	sl, sl, #1
 8003892:	3f04      	subs	r7, #4
 8003894:	e71f      	b.n	80036d6 <__kernel_rem_pio2f+0x24a>
 8003896:	469b      	mov	fp, r3
 8003898:	f04f 0800 	mov.w	r8, #0
 800389c:	e7ed      	b.n	800387a <__kernel_rem_pio2f+0x3ee>
 800389e:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 80038a2:	4456      	add	r6, sl
 80038a4:	4637      	mov	r7, r6
 80038a6:	46a0      	mov	r8, r4
 80038a8:	f1b8 0f00 	cmp.w	r8, #0
 80038ac:	dc4a      	bgt.n	8003944 <__kernel_rem_pio2f+0x4b8>
 80038ae:	4627      	mov	r7, r4
 80038b0:	2f01      	cmp	r7, #1
 80038b2:	dc60      	bgt.n	8003976 <__kernel_rem_pio2f+0x4ea>
 80038b4:	2000      	movs	r0, #0
 80038b6:	2c01      	cmp	r4, #1
 80038b8:	dc74      	bgt.n	80039a4 <__kernel_rem_pio2f+0x518>
 80038ba:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80038bc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80038be:	2d00      	cmp	r5, #0
 80038c0:	d176      	bne.n	80039b0 <__kernel_rem_pio2f+0x524>
 80038c2:	9901      	ldr	r1, [sp, #4]
 80038c4:	600a      	str	r2, [r1, #0]
 80038c6:	460a      	mov	r2, r1
 80038c8:	604b      	str	r3, [r1, #4]
 80038ca:	6090      	str	r0, [r2, #8]
 80038cc:	e00b      	b.n	80038e6 <__kernel_rem_pio2f+0x45a>
 80038ce:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80038d2:	f7fc fed7 	bl	8000684 <__addsf3>
 80038d6:	3c01      	subs	r4, #1
 80038d8:	2c00      	cmp	r4, #0
 80038da:	daf8      	bge.n	80038ce <__kernel_rem_pio2f+0x442>
 80038dc:	b10d      	cbz	r5, 80038e2 <__kernel_rem_pio2f+0x456>
 80038de:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80038e2:	9b01      	ldr	r3, [sp, #4]
 80038e4:	6018      	str	r0, [r3, #0]
 80038e6:	f009 0007 	and.w	r0, r9, #7
 80038ea:	b059      	add	sp, #356	; 0x164
 80038ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038f0:	2000      	movs	r0, #0
 80038f2:	ae30      	add	r6, sp, #192	; 0xc0
 80038f4:	e7f0      	b.n	80038d8 <__kernel_rem_pio2f+0x44c>
 80038f6:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 80038fa:	f7fc fec3 	bl	8000684 <__addsf3>
 80038fe:	3e01      	subs	r6, #1
 8003900:	2e00      	cmp	r6, #0
 8003902:	daf8      	bge.n	80038f6 <__kernel_rem_pio2f+0x46a>
 8003904:	b1b5      	cbz	r5, 8003934 <__kernel_rem_pio2f+0x4a8>
 8003906:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800390a:	9a01      	ldr	r2, [sp, #4]
 800390c:	af58      	add	r7, sp, #352	; 0x160
 800390e:	4601      	mov	r1, r0
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8003916:	f7fc feb3 	bl	8000680 <__aeabi_fsub>
 800391a:	2601      	movs	r6, #1
 800391c:	42b4      	cmp	r4, r6
 800391e:	da0b      	bge.n	8003938 <__kernel_rem_pio2f+0x4ac>
 8003920:	b10d      	cbz	r5, 8003926 <__kernel_rem_pio2f+0x49a>
 8003922:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003926:	9b01      	ldr	r3, [sp, #4]
 8003928:	6058      	str	r0, [r3, #4]
 800392a:	e7dc      	b.n	80038e6 <__kernel_rem_pio2f+0x45a>
 800392c:	4626      	mov	r6, r4
 800392e:	2000      	movs	r0, #0
 8003930:	af30      	add	r7, sp, #192	; 0xc0
 8003932:	e7e5      	b.n	8003900 <__kernel_rem_pio2f+0x474>
 8003934:	4603      	mov	r3, r0
 8003936:	e7e8      	b.n	800390a <__kernel_rem_pio2f+0x47e>
 8003938:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800393c:	f7fc fea2 	bl	8000684 <__addsf3>
 8003940:	3601      	adds	r6, #1
 8003942:	e7eb      	b.n	800391c <__kernel_rem_pio2f+0x490>
 8003944:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8003948:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	9303      	str	r3, [sp, #12]
 8003954:	9202      	str	r2, [sp, #8]
 8003956:	f7fc fe95 	bl	8000684 <__addsf3>
 800395a:	9a02      	ldr	r2, [sp, #8]
 800395c:	4601      	mov	r1, r0
 800395e:	4683      	mov	fp, r0
 8003960:	4610      	mov	r0, r2
 8003962:	f7fc fe8d 	bl	8000680 <__aeabi_fsub>
 8003966:	9b03      	ldr	r3, [sp, #12]
 8003968:	4619      	mov	r1, r3
 800396a:	f7fc fe8b 	bl	8000684 <__addsf3>
 800396e:	f8c7 b000 	str.w	fp, [r7]
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	e798      	b.n	80038a8 <__kernel_rem_pio2f+0x41c>
 8003976:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 800397a:	3f01      	subs	r7, #1
 800397c:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8003980:	4618      	mov	r0, r3
 8003982:	4659      	mov	r1, fp
 8003984:	9302      	str	r3, [sp, #8]
 8003986:	f7fc fe7d 	bl	8000684 <__addsf3>
 800398a:	9b02      	ldr	r3, [sp, #8]
 800398c:	4601      	mov	r1, r0
 800398e:	4680      	mov	r8, r0
 8003990:	4618      	mov	r0, r3
 8003992:	f7fc fe75 	bl	8000680 <__aeabi_fsub>
 8003996:	4659      	mov	r1, fp
 8003998:	f7fc fe74 	bl	8000684 <__addsf3>
 800399c:	f8c6 8000 	str.w	r8, [r6]
 80039a0:	6070      	str	r0, [r6, #4]
 80039a2:	e785      	b.n	80038b0 <__kernel_rem_pio2f+0x424>
 80039a4:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 80039a8:	f7fc fe6c 	bl	8000684 <__addsf3>
 80039ac:	3c01      	subs	r4, #1
 80039ae:	e782      	b.n	80038b6 <__kernel_rem_pio2f+0x42a>
 80039b0:	9901      	ldr	r1, [sp, #4]
 80039b2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80039b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80039ba:	600a      	str	r2, [r1, #0]
 80039bc:	604b      	str	r3, [r1, #4]
 80039be:	460a      	mov	r2, r1
 80039c0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80039c4:	e781      	b.n	80038ca <__kernel_rem_pio2f+0x43e>
 80039c6:	bf00      	nop

080039c8 <__kernel_sinf>:
 80039c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039cc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80039d0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80039d4:	4604      	mov	r4, r0
 80039d6:	460f      	mov	r7, r1
 80039d8:	4691      	mov	r9, r2
 80039da:	da03      	bge.n	80039e4 <__kernel_sinf+0x1c>
 80039dc:	f7fd f920 	bl	8000c20 <__aeabi_f2iz>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d035      	beq.n	8003a50 <__kernel_sinf+0x88>
 80039e4:	4621      	mov	r1, r4
 80039e6:	4620      	mov	r0, r4
 80039e8:	f7fc ff54 	bl	8000894 <__aeabi_fmul>
 80039ec:	4605      	mov	r5, r0
 80039ee:	4601      	mov	r1, r0
 80039f0:	4620      	mov	r0, r4
 80039f2:	f7fc ff4f 	bl	8000894 <__aeabi_fmul>
 80039f6:	4929      	ldr	r1, [pc, #164]	; (8003a9c <__kernel_sinf+0xd4>)
 80039f8:	4606      	mov	r6, r0
 80039fa:	4628      	mov	r0, r5
 80039fc:	f7fc ff4a 	bl	8000894 <__aeabi_fmul>
 8003a00:	4927      	ldr	r1, [pc, #156]	; (8003aa0 <__kernel_sinf+0xd8>)
 8003a02:	f7fc fe3d 	bl	8000680 <__aeabi_fsub>
 8003a06:	4629      	mov	r1, r5
 8003a08:	f7fc ff44 	bl	8000894 <__aeabi_fmul>
 8003a0c:	4925      	ldr	r1, [pc, #148]	; (8003aa4 <__kernel_sinf+0xdc>)
 8003a0e:	f7fc fe39 	bl	8000684 <__addsf3>
 8003a12:	4629      	mov	r1, r5
 8003a14:	f7fc ff3e 	bl	8000894 <__aeabi_fmul>
 8003a18:	4923      	ldr	r1, [pc, #140]	; (8003aa8 <__kernel_sinf+0xe0>)
 8003a1a:	f7fc fe31 	bl	8000680 <__aeabi_fsub>
 8003a1e:	4629      	mov	r1, r5
 8003a20:	f7fc ff38 	bl	8000894 <__aeabi_fmul>
 8003a24:	4921      	ldr	r1, [pc, #132]	; (8003aac <__kernel_sinf+0xe4>)
 8003a26:	f7fc fe2d 	bl	8000684 <__addsf3>
 8003a2a:	4680      	mov	r8, r0
 8003a2c:	f1b9 0f00 	cmp.w	r9, #0
 8003a30:	d111      	bne.n	8003a56 <__kernel_sinf+0x8e>
 8003a32:	4601      	mov	r1, r0
 8003a34:	4628      	mov	r0, r5
 8003a36:	f7fc ff2d 	bl	8000894 <__aeabi_fmul>
 8003a3a:	491d      	ldr	r1, [pc, #116]	; (8003ab0 <__kernel_sinf+0xe8>)
 8003a3c:	f7fc fe20 	bl	8000680 <__aeabi_fsub>
 8003a40:	4631      	mov	r1, r6
 8003a42:	f7fc ff27 	bl	8000894 <__aeabi_fmul>
 8003a46:	4601      	mov	r1, r0
 8003a48:	4620      	mov	r0, r4
 8003a4a:	f7fc fe1b 	bl	8000684 <__addsf3>
 8003a4e:	4604      	mov	r4, r0
 8003a50:	4620      	mov	r0, r4
 8003a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a56:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	f7fc ff1a 	bl	8000894 <__aeabi_fmul>
 8003a60:	4641      	mov	r1, r8
 8003a62:	4681      	mov	r9, r0
 8003a64:	4630      	mov	r0, r6
 8003a66:	f7fc ff15 	bl	8000894 <__aeabi_fmul>
 8003a6a:	4601      	mov	r1, r0
 8003a6c:	4648      	mov	r0, r9
 8003a6e:	f7fc fe07 	bl	8000680 <__aeabi_fsub>
 8003a72:	4629      	mov	r1, r5
 8003a74:	f7fc ff0e 	bl	8000894 <__aeabi_fmul>
 8003a78:	4639      	mov	r1, r7
 8003a7a:	f7fc fe01 	bl	8000680 <__aeabi_fsub>
 8003a7e:	490c      	ldr	r1, [pc, #48]	; (8003ab0 <__kernel_sinf+0xe8>)
 8003a80:	4605      	mov	r5, r0
 8003a82:	4630      	mov	r0, r6
 8003a84:	f7fc ff06 	bl	8000894 <__aeabi_fmul>
 8003a88:	4601      	mov	r1, r0
 8003a8a:	4628      	mov	r0, r5
 8003a8c:	f7fc fdfa 	bl	8000684 <__addsf3>
 8003a90:	4601      	mov	r1, r0
 8003a92:	4620      	mov	r0, r4
 8003a94:	f7fc fdf4 	bl	8000680 <__aeabi_fsub>
 8003a98:	e7d9      	b.n	8003a4e <__kernel_sinf+0x86>
 8003a9a:	bf00      	nop
 8003a9c:	2f2ec9d3 	.word	0x2f2ec9d3
 8003aa0:	32d72f34 	.word	0x32d72f34
 8003aa4:	3638ef1b 	.word	0x3638ef1b
 8003aa8:	39500d01 	.word	0x39500d01
 8003aac:	3c088889 	.word	0x3c088889
 8003ab0:	3e2aaaab 	.word	0x3e2aaaab

08003ab4 <fabsf>:
 8003ab4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003ab8:	4770      	bx	lr
	...

08003abc <scalbnf>:
 8003abc:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	d027      	beq.n	8003b1a <scalbnf+0x5e>
 8003aca:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003ace:	d303      	bcc.n	8003ad8 <scalbnf+0x1c>
 8003ad0:	f7fc fdd8 	bl	8000684 <__addsf3>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	e020      	b.n	8003b1a <scalbnf+0x5e>
 8003ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003adc:	d215      	bcs.n	8003b0a <scalbnf+0x4e>
 8003ade:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8003ae2:	f7fc fed7 	bl	8000894 <__aeabi_fmul>
 8003ae6:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <scalbnf+0x8c>)
 8003ae8:	4602      	mov	r2, r0
 8003aea:	429c      	cmp	r4, r3
 8003aec:	db22      	blt.n	8003b34 <scalbnf+0x78>
 8003aee:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003af2:	3b19      	subs	r3, #25
 8003af4:	4423      	add	r3, r4
 8003af6:	2bfe      	cmp	r3, #254	; 0xfe
 8003af8:	dd09      	ble.n	8003b0e <scalbnf+0x52>
 8003afa:	4611      	mov	r1, r2
 8003afc:	4813      	ldr	r0, [pc, #76]	; (8003b4c <scalbnf+0x90>)
 8003afe:	f000 f829 	bl	8003b54 <copysignf>
 8003b02:	4912      	ldr	r1, [pc, #72]	; (8003b4c <scalbnf+0x90>)
 8003b04:	f7fc fec6 	bl	8000894 <__aeabi_fmul>
 8003b08:	e7e4      	b.n	8003ad4 <scalbnf+0x18>
 8003b0a:	0ddb      	lsrs	r3, r3, #23
 8003b0c:	e7f2      	b.n	8003af4 <scalbnf+0x38>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	dd05      	ble.n	8003b1e <scalbnf+0x62>
 8003b12:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8003b16:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	bd10      	pop	{r4, pc}
 8003b1e:	f113 0f16 	cmn.w	r3, #22
 8003b22:	da09      	bge.n	8003b38 <scalbnf+0x7c>
 8003b24:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003b28:	429c      	cmp	r4, r3
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	dce6      	bgt.n	8003afc <scalbnf+0x40>
 8003b2e:	4808      	ldr	r0, [pc, #32]	; (8003b50 <scalbnf+0x94>)
 8003b30:	f000 f810 	bl	8003b54 <copysignf>
 8003b34:	4906      	ldr	r1, [pc, #24]	; (8003b50 <scalbnf+0x94>)
 8003b36:	e7e5      	b.n	8003b04 <scalbnf+0x48>
 8003b38:	3319      	adds	r3, #25
 8003b3a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8003b3e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8003b42:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8003b46:	e7dd      	b.n	8003b04 <scalbnf+0x48>
 8003b48:	ffff3cb0 	.word	0xffff3cb0
 8003b4c:	7149f2ca 	.word	0x7149f2ca
 8003b50:	0da24260 	.word	0x0da24260

08003b54 <copysignf>:
 8003b54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003b58:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003b5c:	4308      	orrs	r0, r1
 8003b5e:	4770      	bx	lr

08003b60 <_init>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	bf00      	nop
 8003b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b66:	bc08      	pop	{r3}
 8003b68:	469e      	mov	lr, r3
 8003b6a:	4770      	bx	lr

08003b6c <_fini>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	bf00      	nop
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr
