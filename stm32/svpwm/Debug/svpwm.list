
svpwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005440  08005440  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005440  08005440  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005440  08005440  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  080054b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080054b8  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd37  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001949  00000000  00000000  0002bdd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  0002d720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd8  00000000  00000000  0002e398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014f8c  00000000  00000000  0002ef70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000083fa  00000000  00000000  00043efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073752  00000000  00000000  0004c2f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bfa48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f30  00000000  00000000  000bfac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004fa8 	.word	0x08004fa8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004fa8 	.word	0x08004fa8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_d2f>:
 80005d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005e0:	bf24      	itt	cs
 80005e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005ea:	d90d      	bls.n	8000608 <__aeabi_d2f+0x30>
 80005ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000600:	bf08      	it	eq
 8000602:	f020 0001 	biceq.w	r0, r0, #1
 8000606:	4770      	bx	lr
 8000608:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800060c:	d121      	bne.n	8000652 <__aeabi_d2f+0x7a>
 800060e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000612:	bfbc      	itt	lt
 8000614:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000618:	4770      	bxlt	lr
 800061a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000622:	f1c2 0218 	rsb	r2, r2, #24
 8000626:	f1c2 0c20 	rsb	ip, r2, #32
 800062a:	fa10 f30c 	lsls.w	r3, r0, ip
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	bf18      	it	ne
 8000634:	f040 0001 	orrne.w	r0, r0, #1
 8000638:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800063c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000640:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000644:	ea40 000c 	orr.w	r0, r0, ip
 8000648:	fa23 f302 	lsr.w	r3, r3, r2
 800064c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000650:	e7cc      	b.n	80005ec <__aeabi_d2f+0x14>
 8000652:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000656:	d107      	bne.n	8000668 <__aeabi_d2f+0x90>
 8000658:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800065c:	bf1e      	ittt	ne
 800065e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000662:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000666:	4770      	bxne	lr
 8000668:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800066c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_frsub>:
 8000678:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800067c:	e002      	b.n	8000684 <__addsf3>
 800067e:	bf00      	nop

08000680 <__aeabi_fsub>:
 8000680:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000684 <__addsf3>:
 8000684:	0042      	lsls	r2, r0, #1
 8000686:	bf1f      	itttt	ne
 8000688:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800068c:	ea92 0f03 	teqne	r2, r3
 8000690:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000694:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000698:	d06a      	beq.n	8000770 <__addsf3+0xec>
 800069a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800069e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006a2:	bfc1      	itttt	gt
 80006a4:	18d2      	addgt	r2, r2, r3
 80006a6:	4041      	eorgt	r1, r0
 80006a8:	4048      	eorgt	r0, r1
 80006aa:	4041      	eorgt	r1, r0
 80006ac:	bfb8      	it	lt
 80006ae:	425b      	neglt	r3, r3
 80006b0:	2b19      	cmp	r3, #25
 80006b2:	bf88      	it	hi
 80006b4:	4770      	bxhi	lr
 80006b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4240      	negne	r0, r0
 80006c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006d2:	bf18      	it	ne
 80006d4:	4249      	negne	r1, r1
 80006d6:	ea92 0f03 	teq	r2, r3
 80006da:	d03f      	beq.n	800075c <__addsf3+0xd8>
 80006dc:	f1a2 0201 	sub.w	r2, r2, #1
 80006e0:	fa41 fc03 	asr.w	ip, r1, r3
 80006e4:	eb10 000c 	adds.w	r0, r0, ip
 80006e8:	f1c3 0320 	rsb	r3, r3, #32
 80006ec:	fa01 f103 	lsl.w	r1, r1, r3
 80006f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006f4:	d502      	bpl.n	80006fc <__addsf3+0x78>
 80006f6:	4249      	negs	r1, r1
 80006f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000700:	d313      	bcc.n	800072a <__addsf3+0xa6>
 8000702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000706:	d306      	bcc.n	8000716 <__addsf3+0x92>
 8000708:	0840      	lsrs	r0, r0, #1
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	f102 0201 	add.w	r2, r2, #1
 8000712:	2afe      	cmp	r2, #254	; 0xfe
 8000714:	d251      	bcs.n	80007ba <__addsf3+0x136>
 8000716:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800071a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800071e:	bf08      	it	eq
 8000720:	f020 0001 	biceq.w	r0, r0, #1
 8000724:	ea40 0003 	orr.w	r0, r0, r3
 8000728:	4770      	bx	lr
 800072a:	0049      	lsls	r1, r1, #1
 800072c:	eb40 0000 	adc.w	r0, r0, r0
 8000730:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000734:	f1a2 0201 	sub.w	r2, r2, #1
 8000738:	d1ed      	bne.n	8000716 <__addsf3+0x92>
 800073a:	fab0 fc80 	clz	ip, r0
 800073e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000742:	ebb2 020c 	subs.w	r2, r2, ip
 8000746:	fa00 f00c 	lsl.w	r0, r0, ip
 800074a:	bfaa      	itet	ge
 800074c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000750:	4252      	neglt	r2, r2
 8000752:	4318      	orrge	r0, r3
 8000754:	bfbc      	itt	lt
 8000756:	40d0      	lsrlt	r0, r2
 8000758:	4318      	orrlt	r0, r3
 800075a:	4770      	bx	lr
 800075c:	f092 0f00 	teq	r2, #0
 8000760:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000764:	bf06      	itte	eq
 8000766:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800076a:	3201      	addeq	r2, #1
 800076c:	3b01      	subne	r3, #1
 800076e:	e7b5      	b.n	80006dc <__addsf3+0x58>
 8000770:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000774:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000778:	bf18      	it	ne
 800077a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077e:	d021      	beq.n	80007c4 <__addsf3+0x140>
 8000780:	ea92 0f03 	teq	r2, r3
 8000784:	d004      	beq.n	8000790 <__addsf3+0x10c>
 8000786:	f092 0f00 	teq	r2, #0
 800078a:	bf08      	it	eq
 800078c:	4608      	moveq	r0, r1
 800078e:	4770      	bx	lr
 8000790:	ea90 0f01 	teq	r0, r1
 8000794:	bf1c      	itt	ne
 8000796:	2000      	movne	r0, #0
 8000798:	4770      	bxne	lr
 800079a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800079e:	d104      	bne.n	80007aa <__addsf3+0x126>
 80007a0:	0040      	lsls	r0, r0, #1
 80007a2:	bf28      	it	cs
 80007a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007a8:	4770      	bx	lr
 80007aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007ae:	bf3c      	itt	cc
 80007b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007b4:	4770      	bxcc	lr
 80007b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c2:	4770      	bx	lr
 80007c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007c8:	bf16      	itet	ne
 80007ca:	4608      	movne	r0, r1
 80007cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007d0:	4601      	movne	r1, r0
 80007d2:	0242      	lsls	r2, r0, #9
 80007d4:	bf06      	itte	eq
 80007d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007da:	ea90 0f01 	teqeq	r0, r1
 80007de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_ui2f>:
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e004      	b.n	80007f4 <__aeabi_i2f+0x8>
 80007ea:	bf00      	nop

080007ec <__aeabi_i2f>:
 80007ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	ea5f 0c00 	movs.w	ip, r0
 80007f8:	bf08      	it	eq
 80007fa:	4770      	bxeq	lr
 80007fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000800:	4601      	mov	r1, r0
 8000802:	f04f 0000 	mov.w	r0, #0
 8000806:	e01c      	b.n	8000842 <__aeabi_l2f+0x2a>

08000808 <__aeabi_ul2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	e00a      	b.n	800082c <__aeabi_l2f+0x14>
 8000816:	bf00      	nop

08000818 <__aeabi_l2f>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000824:	d502      	bpl.n	800082c <__aeabi_l2f+0x14>
 8000826:	4240      	negs	r0, r0
 8000828:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082c:	ea5f 0c01 	movs.w	ip, r1
 8000830:	bf02      	ittt	eq
 8000832:	4684      	moveq	ip, r0
 8000834:	4601      	moveq	r1, r0
 8000836:	2000      	moveq	r0, #0
 8000838:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800083c:	bf08      	it	eq
 800083e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000842:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000846:	fabc f28c 	clz	r2, ip
 800084a:	3a08      	subs	r2, #8
 800084c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000850:	db10      	blt.n	8000874 <__aeabi_l2f+0x5c>
 8000852:	fa01 fc02 	lsl.w	ip, r1, r2
 8000856:	4463      	add	r3, ip
 8000858:	fa00 fc02 	lsl.w	ip, r0, r2
 800085c:	f1c2 0220 	rsb	r2, r2, #32
 8000860:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000864:	fa20 f202 	lsr.w	r2, r0, r2
 8000868:	eb43 0002 	adc.w	r0, r3, r2
 800086c:	bf08      	it	eq
 800086e:	f020 0001 	biceq.w	r0, r0, #1
 8000872:	4770      	bx	lr
 8000874:	f102 0220 	add.w	r2, r2, #32
 8000878:	fa01 fc02 	lsl.w	ip, r1, r2
 800087c:	f1c2 0220 	rsb	r2, r2, #32
 8000880:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000884:	fa21 f202 	lsr.w	r2, r1, r2
 8000888:	eb43 0002 	adc.w	r0, r3, r2
 800088c:	bf08      	it	eq
 800088e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000892:	4770      	bx	lr

08000894 <__aeabi_fmul>:
 8000894:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000898:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800089c:	bf1e      	ittt	ne
 800089e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008a2:	ea92 0f0c 	teqne	r2, ip
 80008a6:	ea93 0f0c 	teqne	r3, ip
 80008aa:	d06f      	beq.n	800098c <__aeabi_fmul+0xf8>
 80008ac:	441a      	add	r2, r3
 80008ae:	ea80 0c01 	eor.w	ip, r0, r1
 80008b2:	0240      	lsls	r0, r0, #9
 80008b4:	bf18      	it	ne
 80008b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008ba:	d01e      	beq.n	80008fa <__aeabi_fmul+0x66>
 80008bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008c8:	fba0 3101 	umull	r3, r1, r0, r1
 80008cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008d4:	bf3e      	ittt	cc
 80008d6:	0049      	lslcc	r1, r1, #1
 80008d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008dc:	005b      	lslcc	r3, r3, #1
 80008de:	ea40 0001 	orr.w	r0, r0, r1
 80008e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008e6:	2afd      	cmp	r2, #253	; 0xfd
 80008e8:	d81d      	bhi.n	8000926 <__aeabi_fmul+0x92>
 80008ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008f2:	bf08      	it	eq
 80008f4:	f020 0001 	biceq.w	r0, r0, #1
 80008f8:	4770      	bx	lr
 80008fa:	f090 0f00 	teq	r0, #0
 80008fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000902:	bf08      	it	eq
 8000904:	0249      	lsleq	r1, r1, #9
 8000906:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800090a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800090e:	3a7f      	subs	r2, #127	; 0x7f
 8000910:	bfc2      	ittt	gt
 8000912:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000916:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800091a:	4770      	bxgt	lr
 800091c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	3a01      	subs	r2, #1
 8000926:	dc5d      	bgt.n	80009e4 <__aeabi_fmul+0x150>
 8000928:	f112 0f19 	cmn.w	r2, #25
 800092c:	bfdc      	itt	le
 800092e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000932:	4770      	bxle	lr
 8000934:	f1c2 0200 	rsb	r2, r2, #0
 8000938:	0041      	lsls	r1, r0, #1
 800093a:	fa21 f102 	lsr.w	r1, r1, r2
 800093e:	f1c2 0220 	rsb	r2, r2, #32
 8000942:	fa00 fc02 	lsl.w	ip, r0, r2
 8000946:	ea5f 0031 	movs.w	r0, r1, rrx
 800094a:	f140 0000 	adc.w	r0, r0, #0
 800094e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000952:	bf08      	it	eq
 8000954:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000958:	4770      	bx	lr
 800095a:	f092 0f00 	teq	r2, #0
 800095e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0040      	lsleq	r0, r0, #1
 8000966:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800096a:	3a01      	subeq	r2, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xce>
 800096e:	ea40 000c 	orr.w	r0, r0, ip
 8000972:	f093 0f00 	teq	r3, #0
 8000976:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097a:	bf02      	ittt	eq
 800097c:	0049      	lsleq	r1, r1, #1
 800097e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000982:	3b01      	subeq	r3, #1
 8000984:	d0f9      	beq.n	800097a <__aeabi_fmul+0xe6>
 8000986:	ea41 010c 	orr.w	r1, r1, ip
 800098a:	e78f      	b.n	80008ac <__aeabi_fmul+0x18>
 800098c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000990:	ea92 0f0c 	teq	r2, ip
 8000994:	bf18      	it	ne
 8000996:	ea93 0f0c 	teqne	r3, ip
 800099a:	d00a      	beq.n	80009b2 <__aeabi_fmul+0x11e>
 800099c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009a0:	bf18      	it	ne
 80009a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009a6:	d1d8      	bne.n	800095a <__aeabi_fmul+0xc6>
 80009a8:	ea80 0001 	eor.w	r0, r0, r1
 80009ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	4770      	bx	lr
 80009b2:	f090 0f00 	teq	r0, #0
 80009b6:	bf17      	itett	ne
 80009b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009bc:	4608      	moveq	r0, r1
 80009be:	f091 0f00 	teqne	r1, #0
 80009c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009c6:	d014      	beq.n	80009f2 <__aeabi_fmul+0x15e>
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d101      	bne.n	80009d2 <__aeabi_fmul+0x13e>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	d10f      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009d2:	ea93 0f0c 	teq	r3, ip
 80009d6:	d103      	bne.n	80009e0 <__aeabi_fmul+0x14c>
 80009d8:	024b      	lsls	r3, r1, #9
 80009da:	bf18      	it	ne
 80009dc:	4608      	movne	r0, r1
 80009de:	d108      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009e0:	ea80 0001 	eor.w	r0, r0, r1
 80009e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f0:	4770      	bx	lr
 80009f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bx	lr

080009fc <__aeabi_fdiv>:
 80009fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a04:	bf1e      	ittt	ne
 8000a06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a0a:	ea92 0f0c 	teqne	r2, ip
 8000a0e:	ea93 0f0c 	teqne	r3, ip
 8000a12:	d069      	beq.n	8000ae8 <__aeabi_fdiv+0xec>
 8000a14:	eba2 0203 	sub.w	r2, r2, r3
 8000a18:	ea80 0c01 	eor.w	ip, r0, r1
 8000a1c:	0249      	lsls	r1, r1, #9
 8000a1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a22:	d037      	beq.n	8000a94 <__aeabi_fdiv+0x98>
 8000a24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a34:	428b      	cmp	r3, r1
 8000a36:	bf38      	it	cc
 8000a38:	005b      	lslcc	r3, r3, #1
 8000a3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a42:	428b      	cmp	r3, r1
 8000a44:	bf24      	itt	cs
 8000a46:	1a5b      	subcs	r3, r3, r1
 8000a48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a50:	bf24      	itt	cs
 8000a52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a5e:	bf24      	itt	cs
 8000a60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a6c:	bf24      	itt	cs
 8000a6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	bf18      	it	ne
 8000a7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a7e:	d1e0      	bne.n	8000a42 <__aeabi_fdiv+0x46>
 8000a80:	2afd      	cmp	r2, #253	; 0xfd
 8000a82:	f63f af50 	bhi.w	8000926 <__aeabi_fmul+0x92>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a8c:	bf08      	it	eq
 8000a8e:	f020 0001 	biceq.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a9c:	327f      	adds	r2, #127	; 0x7f
 8000a9e:	bfc2      	ittt	gt
 8000aa0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000aa4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000aa8:	4770      	bxgt	lr
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f04f 0300 	mov.w	r3, #0
 8000ab2:	3a01      	subs	r2, #1
 8000ab4:	e737      	b.n	8000926 <__aeabi_fmul+0x92>
 8000ab6:	f092 0f00 	teq	r2, #0
 8000aba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0040      	lsleq	r0, r0, #1
 8000ac2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ac6:	3a01      	subeq	r2, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xc2>
 8000aca:	ea40 000c 	orr.w	r0, r0, ip
 8000ace:	f093 0f00 	teq	r3, #0
 8000ad2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad6:	bf02      	ittt	eq
 8000ad8:	0049      	lsleq	r1, r1, #1
 8000ada:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ade:	3b01      	subeq	r3, #1
 8000ae0:	d0f9      	beq.n	8000ad6 <__aeabi_fdiv+0xda>
 8000ae2:	ea41 010c 	orr.w	r1, r1, ip
 8000ae6:	e795      	b.n	8000a14 <__aeabi_fdiv+0x18>
 8000ae8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000aec:	ea92 0f0c 	teq	r2, ip
 8000af0:	d108      	bne.n	8000b04 <__aeabi_fdiv+0x108>
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	f47f af7d 	bne.w	80009f2 <__aeabi_fmul+0x15e>
 8000af8:	ea93 0f0c 	teq	r3, ip
 8000afc:	f47f af70 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e776      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b04:	ea93 0f0c 	teq	r3, ip
 8000b08:	d104      	bne.n	8000b14 <__aeabi_fdiv+0x118>
 8000b0a:	024b      	lsls	r3, r1, #9
 8000b0c:	f43f af4c 	beq.w	80009a8 <__aeabi_fmul+0x114>
 8000b10:	4608      	mov	r0, r1
 8000b12:	e76e      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b18:	bf18      	it	ne
 8000b1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b1e:	d1ca      	bne.n	8000ab6 <__aeabi_fdiv+0xba>
 8000b20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b24:	f47f af5c 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b2c:	f47f af3c 	bne.w	80009a8 <__aeabi_fmul+0x114>
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b32:	bf00      	nop

08000b34 <__gesf2>:
 8000b34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b38:	e006      	b.n	8000b48 <__cmpsf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__lesf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	e002      	b.n	8000b48 <__cmpsf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__cmpsf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b58:	bf18      	it	ne
 8000b5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5e:	d011      	beq.n	8000b84 <__cmpsf2+0x40>
 8000b60:	b001      	add	sp, #4
 8000b62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b66:	bf18      	it	ne
 8000b68:	ea90 0f01 	teqne	r0, r1
 8000b6c:	bf58      	it	pl
 8000b6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b72:	bf88      	it	hi
 8000b74:	17c8      	asrhi	r0, r1, #31
 8000b76:	bf38      	it	cc
 8000b78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b7c:	bf18      	it	ne
 8000b7e:	f040 0001 	orrne.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	d102      	bne.n	8000b90 <__cmpsf2+0x4c>
 8000b8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b8e:	d105      	bne.n	8000b9c <__cmpsf2+0x58>
 8000b90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b94:	d1e4      	bne.n	8000b60 <__cmpsf2+0x1c>
 8000b96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b9a:	d0e1      	beq.n	8000b60 <__cmpsf2+0x1c>
 8000b9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_cfrcmple>:
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4661      	mov	r1, ip
 8000baa:	e7ff      	b.n	8000bac <__aeabi_cfcmpeq>

08000bac <__aeabi_cfcmpeq>:
 8000bac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bae:	f7ff ffc9 	bl	8000b44 <__cmpsf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	bf48      	it	mi
 8000bb6:	f110 0f00 	cmnmi.w	r0, #0
 8000bba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bbc <__aeabi_fcmpeq>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff fff4 	bl	8000bac <__aeabi_cfcmpeq>
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2001      	moveq	r0, #1
 8000bc8:	2000      	movne	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fcmplt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffea 	bl	8000bac <__aeabi_cfcmpeq>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_fcmple>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffe0 	bl	8000bac <__aeabi_cfcmpeq>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fcmpge>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffd2 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fcmpgt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffc8 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_f2iz>:
 8000c20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c28:	d30f      	bcc.n	8000c4a <__aeabi_f2iz+0x2a>
 8000c2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c32:	d90d      	bls.n	8000c50 <__aeabi_f2iz+0x30>
 8000c34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c3c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c40:	fa23 f002 	lsr.w	r0, r3, r2
 8000c44:	bf18      	it	ne
 8000c46:	4240      	negne	r0, r0
 8000c48:	4770      	bx	lr
 8000c4a:	f04f 0000 	mov.w	r0, #0
 8000c4e:	4770      	bx	lr
 8000c50:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c54:	d101      	bne.n	8000c5a <__aeabi_f2iz+0x3a>
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	d105      	bne.n	8000c66 <__aeabi_f2iz+0x46>
 8000c5a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c5e:	bf08      	it	eq
 8000c60:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	4770      	bx	lr

08000c6c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c74:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c78:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d013      	beq.n	8000cac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c88:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000c8c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d00b      	beq.n	8000cac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c94:	e000      	b.n	8000c98 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c96:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f9      	beq.n	8000c96 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ca2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
	for(i=0; i < len; i++) {
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e009      	b.n	8000ce2 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	60ba      	str	r2, [r7, #8]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ffc8 	bl	8000c6c <ITM_SendChar>
	for(i=0; i < len; i++) {
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	dbf1      	blt.n	8000cce <_write+0x16>
	}
	return len;
 8000cea:	687b      	ldr	r3, [r7, #4]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	0000      	movs	r0, r0
	...

08000cf8 <HAL_TIM_PeriodElapsedCallback>:

uint16_t electricOffset = 35;
uint16_t electricRange = 585;
uint16_t electricAngle = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1_1) {
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b08f      	sub	sp, #60	; 0x3c
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
//	}
//
//	if (p < 0.0f) {
//		p = 0.0f;
//	}
	float p = 0.0f;
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	637b      	str	r3, [r7, #52]	; 0x34

	float multiplyBy = (150.0f + p) * (1.0f + 12.5f * thetaAdd);
 8000d06:	4980      	ldr	r1, [pc, #512]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000d08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d0a:	f7ff fcbb 	bl	8000684 <__addsf3>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	461c      	mov	r4, r3
 8000d12:	4b7e      	ldr	r3, [pc, #504]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	497e      	ldr	r1, [pc, #504]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fdbb 	bl	8000894 <__aeabi_fmul>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fcad 	bl	8000684 <__addsf3>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f7ff fdb0 	bl	8000894 <__aeabi_fmul>
 8000d34:	4603      	mov	r3, r0
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
	int addTo = (1000.0f - multiplyBy) / 2.0f;
 8000d38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d3a:	4876      	ldr	r0, [pc, #472]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000d3c:	f7ff fca0 	bl	8000680 <__aeabi_fsub>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fe58 	bl	80009fc <__aeabi_fdiv>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff66 	bl	8000c20 <__aeabi_f2iz>
 8000d54:	4603      	mov	r3, r0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c

	float third_sector = floorf(theta / S_2_PI_3);
 8000d58:	4b6f      	ldr	r3, [pc, #444]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a6f      	ldr	r2, [pc, #444]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fe4b 	bl	80009fc <__aeabi_fdiv>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 fb65 	bl	8004438 <floorf>
 8000d6e:	62b8      	str	r0, [r7, #40]	; 0x28
	float third_sector_theta = theta - third_sector * S_2_PI_3;
 8000d70:	4b69      	ldr	r3, [pc, #420]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000d72:	681c      	ldr	r4, [r3, #0]
 8000d74:	4b69      	ldr	r3, [pc, #420]	; (8000f1c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8000d76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fd8b 	bl	8000894 <__aeabi_fmul>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4619      	mov	r1, r3
 8000d82:	4620      	mov	r0, r4
 8000d84:	f7ff fc7c 	bl	8000680 <__aeabi_fsub>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24

	float x = cosf(third_sector_theta);
 8000d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d8e:	f003 fb1f 	bl	80043d0 <cosf>
 8000d92:	6238      	str	r0, [r7, #32]
	float y = sinf(third_sector_theta);
 8000d94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d96:	f003 fb8f 	bl	80044b8 <sinf>
 8000d9a:	61f8      	str	r0, [r7, #28]

	float a = SCALE_TO_ONE * (S_1_SQRT3 * y + x);
 8000d9c:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8000d9e:	69f9      	ldr	r1, [r7, #28]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fd77 	bl	8000894 <__aeabi_fmul>
 8000da6:	4603      	mov	r3, r0
 8000da8:	6a39      	ldr	r1, [r7, #32]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fc6a 	bl	8000684 <__addsf3>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b5b      	ldr	r3, [pc, #364]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000db6:	4619      	mov	r1, r3
 8000db8:	4610      	mov	r0, r2
 8000dba:	f7ff fd6b 	bl	8000894 <__aeabi_fmul>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	61bb      	str	r3, [r7, #24]
	float b = SCALE_TO_ONE * (S_2_SQRT3 * y);
 8000dc2:	4b59      	ldr	r3, [pc, #356]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8000dc4:	69f9      	ldr	r1, [r7, #28]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fd64 	bl	8000894 <__aeabi_fmul>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b54      	ldr	r3, [pc, #336]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	f7ff fd5d 	bl	8000894 <__aeabi_fmul>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	617b      	str	r3, [r7, #20]

	int a_time = a * multiplyBy;
 8000dde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000de0:	69b8      	ldr	r0, [r7, #24]
 8000de2:	f7ff fd57 	bl	8000894 <__aeabi_fmul>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff19 	bl	8000c20 <__aeabi_f2iz>
 8000dee:	4603      	mov	r3, r0
 8000df0:	613b      	str	r3, [r7, #16]
	int b_time = b * multiplyBy;
 8000df2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000df4:	6978      	ldr	r0, [r7, #20]
 8000df6:	f7ff fd4d 	bl	8000894 <__aeabi_fmul>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff0f 	bl	8000c20 <__aeabi_f2iz>
 8000e02:	4603      	mov	r3, r0
 8000e04:	60fb      	str	r3, [r7, #12]

	if (third_sector == 0) {
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e0c:	f7ff fed6 	bl	8000bbc <__aeabi_fcmpeq>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d010      	beq.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0x140>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, a_time + addTo);
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1a:	441a      	add	r2, r3
 8000e1c:	4b43      	ldr	r3, [pc, #268]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, b_time + addTo);
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e26:	441a      	add	r2, r3
 8000e28:	4b40      	ldr	r3, [pc, #256]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, addTo);
 8000e2e:	4b3f      	ldr	r3, [pc, #252]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e34:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e36:	e028      	b.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x192>
	} else if (third_sector == 1) {
 8000e38:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e3e:	f7ff febd 	bl	8000bbc <__aeabi_fcmpeq>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d010      	beq.n	8000e6a <HAL_TIM_PeriodElapsedCallback+0x172>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, addTo);
 8000e48:	4b38      	ldr	r3, [pc, #224]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, a_time + addTo);
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e54:	441a      	add	r2, r3
 8000e56:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b_time + addTo);
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e60:	441a      	add	r2, r3
 8000e62:	4b32      	ldr	r3, [pc, #200]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e68:	e00f      	b.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x192>
	} else { // third_sector == 2
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, b_time + addTo);
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6e:	441a      	add	r2, r3
 8000e70:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, addTo);
 8000e76:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e7c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, a_time + addTo);
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e82:	441a      	add	r2, r3
 8000e84:	4b29      	ldr	r3, [pc, #164]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	theta += thetaAdd;
 8000e8a:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4619      	mov	r1, r3
 8000e94:	4610      	mov	r0, r2
 8000e96:	f7ff fbf5 	bl	8000684 <__addsf3>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000ea0:	601a      	str	r2, [r3, #0]
	thetaAdd += 0.0000002f;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4922      	ldr	r1, [pc, #136]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fbeb 	bl	8000684 <__addsf3>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000eb4:	601a      	str	r2, [r3, #0]

	if (theta >= 2.0f * M_PI) {
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff faac 	bl	8000418 <__aeabi_f2d>
 8000ec0:	a30f      	add	r3, pc, #60	; (adr r3, 8000f00 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec6:	f7ff fb73 	bl	80005b0 <__aeabi_dcmpge>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d100      	bne.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0x1da>
		theta -= 2.0f * M_PI;
	}
}
 8000ed0:	e012      	b.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0x200>
		theta -= 2.0f * M_PI;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fa9e 	bl	8000418 <__aeabi_f2d>
 8000edc:	a308      	add	r3, pc, #32	; (adr r3, 8000f00 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee2:	f7ff f939 	bl	8000158 <__aeabi_dsub>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	460c      	mov	r4, r1
 8000eea:	4618      	mov	r0, r3
 8000eec:	4621      	mov	r1, r4
 8000eee:	f7ff fb73 	bl	80005d8 <__aeabi_d2f>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	373c      	adds	r7, #60	; 0x3c
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd90      	pop	{r4, r7, pc}
 8000f00:	54442d18 	.word	0x54442d18
 8000f04:	401921fb 	.word	0x401921fb
 8000f08:	43160000 	.word	0x43160000
 8000f0c:	20000090 	.word	0x20000090
 8000f10:	41480000 	.word	0x41480000
 8000f14:	447a0000 	.word	0x447a0000
 8000f18:	2000008c 	.word	0x2000008c
 8000f1c:	40060a92 	.word	0x40060a92
 8000f20:	3f13cd3a 	.word	0x3f13cd3a
 8000f24:	3f5db3d8 	.word	0x3f5db3d8
 8000f28:	3f93cd3a 	.word	0x3f93cd3a
 8000f2c:	200000f4 	.word	0x200000f4
 8000f30:	3456bf95 	.word	0x3456bf95

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f000 fbcb 	bl	80016d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f851 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f981 	bl	8001248 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f46:	f000 f8c1 	bl	80010cc <MX_TIM1_Init>
  MX_I2C1_Init();
 8000f4a:	f000 f891 	bl	8001070 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <main+0x9c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <main+0x9c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0201 	orr.w	r2, r2, #1
 8000f5c:	60da      	str	r2, [r3, #12]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	481b      	ldr	r0, [pc, #108]	; (8000fd0 <main+0x9c>)
 8000f62:	f001 ff27 	bl	8002db4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000f66:	2100      	movs	r1, #0
 8000f68:	4819      	ldr	r0, [pc, #100]	; (8000fd0 <main+0x9c>)
 8000f6a:	f002 fca3 	bl	80038b4 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f6e:	2104      	movs	r1, #4
 8000f70:	4817      	ldr	r0, [pc, #92]	; (8000fd0 <main+0x9c>)
 8000f72:	f001 ff1f 	bl	8002db4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000f76:	2104      	movs	r1, #4
 8000f78:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <main+0x9c>)
 8000f7a:	f002 fc9b 	bl	80038b4 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f7e:	2108      	movs	r1, #8
 8000f80:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <main+0x9c>)
 8000f82:	f001 ff17 	bl	8002db4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000f86:	2108      	movs	r1, #8
 8000f88:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <main+0x9c>)
 8000f8a:	f002 fc93 	bl	80038b4 <HAL_TIMEx_PWMN_Start>

  HAL_StatusTypeDef ret;
  uint8_t buf[12];

  buf[0] = RAW_ANGLE_REG;
 8000f8e:	230c      	movs	r3, #12
 8000f90:	703b      	strb	r3, [r7, #0]
  ret = HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, buf, 1, 1000);
 8000f92:	236c      	movs	r3, #108	; 0x6c
 8000f94:	b299      	uxth	r1, r3
 8000f96:	463a      	mov	r2, r7
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <main+0xa0>)
 8000fa2:	f000 ff99 	bl	8001ed8 <HAL_I2C_Master_Transmit>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]
  if (ret == HAL_BUSY) {
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d103      	bne.n	8000fb8 <main+0x84>
	  printf("Busy Tx\n");
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <main+0xa4>)
 8000fb2:	f002 fe03 	bl	8003bbc <puts>
 8000fb6:	e009      	b.n	8000fcc <main+0x98>
  } else if (ret == HAL_ERROR) {
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d103      	bne.n	8000fc6 <main+0x92>
	  printf("Error Tx\n");
 8000fbe:	4807      	ldr	r0, [pc, #28]	; (8000fdc <main+0xa8>)
 8000fc0:	f002 fdfc 	bl	8003bbc <puts>
 8000fc4:	e002      	b.n	8000fcc <main+0x98>
  } else {
	  printf("Success Tx\n");
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <main+0xac>)
 8000fc8:	f002 fdf8 	bl	8003bbc <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <main+0x98>
 8000fce:	bf00      	nop
 8000fd0:	200000f4 	.word	0x200000f4
 8000fd4:	200000a0 	.word	0x200000a0
 8000fd8:	08004fc0 	.word	0x08004fc0
 8000fdc:	08004fc8 	.word	0x08004fc8
 8000fe0:	08004fd4 	.word	0x08004fd4

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b090      	sub	sp, #64	; 0x40
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	2228      	movs	r2, #40	; 0x28
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 fd7e 	bl	8003af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001006:	2301      	movs	r3, #1
 8001008:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001018:	2302      	movs	r3, #2
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001022:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0318 	add.w	r3, r7, #24
 800102c:	4618      	mov	r0, r3
 800102e:	f001 fa59 	bl	80024e4 <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001038:	f000 f934 	bl	80012a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001040:	2302      	movs	r3, #2
 8001042:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2102      	movs	r1, #2
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fcc4 	bl	80029e4 <HAL_RCC_ClockConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001062:	f000 f91f 	bl	80012a4 <Error_Handler>
  }
}
 8001066:	bf00      	nop
 8001068:	3740      	adds	r7, #64	; 0x40
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001076:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <MX_I2C1_Init+0x54>)
 8001078:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_I2C1_Init+0x50>)
 800107c:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <MX_I2C1_Init+0x58>)
 800107e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_I2C1_Init+0x50>)
 800108e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001092:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_I2C1_Init+0x50>)
 80010ae:	f000 fddb 	bl	8001c68 <HAL_I2C_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010b8:	f000 f8f4 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200000a0 	.word	0x200000a0
 80010c4:	40005400 	.word	0x40005400
 80010c8:	00061a80 	.word	0x00061a80

080010cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b096      	sub	sp, #88	; 0x58
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	2220      	movs	r2, #32
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f002 fcf5 	bl	8003af4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800110a:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <MX_TIM1_Init+0x174>)
 800110c:	4a4d      	ldr	r2, [pc, #308]	; (8001244 <MX_TIM1_Init+0x178>)
 800110e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001110:	4b4b      	ldr	r3, [pc, #300]	; (8001240 <MX_TIM1_Init+0x174>)
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001116:	4b4a      	ldr	r3, [pc, #296]	; (8001240 <MX_TIM1_Init+0x174>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800111c:	4b48      	ldr	r3, [pc, #288]	; (8001240 <MX_TIM1_Init+0x174>)
 800111e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001122:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001124:	4b46      	ldr	r3, [pc, #280]	; (8001240 <MX_TIM1_Init+0x174>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800112a:	4b45      	ldr	r3, [pc, #276]	; (8001240 <MX_TIM1_Init+0x174>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001130:	4b43      	ldr	r3, [pc, #268]	; (8001240 <MX_TIM1_Init+0x174>)
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001136:	4842      	ldr	r0, [pc, #264]	; (8001240 <MX_TIM1_Init+0x174>)
 8001138:	f001 fddc 	bl	8002cf4 <HAL_TIM_Base_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001142:	f000 f8af 	bl	80012a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800114c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001150:	4619      	mov	r1, r3
 8001152:	483b      	ldr	r0, [pc, #236]	; (8001240 <MX_TIM1_Init+0x174>)
 8001154:	f002 f82e 	bl	80031b4 <HAL_TIM_ConfigClockSource>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800115e:	f000 f8a1 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001162:	4837      	ldr	r0, [pc, #220]	; (8001240 <MX_TIM1_Init+0x174>)
 8001164:	f001 fdf1 	bl	8002d4a <HAL_TIM_PWM_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800116e:	f000 f899 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800117a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800117e:	4619      	mov	r1, r3
 8001180:	482f      	ldr	r0, [pc, #188]	; (8001240 <MX_TIM1_Init+0x174>)
 8001182:	f002 fbc1 	bl	8003908 <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800118c:	f000 f88a 	bl	80012a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001190:	2360      	movs	r3, #96	; 0x60
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001194:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119a:	2300      	movs	r3, #0
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800119e:	2300      	movs	r3, #0
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	2200      	movs	r2, #0
 80011b4:	4619      	mov	r1, r3
 80011b6:	4822      	ldr	r0, [pc, #136]	; (8001240 <MX_TIM1_Init+0x174>)
 80011b8:	f001 ff36 	bl	8003028 <HAL_TIM_PWM_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80011c2:	f000 f86f 	bl	80012a4 <Error_Handler>
  }
  sConfigOC.Pulse = 250;
 80011c6:	23fa      	movs	r3, #250	; 0xfa
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ce:	2204      	movs	r2, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	481b      	ldr	r0, [pc, #108]	; (8001240 <MX_TIM1_Init+0x174>)
 80011d4:	f001 ff28 	bl	8003028 <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80011de:	f000 f861 	bl	80012a4 <Error_Handler>
  }
  sConfigOC.Pulse = 750;
 80011e2:	f240 23ee 	movw	r3, #750	; 0x2ee
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	2208      	movs	r2, #8
 80011ee:	4619      	mov	r1, r3
 80011f0:	4813      	ldr	r0, [pc, #76]	; (8001240 <MX_TIM1_Init+0x174>)
 80011f2:	f001 ff19 	bl	8003028 <HAL_TIM_PWM_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80011fc:	f000 f852 	bl	80012a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001218:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4807      	ldr	r0, [pc, #28]	; (8001240 <MX_TIM1_Init+0x174>)
 8001224:	f002 fbb4 	bl	8003990 <HAL_TIMEx_ConfigBreakDeadTime>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 800122e:	f000 f839 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001232:	4803      	ldr	r0, [pc, #12]	; (8001240 <MX_TIM1_Init+0x174>)
 8001234:	f000 f8da 	bl	80013ec <HAL_TIM_MspPostInit>

}
 8001238:	bf00      	nop
 800123a:	3758      	adds	r7, #88	; 0x58
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200000f4 	.word	0x200000f4
 8001244:	40012c00 	.word	0x40012c00

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_GPIO_Init+0x58>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <MX_GPIO_Init+0x58>)
 8001254:	f043 0320 	orr.w	r3, r3, #32
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_GPIO_Init+0x58>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_GPIO_Init+0x58>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <MX_GPIO_Init+0x58>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6193      	str	r3, [r2, #24]
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_GPIO_Init+0x58>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_GPIO_Init+0x58>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <MX_GPIO_Init+0x58>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6193      	str	r3, [r2, #24]
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <MX_GPIO_Init+0x58>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_MspInit+0x5c>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4a14      	ldr	r2, [pc, #80]	; (800130c <HAL_MspInit+0x5c>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_MspInit+0x5c>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_MspInit+0x5c>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	; (800130c <HAL_MspInit+0x5c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <HAL_MspInit+0x5c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_MspInit+0x60>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <HAL_MspInit+0x60>)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000

08001314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a15      	ldr	r2, [pc, #84]	; (8001384 <HAL_I2C_MspInit+0x70>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d123      	bne.n	800137c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HAL_I2C_MspInit+0x74>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a13      	ldr	r2, [pc, #76]	; (8001388 <HAL_I2C_MspInit+0x74>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_I2C_MspInit+0x74>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800134c:	23c0      	movs	r3, #192	; 0xc0
 800134e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001350:	2312      	movs	r3, #18
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	480b      	ldr	r0, [pc, #44]	; (800138c <HAL_I2C_MspInit+0x78>)
 8001360:	f000 fb28 	bl	80019b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_I2C_MspInit+0x74>)
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_I2C_MspInit+0x74>)
 800136a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800136e:	61d3      	str	r3, [r2, #28]
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_I2C_MspInit+0x74>)
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40005400 	.word	0x40005400
 8001388:	40021000 	.word	0x40021000
 800138c:	40010c00 	.word	0x40010c00

08001390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a11      	ldr	r2, [pc, #68]	; (80013e4 <HAL_TIM_Base_MspInit+0x54>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d11b      	bne.n	80013da <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_TIM_Base_MspInit+0x58>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_TIM_Base_MspInit+0x58>)
 80013a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013ac:	6193      	str	r3, [r2, #24]
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_TIM_Base_MspInit+0x58>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2018      	movs	r0, #24
 80013c0:	f000 fac1 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80013c4:	2018      	movs	r0, #24
 80013c6:	f000 fada 	bl	800197e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2019      	movs	r0, #25
 80013d0:	f000 fab9 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013d4:	2019      	movs	r0, #25
 80013d6:	f000 fad2 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40012c00 	.word	0x40012c00
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a25      	ldr	r2, [pc, #148]	; (800149c <HAL_TIM_MspPostInit+0xb0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d142      	bne.n	8001492 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_TIM_MspPostInit+0xb4>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <HAL_TIM_MspPostInit+0xb4>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_TIM_MspPostInit+0xb4>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_TIM_MspPostInit+0xb4>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_TIM_MspPostInit+0xb4>)
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_TIM_MspPostInit+0xb4>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800143c:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2302      	movs	r3, #2
 8001448:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4814      	ldr	r0, [pc, #80]	; (80014a4 <HAL_TIM_MspPostInit+0xb8>)
 8001452:	f000 faaf 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001456:	2303      	movs	r3, #3
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2302      	movs	r3, #2
 8001460:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	480f      	ldr	r0, [pc, #60]	; (80014a8 <HAL_TIM_MspPostInit+0xbc>)
 800146a:	f000 faa3 	bl	80019b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_TIM_MspPostInit+0xc0>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
 800148c:	4a07      	ldr	r2, [pc, #28]	; (80014ac <HAL_TIM_MspPostInit+0xc0>)
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40012c00 	.word	0x40012c00
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010800 	.word	0x40010800
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	40010000 	.word	0x40010000

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <HardFault_Handler+0x4>

080014c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <MemManage_Handler+0x4>

080014c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <BusFault_Handler+0x4>

080014ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <UsageFault_Handler+0x4>

080014d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f000 f930 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <TIM1_BRK_IRQHandler+0x10>)
 800150a:	f001 fc85 	bl	8002e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000f4 	.word	0x200000f4

08001518 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <TIM1_UP_IRQHandler+0x10>)
 800151e:	f001 fc7b 	bl	8002e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000f4 	.word	0x200000f4

0800152c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	e00a      	b.n	8001554 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800153e:	f3af 8000 	nop.w
 8001542:	4601      	mov	r1, r0
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	b2ca      	uxtb	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbf0      	blt.n	800153e <_read+0x12>
	}

return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <_sbrk+0x50>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x16>
		heap_end = &end;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <_sbrk+0x50>)
 800157a:	4a10      	ldr	r2, [pc, #64]	; (80015bc <_sbrk+0x54>)
 800157c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <_sbrk+0x50>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <_sbrk+0x50>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	466a      	mov	r2, sp
 800158e:	4293      	cmp	r3, r2
 8001590:	d907      	bls.n	80015a2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001592:	f002 fa85 	bl	8003aa0 <__errno>
 8001596:	4602      	mov	r2, r0
 8001598:	230c      	movs	r3, #12
 800159a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800159c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a0:	e006      	b.n	80015b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <_sbrk+0x50>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a03      	ldr	r2, [pc, #12]	; (80015b8 <_sbrk+0x50>)
 80015ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000094 	.word	0x20000094
 80015bc:	20000140 	.word	0x20000140

080015c0 <_close>:

int _close(int file)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	return -1;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e6:	605a      	str	r2, [r3, #4]
	return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <_isatty>:

int _isatty(int file)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	return 1;
 80015fc:	2301      	movs	r3, #1
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
	return 0;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <SystemInit+0x5c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <SystemInit+0x5c>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <SystemInit+0x5c>)
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	4911      	ldr	r1, [pc, #68]	; (800167c <SystemInit+0x5c>)
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <SystemInit+0x60>)
 8001638:	4013      	ands	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <SystemInit+0x5c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0e      	ldr	r2, [pc, #56]	; (800167c <SystemInit+0x5c>)
 8001642:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <SystemInit+0x5c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <SystemInit+0x5c>)
 8001652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001656:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <SystemInit+0x5c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <SystemInit+0x5c>)
 800165e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001662:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <SystemInit+0x5c>)
 8001666:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800166a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SystemInit+0x64>)
 800166e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001672:	609a      	str	r2, [r3, #8]
#endif 
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	40021000 	.word	0x40021000
 8001680:	f8ff0000 	.word	0xf8ff0000
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001688:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800168a:	e003      	b.n	8001694 <LoopCopyDataInit>

0800168c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800168e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001690:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001692:	3104      	adds	r1, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001694:	480a      	ldr	r0, [pc, #40]	; (80016c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001698:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800169a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800169c:	d3f6      	bcc.n	800168c <CopyDataInit>
  ldr r2, =_sbss
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016a0:	e002      	b.n	80016a8 <LoopFillZerobss>

080016a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016a4:	f842 3b04 	str.w	r3, [r2], #4

080016a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016ac:	d3f9      	bcc.n	80016a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ae:	f7ff ffb7 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f002 f9fb 	bl	8003aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016b6:	f7ff fc3d 	bl	8000f34 <main>
  bx lr
 80016ba:	4770      	bx	lr
  ldr r3, =_sidata
 80016bc:	08005448 	.word	0x08005448
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016c4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80016c8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80016cc:	2000013c 	.word	0x2000013c

080016d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC1_2_IRQHandler>
	...

080016d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_Init+0x28>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_Init+0x28>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 f923 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 f808 	bl	8001700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f0:	f7ff fdde 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40022000 	.word	0x40022000

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_InitTick+0x54>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x58>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001716:	fbb3 f3f1 	udiv	r3, r3, r1
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f93b 	bl	800199a <HAL_SYSTICK_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e00e      	b.n	800174c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d80a      	bhi.n	800174a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800173c:	f000 f903 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001740:	4a06      	ldr	r2, [pc, #24]	; (800175c <HAL_InitTick+0x5c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000000 	.word	0x20000000
 8001758:	20000008 	.word	0x20000008
 800175c:	20000004 	.word	0x20000004

08001760 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_IncTick+0x1c>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_IncTick+0x20>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a03      	ldr	r2, [pc, #12]	; (8001780 <HAL_IncTick+0x20>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	20000008 	.word	0x20000008
 8001780:	20000134 	.word	0x20000134

08001784 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;
 8001788:	4b02      	ldr	r3, [pc, #8]	; (8001794 <HAL_GetTick+0x10>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	20000134 	.word	0x20000134

08001798 <__NVIC_SetPriorityGrouping>:
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_GetPriorityGrouping>:
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_EnableIRQ>:
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db0b      	blt.n	8001826 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	4906      	ldr	r1, [pc, #24]	; (8001830 <__NVIC_EnableIRQ+0x34>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2001      	movs	r0, #1
 800181e:	fa00 f202 	lsl.w	r2, r0, r2
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <SysTick_Config>:
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001910:	f7ff ff90 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff2d 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff42 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff90 	bl	8001888 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5f 	bl	8001834 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff35 	bl	80017fc <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b08b      	sub	sp, #44	; 0x2c
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c6:	e127      	b.n	8001c18 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019c8:	2201      	movs	r2, #1
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 8116 	bne.w	8001c12 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b12      	cmp	r3, #18
 80019ec:	d034      	beq.n	8001a58 <HAL_GPIO_Init+0xa4>
 80019ee:	2b12      	cmp	r3, #18
 80019f0:	d80d      	bhi.n	8001a0e <HAL_GPIO_Init+0x5a>
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d02b      	beq.n	8001a4e <HAL_GPIO_Init+0x9a>
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d804      	bhi.n	8001a04 <HAL_GPIO_Init+0x50>
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d031      	beq.n	8001a62 <HAL_GPIO_Init+0xae>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d01c      	beq.n	8001a3c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a02:	e048      	b.n	8001a96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d043      	beq.n	8001a90 <HAL_GPIO_Init+0xdc>
 8001a08:	2b11      	cmp	r3, #17
 8001a0a:	d01b      	beq.n	8001a44 <HAL_GPIO_Init+0x90>
          break;
 8001a0c:	e043      	b.n	8001a96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a0e:	4a89      	ldr	r2, [pc, #548]	; (8001c34 <HAL_GPIO_Init+0x280>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d026      	beq.n	8001a62 <HAL_GPIO_Init+0xae>
 8001a14:	4a87      	ldr	r2, [pc, #540]	; (8001c34 <HAL_GPIO_Init+0x280>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d806      	bhi.n	8001a28 <HAL_GPIO_Init+0x74>
 8001a1a:	4a87      	ldr	r2, [pc, #540]	; (8001c38 <HAL_GPIO_Init+0x284>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d020      	beq.n	8001a62 <HAL_GPIO_Init+0xae>
 8001a20:	4a86      	ldr	r2, [pc, #536]	; (8001c3c <HAL_GPIO_Init+0x288>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d01d      	beq.n	8001a62 <HAL_GPIO_Init+0xae>
          break;
 8001a26:	e036      	b.n	8001a96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a28:	4a85      	ldr	r2, [pc, #532]	; (8001c40 <HAL_GPIO_Init+0x28c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d019      	beq.n	8001a62 <HAL_GPIO_Init+0xae>
 8001a2e:	4a85      	ldr	r2, [pc, #532]	; (8001c44 <HAL_GPIO_Init+0x290>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d016      	beq.n	8001a62 <HAL_GPIO_Init+0xae>
 8001a34:	4a84      	ldr	r2, [pc, #528]	; (8001c48 <HAL_GPIO_Init+0x294>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <HAL_GPIO_Init+0xae>
          break;
 8001a3a:	e02c      	b.n	8001a96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	623b      	str	r3, [r7, #32]
          break;
 8001a42:	e028      	b.n	8001a96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	623b      	str	r3, [r7, #32]
          break;
 8001a4c:	e023      	b.n	8001a96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	3308      	adds	r3, #8
 8001a54:	623b      	str	r3, [r7, #32]
          break;
 8001a56:	e01e      	b.n	8001a96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	330c      	adds	r3, #12
 8001a5e:	623b      	str	r3, [r7, #32]
          break;
 8001a60:	e019      	b.n	8001a96 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e012      	b.n	8001a96 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d105      	bne.n	8001a84 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a78:	2308      	movs	r3, #8
 8001a7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	611a      	str	r2, [r3, #16]
          break;
 8001a82:	e008      	b.n	8001a96 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a84:	2308      	movs	r3, #8
 8001a86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	615a      	str	r2, [r3, #20]
          break;
 8001a8e:	e002      	b.n	8001a96 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
          break;
 8001a94:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2bff      	cmp	r3, #255	; 0xff
 8001a9a:	d801      	bhi.n	8001aa0 <HAL_GPIO_Init+0xec>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	e001      	b.n	8001aa4 <HAL_GPIO_Init+0xf0>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2bff      	cmp	r3, #255	; 0xff
 8001aaa:	d802      	bhi.n	8001ab2 <HAL_GPIO_Init+0xfe>
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	e002      	b.n	8001ab8 <HAL_GPIO_Init+0x104>
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	3b08      	subs	r3, #8
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	210f      	movs	r1, #15
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	401a      	ands	r2, r3
 8001aca:	6a39      	ldr	r1, [r7, #32]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8096 	beq.w	8001c12 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae6:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <HAL_GPIO_Init+0x298>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <HAL_GPIO_Init+0x298>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6193      	str	r3, [r2, #24]
 8001af2:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <HAL_GPIO_Init+0x298>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001afe:	4a54      	ldr	r2, [pc, #336]	; (8001c50 <HAL_GPIO_Init+0x29c>)
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	3302      	adds	r3, #2
 8001b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	220f      	movs	r2, #15
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4b      	ldr	r2, [pc, #300]	; (8001c54 <HAL_GPIO_Init+0x2a0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0x19e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4a      	ldr	r2, [pc, #296]	; (8001c58 <HAL_GPIO_Init+0x2a4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00d      	beq.n	8001b4e <HAL_GPIO_Init+0x19a>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a49      	ldr	r2, [pc, #292]	; (8001c5c <HAL_GPIO_Init+0x2a8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d007      	beq.n	8001b4a <HAL_GPIO_Init+0x196>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a48      	ldr	r2, [pc, #288]	; (8001c60 <HAL_GPIO_Init+0x2ac>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_GPIO_Init+0x192>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x1a0>
 8001b46:	2304      	movs	r3, #4
 8001b48:	e004      	b.n	8001b54 <HAL_GPIO_Init+0x1a0>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e002      	b.n	8001b54 <HAL_GPIO_Init+0x1a0>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_GPIO_Init+0x1a0>
 8001b52:	2300      	movs	r3, #0
 8001b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b56:	f002 0203 	and.w	r2, r2, #3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4093      	lsls	r3, r2
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b64:	493a      	ldr	r1, [pc, #232]	; (8001c50 <HAL_GPIO_Init+0x29c>)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b7e:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4938      	ldr	r1, [pc, #224]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
 8001b8a:	e006      	b.n	8001b9a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b8c:	4b35      	ldr	r3, [pc, #212]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	4933      	ldr	r1, [pc, #204]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	492e      	ldr	r1, [pc, #184]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
 8001bb2:	e006      	b.n	8001bc2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4929      	ldr	r1, [pc, #164]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bce:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	4924      	ldr	r1, [pc, #144]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
 8001bda:	e006      	b.n	8001bea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	491f      	ldr	r1, [pc, #124]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d006      	beq.n	8001c04 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	491a      	ldr	r1, [pc, #104]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	60cb      	str	r3, [r1, #12]
 8001c02:	e006      	b.n	8001c12 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	4915      	ldr	r1, [pc, #84]	; (8001c64 <HAL_GPIO_Init+0x2b0>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	3301      	adds	r3, #1
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f47f aed0 	bne.w	80019c8 <HAL_GPIO_Init+0x14>
  }
}
 8001c28:	bf00      	nop
 8001c2a:	372c      	adds	r7, #44	; 0x2c
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	10210000 	.word	0x10210000
 8001c38:	10110000 	.word	0x10110000
 8001c3c:	10120000 	.word	0x10120000
 8001c40:	10310000 	.word	0x10310000
 8001c44:	10320000 	.word	0x10320000
 8001c48:	10220000 	.word	0x10220000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40010800 	.word	0x40010800
 8001c58:	40010c00 	.word	0x40010c00
 8001c5c:	40011000 	.word	0x40011000
 8001c60:	40011400 	.word	0x40011400
 8001c64:	40010400 	.word	0x40010400

08001c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e11f      	b.n	8001eba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fb40 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2224      	movs	r2, #36	; 0x24
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ccc:	f000 ffe0 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8001cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4a7b      	ldr	r2, [pc, #492]	; (8001ec4 <HAL_I2C_Init+0x25c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d807      	bhi.n	8001cec <HAL_I2C_Init+0x84>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4a7a      	ldr	r2, [pc, #488]	; (8001ec8 <HAL_I2C_Init+0x260>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	bf94      	ite	ls
 8001ce4:	2301      	movls	r3, #1
 8001ce6:	2300      	movhi	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e006      	b.n	8001cfa <HAL_I2C_Init+0x92>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a77      	ldr	r2, [pc, #476]	; (8001ecc <HAL_I2C_Init+0x264>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	bf94      	ite	ls
 8001cf4:	2301      	movls	r3, #1
 8001cf6:	2300      	movhi	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0db      	b.n	8001eba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4a72      	ldr	r2, [pc, #456]	; (8001ed0 <HAL_I2C_Init+0x268>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0c9b      	lsrs	r3, r3, #18
 8001d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_I2C_Init+0x25c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d802      	bhi.n	8001d3c <HAL_I2C_Init+0xd4>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	e009      	b.n	8001d50 <HAL_I2C_Init+0xe8>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	4a63      	ldr	r2, [pc, #396]	; (8001ed4 <HAL_I2C_Init+0x26c>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	3301      	adds	r3, #1
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4956      	ldr	r1, [pc, #344]	; (8001ec4 <HAL_I2C_Init+0x25c>)
 8001d6c:	428b      	cmp	r3, r1
 8001d6e:	d80d      	bhi.n	8001d8c <HAL_I2C_Init+0x124>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1e59      	subs	r1, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	bf38      	it	cc
 8001d88:	2304      	movcc	r3, #4
 8001d8a:	e04f      	b.n	8001e2c <HAL_I2C_Init+0x1c4>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d111      	bne.n	8001db8 <HAL_I2C_Init+0x150>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1e58      	subs	r0, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	440b      	add	r3, r1
 8001da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001da6:	3301      	adds	r3, #1
 8001da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	e012      	b.n	8001dde <HAL_I2C_Init+0x176>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1e58      	subs	r0, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	0099      	lsls	r1, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_I2C_Init+0x17e>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e022      	b.n	8001e2c <HAL_I2C_Init+0x1c4>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10e      	bne.n	8001e0c <HAL_I2C_Init+0x1a4>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1e58      	subs	r0, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6859      	ldr	r1, [r3, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	440b      	add	r3, r1
 8001dfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e00:	3301      	adds	r3, #1
 8001e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0a:	e00f      	b.n	8001e2c <HAL_I2C_Init+0x1c4>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1e58      	subs	r0, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	0099      	lsls	r1, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	6809      	ldr	r1, [r1, #0]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69da      	ldr	r2, [r3, #28]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6911      	ldr	r1, [r2, #16]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68d2      	ldr	r2, [r2, #12]
 8001e66:	4311      	orrs	r1, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	000186a0 	.word	0x000186a0
 8001ec8:	001e847f 	.word	0x001e847f
 8001ecc:	003d08ff 	.word	0x003d08ff
 8001ed0:	431bde83 	.word	0x431bde83
 8001ed4:	10624dd3 	.word	0x10624dd3

08001ed8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	817b      	strh	r3, [r7, #10]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff fc4a 	bl	8001784 <HAL_GetTick>
 8001ef0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b20      	cmp	r3, #32
 8001efc:	f040 80e0 	bne.w	80020c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2319      	movs	r3, #25
 8001f06:	2201      	movs	r2, #1
 8001f08:	4970      	ldr	r1, [pc, #448]	; (80020cc <HAL_I2C_Master_Transmit+0x1f4>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f964 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
 8001f18:	e0d3      	b.n	80020c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_I2C_Master_Transmit+0x50>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e0cc      	b.n	80020c2 <HAL_I2C_Master_Transmit+0x1ea>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d007      	beq.n	8001f4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0201 	orr.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2221      	movs	r2, #33	; 0x21
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	893a      	ldrh	r2, [r7, #8]
 8001f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4a50      	ldr	r2, [pc, #320]	; (80020d0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f90:	8979      	ldrh	r1, [r7, #10]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	6a3a      	ldr	r2, [r7, #32]
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f000 f89c 	bl	80020d4 <I2C_MasterRequestWrite>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e08d      	b.n	80020c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fbc:	e066      	b.n	800208c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	6a39      	ldr	r1, [r7, #32]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f9de 	bl	8002384 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00d      	beq.n	8001fea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d107      	bne.n	8001fe6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06b      	b.n	80020c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b04      	cmp	r3, #4
 8002026:	d11b      	bne.n	8002060 <HAL_I2C_Master_Transmit+0x188>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202c:	2b00      	cmp	r3, #0
 800202e:	d017      	beq.n	8002060 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	6a39      	ldr	r1, [r7, #32]
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f9ce 	bl	8002406 <I2C_WaitOnBTFFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00d      	beq.n	800208c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	2b04      	cmp	r3, #4
 8002076:	d107      	bne.n	8002088 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002086:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e01a      	b.n	80020c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002090:	2b00      	cmp	r3, #0
 8002092:	d194      	bne.n	8001fbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	e000      	b.n	80020c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020c0:	2302      	movs	r3, #2
  }
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	00100002 	.word	0x00100002
 80020d0:	ffff0000 	.word	0xffff0000

080020d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	460b      	mov	r3, r1
 80020e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d006      	beq.n	80020fe <I2C_MasterRequestWrite+0x2a>
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d003      	beq.n	80020fe <I2C_MasterRequestWrite+0x2a>
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020fc:	d108      	bne.n	8002110 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	e00b      	b.n	8002128 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	2b12      	cmp	r3, #18
 8002116:	d107      	bne.n	8002128 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002126:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 f84f 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00d      	beq.n	800215c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800214e:	d103      	bne.n	8002158 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e035      	b.n	80021c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002164:	d108      	bne.n	8002178 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002166:	897b      	ldrh	r3, [r7, #10]
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002174:	611a      	str	r2, [r3, #16]
 8002176:	e01b      	b.n	80021b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002178:	897b      	ldrh	r3, [r7, #10]
 800217a:	11db      	asrs	r3, r3, #7
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f003 0306 	and.w	r3, r3, #6
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f063 030f 	orn	r3, r3, #15
 8002188:	b2da      	uxtb	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	490e      	ldr	r1, [pc, #56]	; (80021d0 <I2C_MasterRequestWrite+0xfc>)
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f875 	bl	8002286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e010      	b.n	80021c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021a6:	897b      	ldrh	r3, [r7, #10]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	4907      	ldr	r1, [pc, #28]	; (80021d4 <I2C_MasterRequestWrite+0x100>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f865 	bl	8002286 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	00010008 	.word	0x00010008
 80021d4:	00010002 	.word	0x00010002

080021d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e8:	e025      	b.n	8002236 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021f0:	d021      	beq.n	8002236 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f2:	f7ff fac7 	bl	8001784 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d302      	bcc.n	8002208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d116      	bne.n	8002236 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f043 0220 	orr.w	r2, r3, #32
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e023      	b.n	800227e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	0c1b      	lsrs	r3, r3, #16
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d10d      	bne.n	800225c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	4013      	ands	r3, r2
 800224c:	b29b      	uxth	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	bf0c      	ite	eq
 8002252:	2301      	moveq	r3, #1
 8002254:	2300      	movne	r3, #0
 8002256:	b2db      	uxtb	r3, r3
 8002258:	461a      	mov	r2, r3
 800225a:	e00c      	b.n	8002276 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	43da      	mvns	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4013      	ands	r3, r2
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	bf0c      	ite	eq
 800226e:	2301      	moveq	r3, #1
 8002270:	2300      	movne	r3, #0
 8002272:	b2db      	uxtb	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	429a      	cmp	r2, r3
 800227a:	d0b6      	beq.n	80021ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002294:	e051      	b.n	800233a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a4:	d123      	bne.n	80022ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2220      	movs	r2, #32
 80022ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f043 0204 	orr.w	r2, r3, #4
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e046      	b.n	800237c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022f4:	d021      	beq.n	800233a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f6:	f7ff fa45 	bl	8001784 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	d302      	bcc.n	800230c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d116      	bne.n	800233a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f043 0220 	orr.w	r2, r3, #32
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e020      	b.n	800237c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	0c1b      	lsrs	r3, r3, #16
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b01      	cmp	r3, #1
 8002342:	d10c      	bne.n	800235e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	43da      	mvns	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4013      	ands	r3, r2
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	bf14      	ite	ne
 8002356:	2301      	movne	r3, #1
 8002358:	2300      	moveq	r3, #0
 800235a:	b2db      	uxtb	r3, r3
 800235c:	e00b      	b.n	8002376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	43da      	mvns	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4013      	ands	r3, r2
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d18d      	bne.n	8002296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002390:	e02d      	b.n	80023ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f878 	bl	8002488 <I2C_IsAcknowledgeFailed>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e02d      	b.n	80023fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023a8:	d021      	beq.n	80023ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023aa:	f7ff f9eb 	bl	8001784 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d302      	bcc.n	80023c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d116      	bne.n	80023ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f043 0220 	orr.w	r2, r3, #32
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e007      	b.n	80023fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f8:	2b80      	cmp	r3, #128	; 0x80
 80023fa:	d1ca      	bne.n	8002392 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002412:	e02d      	b.n	8002470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f837 	bl	8002488 <I2C_IsAcknowledgeFailed>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e02d      	b.n	8002480 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800242a:	d021      	beq.n	8002470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242c:	f7ff f9aa 	bl	8001784 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d302      	bcc.n	8002442 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d116      	bne.n	8002470 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f043 0220 	orr.w	r2, r3, #32
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e007      	b.n	8002480 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b04      	cmp	r3, #4
 800247c:	d1ca      	bne.n	8002414 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249e:	d11b      	bne.n	80024d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f043 0204 	orr.w	r2, r3, #4
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e26c      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 8087 	beq.w	8002612 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002504:	4b92      	ldr	r3, [pc, #584]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b04      	cmp	r3, #4
 800250e:	d00c      	beq.n	800252a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002510:	4b8f      	ldr	r3, [pc, #572]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d112      	bne.n	8002542 <HAL_RCC_OscConfig+0x5e>
 800251c:	4b8c      	ldr	r3, [pc, #560]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002528:	d10b      	bne.n	8002542 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252a:	4b89      	ldr	r3, [pc, #548]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d06c      	beq.n	8002610 <HAL_RCC_OscConfig+0x12c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d168      	bne.n	8002610 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e246      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x76>
 800254c:	4b80      	ldr	r3, [pc, #512]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a7f      	ldr	r2, [pc, #508]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e02e      	b.n	80025b8 <HAL_RCC_OscConfig+0xd4>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0x98>
 8002562:	4b7b      	ldr	r3, [pc, #492]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a7a      	ldr	r2, [pc, #488]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b78      	ldr	r3, [pc, #480]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a77      	ldr	r2, [pc, #476]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e01d      	b.n	80025b8 <HAL_RCC_OscConfig+0xd4>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0xbc>
 8002586:	4b72      	ldr	r3, [pc, #456]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a71      	ldr	r2, [pc, #452]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 800258c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b6f      	ldr	r3, [pc, #444]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a6e      	ldr	r2, [pc, #440]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e00b      	b.n	80025b8 <HAL_RCC_OscConfig+0xd4>
 80025a0:	4b6b      	ldr	r3, [pc, #428]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a6a      	ldr	r2, [pc, #424]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b68      	ldr	r3, [pc, #416]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a67      	ldr	r2, [pc, #412]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff f8e0 	bl	8001784 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff f8dc 	bl	8001784 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1fa      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	4b5d      	ldr	r3, [pc, #372]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0xe4>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7ff f8cc 	bl	8001784 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7ff f8c8 	bl	8001784 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1e6      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	4b53      	ldr	r3, [pc, #332]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x10c>
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d063      	beq.n	80026e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800261e:	4b4c      	ldr	r3, [pc, #304]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800262a:	4b49      	ldr	r3, [pc, #292]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b08      	cmp	r3, #8
 8002634:	d11c      	bne.n	8002670 <HAL_RCC_OscConfig+0x18c>
 8002636:	4b46      	ldr	r3, [pc, #280]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d116      	bne.n	8002670 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	4b43      	ldr	r3, [pc, #268]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_RCC_OscConfig+0x176>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e1ba      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	4b3d      	ldr	r3, [pc, #244]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4939      	ldr	r1, [pc, #228]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266e:	e03a      	b.n	80026e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002678:	4b36      	ldr	r3, [pc, #216]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7ff f881 	bl	8001784 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002686:	f7ff f87d 	bl	8001784 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e19b      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a4:	4b2a      	ldr	r3, [pc, #168]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4927      	ldr	r1, [pc, #156]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]
 80026b8:	e015      	b.n	80026e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ba:	4b26      	ldr	r3, [pc, #152]	; (8002754 <HAL_RCC_OscConfig+0x270>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7ff f860 	bl	8001784 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c8:	f7ff f85c 	bl	8001784 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e17a      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d03a      	beq.n	8002768 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d019      	beq.n	800272e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <HAL_RCC_OscConfig+0x274>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002700:	f7ff f840 	bl	8001784 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002708:	f7ff f83c 	bl	8001784 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e15a      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <HAL_RCC_OscConfig+0x26c>)
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002726:	2001      	movs	r0, #1
 8002728:	f000 fac6 	bl	8002cb8 <RCC_Delay>
 800272c:	e01c      	b.n	8002768 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_RCC_OscConfig+0x274>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002734:	f7ff f826 	bl	8001784 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273a:	e00f      	b.n	800275c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff f822 	bl	8001784 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d908      	bls.n	800275c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e140      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
 8002754:	42420000 	.word	0x42420000
 8002758:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800275c:	4b9e      	ldr	r3, [pc, #632]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e9      	bne.n	800273c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80a6 	beq.w	80028c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277a:	4b97      	ldr	r3, [pc, #604]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10d      	bne.n	80027a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	4b94      	ldr	r3, [pc, #592]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4a93      	ldr	r2, [pc, #588]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 800278c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002790:	61d3      	str	r3, [r2, #28]
 8002792:	4b91      	ldr	r3, [pc, #580]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279e:	2301      	movs	r3, #1
 80027a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a2:	4b8e      	ldr	r3, [pc, #568]	; (80029dc <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d118      	bne.n	80027e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ae:	4b8b      	ldr	r3, [pc, #556]	; (80029dc <HAL_RCC_OscConfig+0x4f8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a8a      	ldr	r2, [pc, #552]	; (80029dc <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ba:	f7fe ffe3 	bl	8001784 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c2:	f7fe ffdf 	bl	8001784 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b64      	cmp	r3, #100	; 0x64
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e0fd      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	4b81      	ldr	r3, [pc, #516]	; (80029dc <HAL_RCC_OscConfig+0x4f8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x312>
 80027e8:	4b7b      	ldr	r3, [pc, #492]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4a7a      	ldr	r2, [pc, #488]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6213      	str	r3, [r2, #32]
 80027f4:	e02d      	b.n	8002852 <HAL_RCC_OscConfig+0x36e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10c      	bne.n	8002818 <HAL_RCC_OscConfig+0x334>
 80027fe:	4b76      	ldr	r3, [pc, #472]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a75      	ldr	r2, [pc, #468]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6213      	str	r3, [r2, #32]
 800280a:	4b73      	ldr	r3, [pc, #460]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4a72      	ldr	r2, [pc, #456]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	6213      	str	r3, [r2, #32]
 8002816:	e01c      	b.n	8002852 <HAL_RCC_OscConfig+0x36e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b05      	cmp	r3, #5
 800281e:	d10c      	bne.n	800283a <HAL_RCC_OscConfig+0x356>
 8002820:	4b6d      	ldr	r3, [pc, #436]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4a6c      	ldr	r2, [pc, #432]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6213      	str	r3, [r2, #32]
 800282c:	4b6a      	ldr	r3, [pc, #424]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4a69      	ldr	r2, [pc, #420]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6213      	str	r3, [r2, #32]
 8002838:	e00b      	b.n	8002852 <HAL_RCC_OscConfig+0x36e>
 800283a:	4b67      	ldr	r3, [pc, #412]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	4a66      	ldr	r2, [pc, #408]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	6213      	str	r3, [r2, #32]
 8002846:	4b64      	ldr	r3, [pc, #400]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	4a63      	ldr	r2, [pc, #396]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d015      	beq.n	8002886 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285a:	f7fe ff93 	bl	8001784 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe ff8f 	bl	8001784 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002870:	4293      	cmp	r3, r2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e0ab      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002878:	4b57      	ldr	r3, [pc, #348]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ee      	beq.n	8002862 <HAL_RCC_OscConfig+0x37e>
 8002884:	e014      	b.n	80028b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002886:	f7fe ff7d 	bl	8001784 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe ff79 	bl	8001784 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	; 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e095      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a4:	4b4c      	ldr	r3, [pc, #304]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1ee      	bne.n	800288e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d105      	bne.n	80028c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b6:	4b48      	ldr	r3, [pc, #288]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	4a47      	ldr	r2, [pc, #284]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8081 	beq.w	80029ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028cc:	4b42      	ldr	r3, [pc, #264]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d061      	beq.n	800299c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d146      	bne.n	800296e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e0:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <HAL_RCC_OscConfig+0x4fc>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7fe ff4d 	bl	8001784 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7fe ff49 	bl	8001784 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e067      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002900:	4b35      	ldr	r3, [pc, #212]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f0      	bne.n	80028ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002914:	d108      	bne.n	8002928 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002916:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	492d      	ldr	r1, [pc, #180]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002928:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a19      	ldr	r1, [r3, #32]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	430b      	orrs	r3, r1
 800293a:	4927      	ldr	r1, [pc, #156]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_OscConfig+0x4fc>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe ff1d 	bl	8001784 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe ff19 	bl	8001784 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e037      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x46a>
 800296c:	e02f      	b.n	80029ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <HAL_RCC_OscConfig+0x4fc>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe ff06 	bl	8001784 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe ff02 	bl	8001784 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e020      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x498>
 800299a:	e018      	b.n	80029ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e013      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029a8:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d106      	bne.n	80029ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d001      	beq.n	80029ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40007000 	.word	0x40007000
 80029e0:	42420060 	.word	0x42420060

080029e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0d0      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f8:	4b6a      	ldr	r3, [pc, #424]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d910      	bls.n	8002a28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b67      	ldr	r3, [pc, #412]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 0207 	bic.w	r2, r3, #7
 8002a0e:	4965      	ldr	r1, [pc, #404]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b63      	ldr	r3, [pc, #396]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0b8      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d020      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a40:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a58      	ldr	r2, [pc, #352]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a58:	4b53      	ldr	r3, [pc, #332]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a52      	ldr	r2, [pc, #328]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a64:	4b50      	ldr	r3, [pc, #320]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	494d      	ldr	r1, [pc, #308]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d040      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b47      	ldr	r3, [pc, #284]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d115      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e07f      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa2:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e073      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab2:	4b3d      	ldr	r3, [pc, #244]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e06b      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ac2:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f023 0203 	bic.w	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	4936      	ldr	r1, [pc, #216]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fe56 	bl	8001784 <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f7fe fe52 	bl	8001784 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e053      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 020c 	and.w	r2, r3, #12
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d1eb      	bne.n	8002adc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b04:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d210      	bcs.n	8002b34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 0207 	bic.w	r2, r3, #7
 8002b1a:	4922      	ldr	r1, [pc, #136]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e032      	b.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4916      	ldr	r1, [pc, #88]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	490e      	ldr	r1, [pc, #56]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b72:	f000 f821 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002b76:	4601      	mov	r1, r0
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <HAL_RCC_ClockConfig+0x1c8>)
 8002b84:	5cd3      	ldrb	r3, [r2, r3]
 8002b86:	fa21 f303 	lsr.w	r3, r1, r3
 8002b8a:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <HAL_RCC_ClockConfig+0x1cc>)
 8002b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_RCC_ClockConfig+0x1d0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fdb4 	bl	8001700 <HAL_InitTick>

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40022000 	.word	0x40022000
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	08004ff4 	.word	0x08004ff4
 8002bb0:	20000000 	.word	0x20000000
 8002bb4:	20000004 	.word	0x20000004

08002bb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb8:	b490      	push	{r4, r7}
 8002bba:	b08a      	sub	sp, #40	; 0x28
 8002bbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bbe:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bc0:	1d3c      	adds	r4, r7, #4
 8002bc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bc8:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002be2:	4b23      	ldr	r3, [pc, #140]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d002      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x46>
 8002bf6:	e02d      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bf8:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bfa:	623b      	str	r3, [r7, #32]
      break;
 8002bfc:	e02d      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	0c9b      	lsrs	r3, r3, #18
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d013      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	0c5b      	lsrs	r3, r3, #17
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	4a0f      	ldr	r2, [pc, #60]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c36:	fb02 f203 	mul.w	r2, r2, r3
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	e004      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	4a0c      	ldr	r2, [pc, #48]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c48:	fb02 f303 	mul.w	r3, r2, r3
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	623b      	str	r3, [r7, #32]
      break;
 8002c52:	e002      	b.n	8002c5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c54:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c56:	623b      	str	r3, [r7, #32]
      break;
 8002c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc90      	pop	{r4, r7}
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	08004fe0 	.word	0x08004fe0
 8002c6c:	08004ff0 	.word	0x08004ff0
 8002c70:	40021000 	.word	0x40021000
 8002c74:	007a1200 	.word	0x007a1200
 8002c78:	003d0900 	.word	0x003d0900

08002c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c80:	4b02      	ldr	r3, [pc, #8]	; (8002c8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c82:	681b      	ldr	r3, [r3, #0]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	20000000 	.word	0x20000000

08002c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c94:	f7ff fff2 	bl	8002c7c <HAL_RCC_GetHCLKFreq>
 8002c98:	4601      	mov	r1, r0
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	4a03      	ldr	r2, [pc, #12]	; (8002cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca6:	5cd3      	ldrb	r3, [r2, r3]
 8002ca8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	08005004 	.word	0x08005004

08002cb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <RCC_Delay+0x34>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <RCC_Delay+0x38>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	0a5b      	lsrs	r3, r3, #9
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cd4:	bf00      	nop
  }
  while (Delay --);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1e5a      	subs	r2, r3, #1
 8002cda:	60fa      	str	r2, [r7, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f9      	bne.n	8002cd4 <RCC_Delay+0x1c>
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000000 	.word	0x20000000
 8002cf0:	10624dd3 	.word	0x10624dd3

08002cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e01d      	b.n	8002d42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fe fb38 	bl	8001390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f000 fb1a 	bl	800336c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e01d      	b.n	8002d98 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d106      	bne.n	8002d76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f815 	bl	8002da0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3304      	adds	r3, #4
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f000 faef 	bl	800336c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	6839      	ldr	r1, [r7, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fd50 	bl	800386c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a10      	ldr	r2, [pc, #64]	; (8002e14 <HAL_TIM_PWM_Start+0x60>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d107      	bne.n	8002de6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b06      	cmp	r3, #6
 8002df6:	d007      	beq.n	8002e08 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40012c00 	.word	0x40012c00

08002e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d122      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d11b      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0202 	mvn.w	r2, #2
 8002e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa6a 	bl	8003334 <HAL_TIM_IC_CaptureCallback>
 8002e60:	e005      	b.n	8002e6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fa5d 	bl	8003322 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fa6c 	bl	8003346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d122      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d11b      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0204 	mvn.w	r2, #4
 8002e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fa40 	bl	8003334 <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa33 	bl	8003322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 fa42 	bl	8003346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d122      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d11b      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0208 	mvn.w	r2, #8
 8002eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa16 	bl	8003334 <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fa09 	bl	8003322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fa18 	bl	8003346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d122      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d11b      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0210 	mvn.w	r2, #16
 8002f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2208      	movs	r2, #8
 8002f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f9ec 	bl	8003334 <HAL_TIM_IC_CaptureCallback>
 8002f5c:	e005      	b.n	8002f6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f9df 	bl	8003322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f9ee 	bl	8003346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d10e      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d107      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0201 	mvn.w	r2, #1
 8002f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd feae 	bl	8000cf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa6:	2b80      	cmp	r3, #128	; 0x80
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb4:	2b80      	cmp	r3, #128	; 0x80
 8002fb6:	d107      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fd3e 	bl	8003a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b40      	cmp	r3, #64	; 0x40
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe0:	2b40      	cmp	r3, #64	; 0x40
 8002fe2:	d107      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f9b2 	bl	8003358 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d10e      	bne.n	8003020 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b20      	cmp	r3, #32
 800300e:	d107      	bne.n	8003020 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0220 	mvn.w	r2, #32
 8003018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fd09 	bl	8003a32 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800303e:	2302      	movs	r3, #2
 8003040:	e0b4      	b.n	80031ac <HAL_TIM_PWM_ConfigChannel+0x184>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b0c      	cmp	r3, #12
 8003056:	f200 809f 	bhi.w	8003198 <HAL_TIM_PWM_ConfigChannel+0x170>
 800305a:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003095 	.word	0x08003095
 8003064:	08003199 	.word	0x08003199
 8003068:	08003199 	.word	0x08003199
 800306c:	08003199 	.word	0x08003199
 8003070:	080030d5 	.word	0x080030d5
 8003074:	08003199 	.word	0x08003199
 8003078:	08003199 	.word	0x08003199
 800307c:	08003199 	.word	0x08003199
 8003080:	08003117 	.word	0x08003117
 8003084:	08003199 	.word	0x08003199
 8003088:	08003199 	.word	0x08003199
 800308c:	08003199 	.word	0x08003199
 8003090:	08003157 	.word	0x08003157
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f9c8 	bl	8003430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0208 	orr.w	r2, r2, #8
 80030ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0204 	bic.w	r2, r2, #4
 80030be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6999      	ldr	r1, [r3, #24]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	619a      	str	r2, [r3, #24]
      break;
 80030d2:	e062      	b.n	800319a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fa0e 	bl	80034fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6999      	ldr	r1, [r3, #24]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	021a      	lsls	r2, r3, #8
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	619a      	str	r2, [r3, #24]
      break;
 8003114:	e041      	b.n	800319a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fa57 	bl	80035d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0208 	orr.w	r2, r2, #8
 8003130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0204 	bic.w	r2, r2, #4
 8003140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	69d9      	ldr	r1, [r3, #28]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	61da      	str	r2, [r3, #28]
      break;
 8003154:	e021      	b.n	800319a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	4618      	mov	r0, r3
 800315e:	f000 faa1 	bl	80036a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69d9      	ldr	r1, [r3, #28]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	021a      	lsls	r2, r3, #8
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	61da      	str	r2, [r3, #28]
      break;
 8003196:	e000      	b.n	800319a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003198:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_TIM_ConfigClockSource+0x18>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e0a6      	b.n	800331a <HAL_TIM_ConfigClockSource+0x166>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	d067      	beq.n	80032d4 <HAL_TIM_ConfigClockSource+0x120>
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d80b      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x6c>
 8003208:	2b10      	cmp	r3, #16
 800320a:	d073      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x140>
 800320c:	2b10      	cmp	r3, #16
 800320e:	d802      	bhi.n	8003216 <HAL_TIM_ConfigClockSource+0x62>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d06f      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003214:	e078      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003216:	2b20      	cmp	r3, #32
 8003218:	d06c      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x140>
 800321a:	2b30      	cmp	r3, #48	; 0x30
 800321c:	d06a      	beq.n	80032f4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800321e:	e073      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003220:	2b70      	cmp	r3, #112	; 0x70
 8003222:	d00d      	beq.n	8003240 <HAL_TIM_ConfigClockSource+0x8c>
 8003224:	2b70      	cmp	r3, #112	; 0x70
 8003226:	d804      	bhi.n	8003232 <HAL_TIM_ConfigClockSource+0x7e>
 8003228:	2b50      	cmp	r3, #80	; 0x50
 800322a:	d033      	beq.n	8003294 <HAL_TIM_ConfigClockSource+0xe0>
 800322c:	2b60      	cmp	r3, #96	; 0x60
 800322e:	d041      	beq.n	80032b4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003230:	e06a      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003236:	d066      	beq.n	8003306 <HAL_TIM_ConfigClockSource+0x152>
 8003238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323c:	d017      	beq.n	800326e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800323e:	e063      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6899      	ldr	r1, [r3, #8]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f000 faed 	bl	800382e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003262:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	609a      	str	r2, [r3, #8]
      break;
 800326c:	e04c      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6899      	ldr	r1, [r3, #8]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f000 fad6 	bl	800382e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003290:	609a      	str	r2, [r3, #8]
      break;
 8003292:	e039      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	461a      	mov	r2, r3
 80032a2:	f000 fa4d 	bl	8003740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2150      	movs	r1, #80	; 0x50
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 faa4 	bl	80037fa <TIM_ITRx_SetConfig>
      break;
 80032b2:	e029      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	461a      	mov	r2, r3
 80032c2:	f000 fa6b 	bl	800379c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2160      	movs	r1, #96	; 0x60
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fa94 	bl	80037fa <TIM_ITRx_SetConfig>
      break;
 80032d2:	e019      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	461a      	mov	r2, r3
 80032e2:	f000 fa2d 	bl	8003740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2140      	movs	r1, #64	; 0x40
 80032ec:	4618      	mov	r0, r3
 80032ee:	f000 fa84 	bl	80037fa <TIM_ITRx_SetConfig>
      break;
 80032f2:	e009      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f000 fa7b 	bl	80037fa <TIM_ITRx_SetConfig>
      break;
 8003304:	e000      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003306:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
	...

0800336c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a29      	ldr	r2, [pc, #164]	; (8003424 <TIM_Base_SetConfig+0xb8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00b      	beq.n	800339c <TIM_Base_SetConfig+0x30>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338a:	d007      	beq.n	800339c <TIM_Base_SetConfig+0x30>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a26      	ldr	r2, [pc, #152]	; (8003428 <TIM_Base_SetConfig+0xbc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x30>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a25      	ldr	r2, [pc, #148]	; (800342c <TIM_Base_SetConfig+0xc0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <TIM_Base_SetConfig+0xb8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00b      	beq.n	80033ce <TIM_Base_SetConfig+0x62>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033bc:	d007      	beq.n	80033ce <TIM_Base_SetConfig+0x62>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a19      	ldr	r2, [pc, #100]	; (8003428 <TIM_Base_SetConfig+0xbc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d003      	beq.n	80033ce <TIM_Base_SetConfig+0x62>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a18      	ldr	r2, [pc, #96]	; (800342c <TIM_Base_SetConfig+0xc0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d108      	bne.n	80033e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a07      	ldr	r2, [pc, #28]	; (8003424 <TIM_Base_SetConfig+0xb8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d103      	bne.n	8003414 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	615a      	str	r2, [r3, #20]
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800

08003430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f023 0201 	bic.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f023 0302 	bic.w	r3, r3, #2
 8003478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <TIM_OC1_SetConfig+0xc8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d10c      	bne.n	80034a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f023 0308 	bic.w	r3, r3, #8
 8003492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f023 0304 	bic.w	r3, r3, #4
 80034a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <TIM_OC1_SetConfig+0xc8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d111      	bne.n	80034d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	621a      	str	r2, [r3, #32]
}
 80034ec:	bf00      	nop
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40012c00 	.word	0x40012c00

080034fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f023 0210 	bic.w	r2, r3, #16
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	021b      	lsls	r3, r3, #8
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f023 0320 	bic.w	r3, r3, #32
 8003546:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <TIM_OC2_SetConfig+0xd0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d10d      	bne.n	8003578 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a14      	ldr	r2, [pc, #80]	; (80035cc <TIM_OC2_SetConfig+0xd0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d113      	bne.n	80035a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800358e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	621a      	str	r2, [r3, #32]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr
 80035cc:	40012c00 	.word	0x40012c00

080035d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a1d      	ldr	r2, [pc, #116]	; (80036a0 <TIM_OC3_SetConfig+0xd0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d10d      	bne.n	800364a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <TIM_OC3_SetConfig+0xd0>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d113      	bne.n	800367a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	621a      	str	r2, [r3, #32]
}
 8003694:	bf00      	nop
 8003696:	371c      	adds	r7, #28
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40012c00 	.word	0x40012c00

080036a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	031b      	lsls	r3, r3, #12
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a0f      	ldr	r2, [pc, #60]	; (800373c <TIM_OC4_SetConfig+0x98>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d109      	bne.n	8003718 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800370a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	019b      	lsls	r3, r3, #6
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	621a      	str	r2, [r3, #32]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	40012c00 	.word	0x40012c00

08003740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f023 0201 	bic.w	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800376a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f023 030a 	bic.w	r3, r3, #10
 800377c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f023 0210 	bic.w	r2, r3, #16
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	031b      	lsls	r3, r3, #12
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	621a      	str	r2, [r3, #32]
}
 80037f0:	bf00      	nop
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr

080037fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 8003802:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003810:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	f043 0307 	orr.w	r3, r3, #7
 800381c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	609a      	str	r2, [r3, #8]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800382e:	b480      	push	{r7}
 8003830:	b087      	sub	sp, #28
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003848:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	021a      	lsls	r2, r3, #8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	431a      	orrs	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	4313      	orrs	r3, r2
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	609a      	str	r2, [r3, #8]
}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f003 031f 	and.w	r3, r3, #31
 800387e:	2201      	movs	r2, #1
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1a      	ldr	r2, [r3, #32]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	43db      	mvns	r3, r3
 800388e:	401a      	ands	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	431a      	orrs	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2204      	movs	r2, #4
 80038c4:	6839      	ldr	r1, [r7, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 f8c5 	bl	8003a56 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d007      	beq.n	80038fe <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800391c:	2302      	movs	r3, #2
 800391e:	e032      	b.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003958:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4313      	orrs	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e03d      	b.n	8003a28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b087      	sub	sp, #28
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2204      	movs	r2, #4
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1a      	ldr	r2, [r3, #32]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	401a      	ands	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	621a      	str	r2, [r3, #32]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr
	...

08003aa0 <__errno>:
 8003aa0:	4b01      	ldr	r3, [pc, #4]	; (8003aa8 <__errno+0x8>)
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	2000000c 	.word	0x2000000c

08003aac <__libc_init_array>:
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	2500      	movs	r5, #0
 8003ab0:	4e0c      	ldr	r6, [pc, #48]	; (8003ae4 <__libc_init_array+0x38>)
 8003ab2:	4c0d      	ldr	r4, [pc, #52]	; (8003ae8 <__libc_init_array+0x3c>)
 8003ab4:	1ba4      	subs	r4, r4, r6
 8003ab6:	10a4      	asrs	r4, r4, #2
 8003ab8:	42a5      	cmp	r5, r4
 8003aba:	d109      	bne.n	8003ad0 <__libc_init_array+0x24>
 8003abc:	f001 fa74 	bl	8004fa8 <_init>
 8003ac0:	2500      	movs	r5, #0
 8003ac2:	4e0a      	ldr	r6, [pc, #40]	; (8003aec <__libc_init_array+0x40>)
 8003ac4:	4c0a      	ldr	r4, [pc, #40]	; (8003af0 <__libc_init_array+0x44>)
 8003ac6:	1ba4      	subs	r4, r4, r6
 8003ac8:	10a4      	asrs	r4, r4, #2
 8003aca:	42a5      	cmp	r5, r4
 8003acc:	d105      	bne.n	8003ada <__libc_init_array+0x2e>
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ad4:	4798      	blx	r3
 8003ad6:	3501      	adds	r5, #1
 8003ad8:	e7ee      	b.n	8003ab8 <__libc_init_array+0xc>
 8003ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ade:	4798      	blx	r3
 8003ae0:	3501      	adds	r5, #1
 8003ae2:	e7f2      	b.n	8003aca <__libc_init_array+0x1e>
 8003ae4:	08005440 	.word	0x08005440
 8003ae8:	08005440 	.word	0x08005440
 8003aec:	08005440 	.word	0x08005440
 8003af0:	08005444 	.word	0x08005444

08003af4 <memset>:
 8003af4:	4603      	mov	r3, r0
 8003af6:	4402      	add	r2, r0
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d100      	bne.n	8003afe <memset+0xa>
 8003afc:	4770      	bx	lr
 8003afe:	f803 1b01 	strb.w	r1, [r3], #1
 8003b02:	e7f9      	b.n	8003af8 <memset+0x4>

08003b04 <_puts_r>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	460e      	mov	r6, r1
 8003b08:	4605      	mov	r5, r0
 8003b0a:	b118      	cbz	r0, 8003b14 <_puts_r+0x10>
 8003b0c:	6983      	ldr	r3, [r0, #24]
 8003b0e:	b90b      	cbnz	r3, 8003b14 <_puts_r+0x10>
 8003b10:	f000 fa0c 	bl	8003f2c <__sinit>
 8003b14:	69ab      	ldr	r3, [r5, #24]
 8003b16:	68ac      	ldr	r4, [r5, #8]
 8003b18:	b913      	cbnz	r3, 8003b20 <_puts_r+0x1c>
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	f000 fa06 	bl	8003f2c <__sinit>
 8003b20:	4b23      	ldr	r3, [pc, #140]	; (8003bb0 <_puts_r+0xac>)
 8003b22:	429c      	cmp	r4, r3
 8003b24:	d117      	bne.n	8003b56 <_puts_r+0x52>
 8003b26:	686c      	ldr	r4, [r5, #4]
 8003b28:	89a3      	ldrh	r3, [r4, #12]
 8003b2a:	071b      	lsls	r3, r3, #28
 8003b2c:	d51d      	bpl.n	8003b6a <_puts_r+0x66>
 8003b2e:	6923      	ldr	r3, [r4, #16]
 8003b30:	b1db      	cbz	r3, 8003b6a <_puts_r+0x66>
 8003b32:	3e01      	subs	r6, #1
 8003b34:	68a3      	ldr	r3, [r4, #8]
 8003b36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	60a3      	str	r3, [r4, #8]
 8003b3e:	b9e9      	cbnz	r1, 8003b7c <_puts_r+0x78>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	da2e      	bge.n	8003ba2 <_puts_r+0x9e>
 8003b44:	4622      	mov	r2, r4
 8003b46:	210a      	movs	r1, #10
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f000 f83f 	bl	8003bcc <__swbuf_r>
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d011      	beq.n	8003b76 <_puts_r+0x72>
 8003b52:	200a      	movs	r0, #10
 8003b54:	e011      	b.n	8003b7a <_puts_r+0x76>
 8003b56:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <_puts_r+0xb0>)
 8003b58:	429c      	cmp	r4, r3
 8003b5a:	d101      	bne.n	8003b60 <_puts_r+0x5c>
 8003b5c:	68ac      	ldr	r4, [r5, #8]
 8003b5e:	e7e3      	b.n	8003b28 <_puts_r+0x24>
 8003b60:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <_puts_r+0xb4>)
 8003b62:	429c      	cmp	r4, r3
 8003b64:	bf08      	it	eq
 8003b66:	68ec      	ldreq	r4, [r5, #12]
 8003b68:	e7de      	b.n	8003b28 <_puts_r+0x24>
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	f000 f87f 	bl	8003c70 <__swsetup_r>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d0dd      	beq.n	8003b32 <_puts_r+0x2e>
 8003b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	da04      	bge.n	8003b8a <_puts_r+0x86>
 8003b80:	69a2      	ldr	r2, [r4, #24]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	dc06      	bgt.n	8003b94 <_puts_r+0x90>
 8003b86:	290a      	cmp	r1, #10
 8003b88:	d004      	beq.n	8003b94 <_puts_r+0x90>
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	6022      	str	r2, [r4, #0]
 8003b90:	7019      	strb	r1, [r3, #0]
 8003b92:	e7cf      	b.n	8003b34 <_puts_r+0x30>
 8003b94:	4622      	mov	r2, r4
 8003b96:	4628      	mov	r0, r5
 8003b98:	f000 f818 	bl	8003bcc <__swbuf_r>
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d1c9      	bne.n	8003b34 <_puts_r+0x30>
 8003ba0:	e7e9      	b.n	8003b76 <_puts_r+0x72>
 8003ba2:	200a      	movs	r0, #10
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	6022      	str	r2, [r4, #0]
 8003baa:	7018      	strb	r0, [r3, #0]
 8003bac:	e7e5      	b.n	8003b7a <_puts_r+0x76>
 8003bae:	bf00      	nop
 8003bb0:	08005030 	.word	0x08005030
 8003bb4:	08005050 	.word	0x08005050
 8003bb8:	08005010 	.word	0x08005010

08003bbc <puts>:
 8003bbc:	4b02      	ldr	r3, [pc, #8]	; (8003bc8 <puts+0xc>)
 8003bbe:	4601      	mov	r1, r0
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	f7ff bf9f 	b.w	8003b04 <_puts_r>
 8003bc6:	bf00      	nop
 8003bc8:	2000000c 	.word	0x2000000c

08003bcc <__swbuf_r>:
 8003bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bce:	460e      	mov	r6, r1
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	b118      	cbz	r0, 8003bde <__swbuf_r+0x12>
 8003bd6:	6983      	ldr	r3, [r0, #24]
 8003bd8:	b90b      	cbnz	r3, 8003bde <__swbuf_r+0x12>
 8003bda:	f000 f9a7 	bl	8003f2c <__sinit>
 8003bde:	4b21      	ldr	r3, [pc, #132]	; (8003c64 <__swbuf_r+0x98>)
 8003be0:	429c      	cmp	r4, r3
 8003be2:	d12a      	bne.n	8003c3a <__swbuf_r+0x6e>
 8003be4:	686c      	ldr	r4, [r5, #4]
 8003be6:	69a3      	ldr	r3, [r4, #24]
 8003be8:	60a3      	str	r3, [r4, #8]
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	071a      	lsls	r2, r3, #28
 8003bee:	d52e      	bpl.n	8003c4e <__swbuf_r+0x82>
 8003bf0:	6923      	ldr	r3, [r4, #16]
 8003bf2:	b363      	cbz	r3, 8003c4e <__swbuf_r+0x82>
 8003bf4:	6923      	ldr	r3, [r4, #16]
 8003bf6:	6820      	ldr	r0, [r4, #0]
 8003bf8:	b2f6      	uxtb	r6, r6
 8003bfa:	1ac0      	subs	r0, r0, r3
 8003bfc:	6963      	ldr	r3, [r4, #20]
 8003bfe:	4637      	mov	r7, r6
 8003c00:	4283      	cmp	r3, r0
 8003c02:	dc04      	bgt.n	8003c0e <__swbuf_r+0x42>
 8003c04:	4621      	mov	r1, r4
 8003c06:	4628      	mov	r0, r5
 8003c08:	f000 f926 	bl	8003e58 <_fflush_r>
 8003c0c:	bb28      	cbnz	r0, 8003c5a <__swbuf_r+0x8e>
 8003c0e:	68a3      	ldr	r3, [r4, #8]
 8003c10:	3001      	adds	r0, #1
 8003c12:	3b01      	subs	r3, #1
 8003c14:	60a3      	str	r3, [r4, #8]
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	6022      	str	r2, [r4, #0]
 8003c1c:	701e      	strb	r6, [r3, #0]
 8003c1e:	6963      	ldr	r3, [r4, #20]
 8003c20:	4283      	cmp	r3, r0
 8003c22:	d004      	beq.n	8003c2e <__swbuf_r+0x62>
 8003c24:	89a3      	ldrh	r3, [r4, #12]
 8003c26:	07db      	lsls	r3, r3, #31
 8003c28:	d519      	bpl.n	8003c5e <__swbuf_r+0x92>
 8003c2a:	2e0a      	cmp	r6, #10
 8003c2c:	d117      	bne.n	8003c5e <__swbuf_r+0x92>
 8003c2e:	4621      	mov	r1, r4
 8003c30:	4628      	mov	r0, r5
 8003c32:	f000 f911 	bl	8003e58 <_fflush_r>
 8003c36:	b190      	cbz	r0, 8003c5e <__swbuf_r+0x92>
 8003c38:	e00f      	b.n	8003c5a <__swbuf_r+0x8e>
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <__swbuf_r+0x9c>)
 8003c3c:	429c      	cmp	r4, r3
 8003c3e:	d101      	bne.n	8003c44 <__swbuf_r+0x78>
 8003c40:	68ac      	ldr	r4, [r5, #8]
 8003c42:	e7d0      	b.n	8003be6 <__swbuf_r+0x1a>
 8003c44:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <__swbuf_r+0xa0>)
 8003c46:	429c      	cmp	r4, r3
 8003c48:	bf08      	it	eq
 8003c4a:	68ec      	ldreq	r4, [r5, #12]
 8003c4c:	e7cb      	b.n	8003be6 <__swbuf_r+0x1a>
 8003c4e:	4621      	mov	r1, r4
 8003c50:	4628      	mov	r0, r5
 8003c52:	f000 f80d 	bl	8003c70 <__swsetup_r>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d0cc      	beq.n	8003bf4 <__swbuf_r+0x28>
 8003c5a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003c5e:	4638      	mov	r0, r7
 8003c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c62:	bf00      	nop
 8003c64:	08005030 	.word	0x08005030
 8003c68:	08005050 	.word	0x08005050
 8003c6c:	08005010 	.word	0x08005010

08003c70 <__swsetup_r>:
 8003c70:	4b32      	ldr	r3, [pc, #200]	; (8003d3c <__swsetup_r+0xcc>)
 8003c72:	b570      	push	{r4, r5, r6, lr}
 8003c74:	681d      	ldr	r5, [r3, #0]
 8003c76:	4606      	mov	r6, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	b125      	cbz	r5, 8003c86 <__swsetup_r+0x16>
 8003c7c:	69ab      	ldr	r3, [r5, #24]
 8003c7e:	b913      	cbnz	r3, 8003c86 <__swsetup_r+0x16>
 8003c80:	4628      	mov	r0, r5
 8003c82:	f000 f953 	bl	8003f2c <__sinit>
 8003c86:	4b2e      	ldr	r3, [pc, #184]	; (8003d40 <__swsetup_r+0xd0>)
 8003c88:	429c      	cmp	r4, r3
 8003c8a:	d10f      	bne.n	8003cac <__swsetup_r+0x3c>
 8003c8c:	686c      	ldr	r4, [r5, #4]
 8003c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	0715      	lsls	r5, r2, #28
 8003c96:	d42c      	bmi.n	8003cf2 <__swsetup_r+0x82>
 8003c98:	06d0      	lsls	r0, r2, #27
 8003c9a:	d411      	bmi.n	8003cc0 <__swsetup_r+0x50>
 8003c9c:	2209      	movs	r2, #9
 8003c9e:	6032      	str	r2, [r6, #0]
 8003ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca4:	81a3      	strh	r3, [r4, #12]
 8003ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003caa:	e03e      	b.n	8003d2a <__swsetup_r+0xba>
 8003cac:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <__swsetup_r+0xd4>)
 8003cae:	429c      	cmp	r4, r3
 8003cb0:	d101      	bne.n	8003cb6 <__swsetup_r+0x46>
 8003cb2:	68ac      	ldr	r4, [r5, #8]
 8003cb4:	e7eb      	b.n	8003c8e <__swsetup_r+0x1e>
 8003cb6:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <__swsetup_r+0xd8>)
 8003cb8:	429c      	cmp	r4, r3
 8003cba:	bf08      	it	eq
 8003cbc:	68ec      	ldreq	r4, [r5, #12]
 8003cbe:	e7e6      	b.n	8003c8e <__swsetup_r+0x1e>
 8003cc0:	0751      	lsls	r1, r2, #29
 8003cc2:	d512      	bpl.n	8003cea <__swsetup_r+0x7a>
 8003cc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cc6:	b141      	cbz	r1, 8003cda <__swsetup_r+0x6a>
 8003cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ccc:	4299      	cmp	r1, r3
 8003cce:	d002      	beq.n	8003cd6 <__swsetup_r+0x66>
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	f000 fa19 	bl	8004108 <_free_r>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	6363      	str	r3, [r4, #52]	; 0x34
 8003cda:	89a3      	ldrh	r3, [r4, #12]
 8003cdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ce0:	81a3      	strh	r3, [r4, #12]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	6063      	str	r3, [r4, #4]
 8003ce6:	6923      	ldr	r3, [r4, #16]
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	89a3      	ldrh	r3, [r4, #12]
 8003cec:	f043 0308 	orr.w	r3, r3, #8
 8003cf0:	81a3      	strh	r3, [r4, #12]
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	b94b      	cbnz	r3, 8003d0a <__swsetup_r+0x9a>
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d00:	d003      	beq.n	8003d0a <__swsetup_r+0x9a>
 8003d02:	4621      	mov	r1, r4
 8003d04:	4630      	mov	r0, r6
 8003d06:	f000 f9bf 	bl	8004088 <__smakebuf_r>
 8003d0a:	89a2      	ldrh	r2, [r4, #12]
 8003d0c:	f012 0301 	ands.w	r3, r2, #1
 8003d10:	d00c      	beq.n	8003d2c <__swsetup_r+0xbc>
 8003d12:	2300      	movs	r3, #0
 8003d14:	60a3      	str	r3, [r4, #8]
 8003d16:	6963      	ldr	r3, [r4, #20]
 8003d18:	425b      	negs	r3, r3
 8003d1a:	61a3      	str	r3, [r4, #24]
 8003d1c:	6923      	ldr	r3, [r4, #16]
 8003d1e:	b953      	cbnz	r3, 8003d36 <__swsetup_r+0xc6>
 8003d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003d28:	d1ba      	bne.n	8003ca0 <__swsetup_r+0x30>
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	0792      	lsls	r2, r2, #30
 8003d2e:	bf58      	it	pl
 8003d30:	6963      	ldrpl	r3, [r4, #20]
 8003d32:	60a3      	str	r3, [r4, #8]
 8003d34:	e7f2      	b.n	8003d1c <__swsetup_r+0xac>
 8003d36:	2000      	movs	r0, #0
 8003d38:	e7f7      	b.n	8003d2a <__swsetup_r+0xba>
 8003d3a:	bf00      	nop
 8003d3c:	2000000c 	.word	0x2000000c
 8003d40:	08005030 	.word	0x08005030
 8003d44:	08005050 	.word	0x08005050
 8003d48:	08005010 	.word	0x08005010

08003d4c <__sflush_r>:
 8003d4c:	898a      	ldrh	r2, [r1, #12]
 8003d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d52:	4605      	mov	r5, r0
 8003d54:	0710      	lsls	r0, r2, #28
 8003d56:	460c      	mov	r4, r1
 8003d58:	d458      	bmi.n	8003e0c <__sflush_r+0xc0>
 8003d5a:	684b      	ldr	r3, [r1, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	dc05      	bgt.n	8003d6c <__sflush_r+0x20>
 8003d60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	dc02      	bgt.n	8003d6c <__sflush_r+0x20>
 8003d66:	2000      	movs	r0, #0
 8003d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d6e:	2e00      	cmp	r6, #0
 8003d70:	d0f9      	beq.n	8003d66 <__sflush_r+0x1a>
 8003d72:	2300      	movs	r3, #0
 8003d74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d78:	682f      	ldr	r7, [r5, #0]
 8003d7a:	6a21      	ldr	r1, [r4, #32]
 8003d7c:	602b      	str	r3, [r5, #0]
 8003d7e:	d032      	beq.n	8003de6 <__sflush_r+0x9a>
 8003d80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	075a      	lsls	r2, r3, #29
 8003d86:	d505      	bpl.n	8003d94 <__sflush_r+0x48>
 8003d88:	6863      	ldr	r3, [r4, #4]
 8003d8a:	1ac0      	subs	r0, r0, r3
 8003d8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d8e:	b10b      	cbz	r3, 8003d94 <__sflush_r+0x48>
 8003d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d92:	1ac0      	subs	r0, r0, r3
 8003d94:	2300      	movs	r3, #0
 8003d96:	4602      	mov	r2, r0
 8003d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d9a:	6a21      	ldr	r1, [r4, #32]
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	47b0      	blx	r6
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	d106      	bne.n	8003db4 <__sflush_r+0x68>
 8003da6:	6829      	ldr	r1, [r5, #0]
 8003da8:	291d      	cmp	r1, #29
 8003daa:	d848      	bhi.n	8003e3e <__sflush_r+0xf2>
 8003dac:	4a29      	ldr	r2, [pc, #164]	; (8003e54 <__sflush_r+0x108>)
 8003dae:	40ca      	lsrs	r2, r1
 8003db0:	07d6      	lsls	r6, r2, #31
 8003db2:	d544      	bpl.n	8003e3e <__sflush_r+0xf2>
 8003db4:	2200      	movs	r2, #0
 8003db6:	6062      	str	r2, [r4, #4]
 8003db8:	6922      	ldr	r2, [r4, #16]
 8003dba:	04d9      	lsls	r1, r3, #19
 8003dbc:	6022      	str	r2, [r4, #0]
 8003dbe:	d504      	bpl.n	8003dca <__sflush_r+0x7e>
 8003dc0:	1c42      	adds	r2, r0, #1
 8003dc2:	d101      	bne.n	8003dc8 <__sflush_r+0x7c>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	b903      	cbnz	r3, 8003dca <__sflush_r+0x7e>
 8003dc8:	6560      	str	r0, [r4, #84]	; 0x54
 8003dca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dcc:	602f      	str	r7, [r5, #0]
 8003dce:	2900      	cmp	r1, #0
 8003dd0:	d0c9      	beq.n	8003d66 <__sflush_r+0x1a>
 8003dd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dd6:	4299      	cmp	r1, r3
 8003dd8:	d002      	beq.n	8003de0 <__sflush_r+0x94>
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f000 f994 	bl	8004108 <_free_r>
 8003de0:	2000      	movs	r0, #0
 8003de2:	6360      	str	r0, [r4, #52]	; 0x34
 8003de4:	e7c0      	b.n	8003d68 <__sflush_r+0x1c>
 8003de6:	2301      	movs	r3, #1
 8003de8:	4628      	mov	r0, r5
 8003dea:	47b0      	blx	r6
 8003dec:	1c41      	adds	r1, r0, #1
 8003dee:	d1c8      	bne.n	8003d82 <__sflush_r+0x36>
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0c5      	beq.n	8003d82 <__sflush_r+0x36>
 8003df6:	2b1d      	cmp	r3, #29
 8003df8:	d001      	beq.n	8003dfe <__sflush_r+0xb2>
 8003dfa:	2b16      	cmp	r3, #22
 8003dfc:	d101      	bne.n	8003e02 <__sflush_r+0xb6>
 8003dfe:	602f      	str	r7, [r5, #0]
 8003e00:	e7b1      	b.n	8003d66 <__sflush_r+0x1a>
 8003e02:	89a3      	ldrh	r3, [r4, #12]
 8003e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e08:	81a3      	strh	r3, [r4, #12]
 8003e0a:	e7ad      	b.n	8003d68 <__sflush_r+0x1c>
 8003e0c:	690f      	ldr	r7, [r1, #16]
 8003e0e:	2f00      	cmp	r7, #0
 8003e10:	d0a9      	beq.n	8003d66 <__sflush_r+0x1a>
 8003e12:	0793      	lsls	r3, r2, #30
 8003e14:	bf18      	it	ne
 8003e16:	2300      	movne	r3, #0
 8003e18:	680e      	ldr	r6, [r1, #0]
 8003e1a:	bf08      	it	eq
 8003e1c:	694b      	ldreq	r3, [r1, #20]
 8003e1e:	eba6 0807 	sub.w	r8, r6, r7
 8003e22:	600f      	str	r7, [r1, #0]
 8003e24:	608b      	str	r3, [r1, #8]
 8003e26:	f1b8 0f00 	cmp.w	r8, #0
 8003e2a:	dd9c      	ble.n	8003d66 <__sflush_r+0x1a>
 8003e2c:	4643      	mov	r3, r8
 8003e2e:	463a      	mov	r2, r7
 8003e30:	6a21      	ldr	r1, [r4, #32]
 8003e32:	4628      	mov	r0, r5
 8003e34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e36:	47b0      	blx	r6
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	dc06      	bgt.n	8003e4a <__sflush_r+0xfe>
 8003e3c:	89a3      	ldrh	r3, [r4, #12]
 8003e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e42:	81a3      	strh	r3, [r4, #12]
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e48:	e78e      	b.n	8003d68 <__sflush_r+0x1c>
 8003e4a:	4407      	add	r7, r0
 8003e4c:	eba8 0800 	sub.w	r8, r8, r0
 8003e50:	e7e9      	b.n	8003e26 <__sflush_r+0xda>
 8003e52:	bf00      	nop
 8003e54:	20400001 	.word	0x20400001

08003e58 <_fflush_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	690b      	ldr	r3, [r1, #16]
 8003e5c:	4605      	mov	r5, r0
 8003e5e:	460c      	mov	r4, r1
 8003e60:	b1db      	cbz	r3, 8003e9a <_fflush_r+0x42>
 8003e62:	b118      	cbz	r0, 8003e6c <_fflush_r+0x14>
 8003e64:	6983      	ldr	r3, [r0, #24]
 8003e66:	b90b      	cbnz	r3, 8003e6c <_fflush_r+0x14>
 8003e68:	f000 f860 	bl	8003f2c <__sinit>
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <_fflush_r+0x48>)
 8003e6e:	429c      	cmp	r4, r3
 8003e70:	d109      	bne.n	8003e86 <_fflush_r+0x2e>
 8003e72:	686c      	ldr	r4, [r5, #4]
 8003e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e78:	b17b      	cbz	r3, 8003e9a <_fflush_r+0x42>
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e82:	f7ff bf63 	b.w	8003d4c <__sflush_r>
 8003e86:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <_fflush_r+0x4c>)
 8003e88:	429c      	cmp	r4, r3
 8003e8a:	d101      	bne.n	8003e90 <_fflush_r+0x38>
 8003e8c:	68ac      	ldr	r4, [r5, #8]
 8003e8e:	e7f1      	b.n	8003e74 <_fflush_r+0x1c>
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <_fflush_r+0x50>)
 8003e92:	429c      	cmp	r4, r3
 8003e94:	bf08      	it	eq
 8003e96:	68ec      	ldreq	r4, [r5, #12]
 8003e98:	e7ec      	b.n	8003e74 <_fflush_r+0x1c>
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	bd38      	pop	{r3, r4, r5, pc}
 8003e9e:	bf00      	nop
 8003ea0:	08005030 	.word	0x08005030
 8003ea4:	08005050 	.word	0x08005050
 8003ea8:	08005010 	.word	0x08005010

08003eac <std>:
 8003eac:	2300      	movs	r3, #0
 8003eae:	b510      	push	{r4, lr}
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	e9c0 3300 	strd	r3, r3, [r0]
 8003eb6:	6083      	str	r3, [r0, #8]
 8003eb8:	8181      	strh	r1, [r0, #12]
 8003eba:	6643      	str	r3, [r0, #100]	; 0x64
 8003ebc:	81c2      	strh	r2, [r0, #14]
 8003ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ec2:	6183      	str	r3, [r0, #24]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	2208      	movs	r2, #8
 8003ec8:	305c      	adds	r0, #92	; 0x5c
 8003eca:	f7ff fe13 	bl	8003af4 <memset>
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <std+0x38>)
 8003ed0:	6224      	str	r4, [r4, #32]
 8003ed2:	6263      	str	r3, [r4, #36]	; 0x24
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <std+0x3c>)
 8003ed6:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <std+0x40>)
 8003eda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <std+0x44>)
 8003ede:	6323      	str	r3, [r4, #48]	; 0x30
 8003ee0:	bd10      	pop	{r4, pc}
 8003ee2:	bf00      	nop
 8003ee4:	08004275 	.word	0x08004275
 8003ee8:	08004297 	.word	0x08004297
 8003eec:	080042cf 	.word	0x080042cf
 8003ef0:	080042f3 	.word	0x080042f3

08003ef4 <_cleanup_r>:
 8003ef4:	4901      	ldr	r1, [pc, #4]	; (8003efc <_cleanup_r+0x8>)
 8003ef6:	f000 b885 	b.w	8004004 <_fwalk_reent>
 8003efa:	bf00      	nop
 8003efc:	08003e59 	.word	0x08003e59

08003f00 <__sfmoreglue>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	2568      	movs	r5, #104	; 0x68
 8003f04:	1e4a      	subs	r2, r1, #1
 8003f06:	4355      	muls	r5, r2
 8003f08:	460e      	mov	r6, r1
 8003f0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f0e:	f000 f947 	bl	80041a0 <_malloc_r>
 8003f12:	4604      	mov	r4, r0
 8003f14:	b140      	cbz	r0, 8003f28 <__sfmoreglue+0x28>
 8003f16:	2100      	movs	r1, #0
 8003f18:	e9c0 1600 	strd	r1, r6, [r0]
 8003f1c:	300c      	adds	r0, #12
 8003f1e:	60a0      	str	r0, [r4, #8]
 8003f20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f24:	f7ff fde6 	bl	8003af4 <memset>
 8003f28:	4620      	mov	r0, r4
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}

08003f2c <__sinit>:
 8003f2c:	6983      	ldr	r3, [r0, #24]
 8003f2e:	b510      	push	{r4, lr}
 8003f30:	4604      	mov	r4, r0
 8003f32:	bb33      	cbnz	r3, 8003f82 <__sinit+0x56>
 8003f34:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003f38:	6503      	str	r3, [r0, #80]	; 0x50
 8003f3a:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <__sinit+0x58>)
 8003f3c:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <__sinit+0x5c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6282      	str	r2, [r0, #40]	; 0x28
 8003f42:	4298      	cmp	r0, r3
 8003f44:	bf04      	itt	eq
 8003f46:	2301      	moveq	r3, #1
 8003f48:	6183      	streq	r3, [r0, #24]
 8003f4a:	f000 f81f 	bl	8003f8c <__sfp>
 8003f4e:	6060      	str	r0, [r4, #4]
 8003f50:	4620      	mov	r0, r4
 8003f52:	f000 f81b 	bl	8003f8c <__sfp>
 8003f56:	60a0      	str	r0, [r4, #8]
 8003f58:	4620      	mov	r0, r4
 8003f5a:	f000 f817 	bl	8003f8c <__sfp>
 8003f5e:	2200      	movs	r2, #0
 8003f60:	60e0      	str	r0, [r4, #12]
 8003f62:	2104      	movs	r1, #4
 8003f64:	6860      	ldr	r0, [r4, #4]
 8003f66:	f7ff ffa1 	bl	8003eac <std>
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	2109      	movs	r1, #9
 8003f6e:	68a0      	ldr	r0, [r4, #8]
 8003f70:	f7ff ff9c 	bl	8003eac <std>
 8003f74:	2202      	movs	r2, #2
 8003f76:	2112      	movs	r1, #18
 8003f78:	68e0      	ldr	r0, [r4, #12]
 8003f7a:	f7ff ff97 	bl	8003eac <std>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61a3      	str	r3, [r4, #24]
 8003f82:	bd10      	pop	{r4, pc}
 8003f84:	0800500c 	.word	0x0800500c
 8003f88:	08003ef5 	.word	0x08003ef5

08003f8c <__sfp>:
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <__sfp+0x70>)
 8003f90:	4607      	mov	r7, r0
 8003f92:	681e      	ldr	r6, [r3, #0]
 8003f94:	69b3      	ldr	r3, [r6, #24]
 8003f96:	b913      	cbnz	r3, 8003f9e <__sfp+0x12>
 8003f98:	4630      	mov	r0, r6
 8003f9a:	f7ff ffc7 	bl	8003f2c <__sinit>
 8003f9e:	3648      	adds	r6, #72	; 0x48
 8003fa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	d503      	bpl.n	8003fb0 <__sfp+0x24>
 8003fa8:	6833      	ldr	r3, [r6, #0]
 8003faa:	b133      	cbz	r3, 8003fba <__sfp+0x2e>
 8003fac:	6836      	ldr	r6, [r6, #0]
 8003fae:	e7f7      	b.n	8003fa0 <__sfp+0x14>
 8003fb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003fb4:	b16d      	cbz	r5, 8003fd2 <__sfp+0x46>
 8003fb6:	3468      	adds	r4, #104	; 0x68
 8003fb8:	e7f4      	b.n	8003fa4 <__sfp+0x18>
 8003fba:	2104      	movs	r1, #4
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	f7ff ff9f 	bl	8003f00 <__sfmoreglue>
 8003fc2:	6030      	str	r0, [r6, #0]
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d1f1      	bne.n	8003fac <__sfp+0x20>
 8003fc8:	230c      	movs	r3, #12
 8003fca:	4604      	mov	r4, r0
 8003fcc:	603b      	str	r3, [r7, #0]
 8003fce:	4620      	mov	r0, r4
 8003fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <__sfp+0x74>)
 8003fd4:	6665      	str	r5, [r4, #100]	; 0x64
 8003fd6:	e9c4 5500 	strd	r5, r5, [r4]
 8003fda:	60a5      	str	r5, [r4, #8]
 8003fdc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003fe0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fec:	f7ff fd82 	bl	8003af4 <memset>
 8003ff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ff8:	e7e9      	b.n	8003fce <__sfp+0x42>
 8003ffa:	bf00      	nop
 8003ffc:	0800500c 	.word	0x0800500c
 8004000:	ffff0001 	.word	0xffff0001

08004004 <_fwalk_reent>:
 8004004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004008:	4680      	mov	r8, r0
 800400a:	4689      	mov	r9, r1
 800400c:	2600      	movs	r6, #0
 800400e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004012:	b914      	cbnz	r4, 800401a <_fwalk_reent+0x16>
 8004014:	4630      	mov	r0, r6
 8004016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800401a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800401e:	3f01      	subs	r7, #1
 8004020:	d501      	bpl.n	8004026 <_fwalk_reent+0x22>
 8004022:	6824      	ldr	r4, [r4, #0]
 8004024:	e7f5      	b.n	8004012 <_fwalk_reent+0xe>
 8004026:	89ab      	ldrh	r3, [r5, #12]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d907      	bls.n	800403c <_fwalk_reent+0x38>
 800402c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004030:	3301      	adds	r3, #1
 8004032:	d003      	beq.n	800403c <_fwalk_reent+0x38>
 8004034:	4629      	mov	r1, r5
 8004036:	4640      	mov	r0, r8
 8004038:	47c8      	blx	r9
 800403a:	4306      	orrs	r6, r0
 800403c:	3568      	adds	r5, #104	; 0x68
 800403e:	e7ee      	b.n	800401e <_fwalk_reent+0x1a>

08004040 <__swhatbuf_r>:
 8004040:	b570      	push	{r4, r5, r6, lr}
 8004042:	460e      	mov	r6, r1
 8004044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004048:	b096      	sub	sp, #88	; 0x58
 800404a:	2900      	cmp	r1, #0
 800404c:	4614      	mov	r4, r2
 800404e:	461d      	mov	r5, r3
 8004050:	da07      	bge.n	8004062 <__swhatbuf_r+0x22>
 8004052:	2300      	movs	r3, #0
 8004054:	602b      	str	r3, [r5, #0]
 8004056:	89b3      	ldrh	r3, [r6, #12]
 8004058:	061a      	lsls	r2, r3, #24
 800405a:	d410      	bmi.n	800407e <__swhatbuf_r+0x3e>
 800405c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004060:	e00e      	b.n	8004080 <__swhatbuf_r+0x40>
 8004062:	466a      	mov	r2, sp
 8004064:	f000 f96c 	bl	8004340 <_fstat_r>
 8004068:	2800      	cmp	r0, #0
 800406a:	dbf2      	blt.n	8004052 <__swhatbuf_r+0x12>
 800406c:	9a01      	ldr	r2, [sp, #4]
 800406e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004072:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004076:	425a      	negs	r2, r3
 8004078:	415a      	adcs	r2, r3
 800407a:	602a      	str	r2, [r5, #0]
 800407c:	e7ee      	b.n	800405c <__swhatbuf_r+0x1c>
 800407e:	2340      	movs	r3, #64	; 0x40
 8004080:	2000      	movs	r0, #0
 8004082:	6023      	str	r3, [r4, #0]
 8004084:	b016      	add	sp, #88	; 0x58
 8004086:	bd70      	pop	{r4, r5, r6, pc}

08004088 <__smakebuf_r>:
 8004088:	898b      	ldrh	r3, [r1, #12]
 800408a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800408c:	079d      	lsls	r5, r3, #30
 800408e:	4606      	mov	r6, r0
 8004090:	460c      	mov	r4, r1
 8004092:	d507      	bpl.n	80040a4 <__smakebuf_r+0x1c>
 8004094:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	6123      	str	r3, [r4, #16]
 800409c:	2301      	movs	r3, #1
 800409e:	6163      	str	r3, [r4, #20]
 80040a0:	b002      	add	sp, #8
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	ab01      	add	r3, sp, #4
 80040a6:	466a      	mov	r2, sp
 80040a8:	f7ff ffca 	bl	8004040 <__swhatbuf_r>
 80040ac:	9900      	ldr	r1, [sp, #0]
 80040ae:	4605      	mov	r5, r0
 80040b0:	4630      	mov	r0, r6
 80040b2:	f000 f875 	bl	80041a0 <_malloc_r>
 80040b6:	b948      	cbnz	r0, 80040cc <__smakebuf_r+0x44>
 80040b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040bc:	059a      	lsls	r2, r3, #22
 80040be:	d4ef      	bmi.n	80040a0 <__smakebuf_r+0x18>
 80040c0:	f023 0303 	bic.w	r3, r3, #3
 80040c4:	f043 0302 	orr.w	r3, r3, #2
 80040c8:	81a3      	strh	r3, [r4, #12]
 80040ca:	e7e3      	b.n	8004094 <__smakebuf_r+0xc>
 80040cc:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <__smakebuf_r+0x7c>)
 80040ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80040d0:	89a3      	ldrh	r3, [r4, #12]
 80040d2:	6020      	str	r0, [r4, #0]
 80040d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d8:	81a3      	strh	r3, [r4, #12]
 80040da:	9b00      	ldr	r3, [sp, #0]
 80040dc:	6120      	str	r0, [r4, #16]
 80040de:	6163      	str	r3, [r4, #20]
 80040e0:	9b01      	ldr	r3, [sp, #4]
 80040e2:	b15b      	cbz	r3, 80040fc <__smakebuf_r+0x74>
 80040e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040e8:	4630      	mov	r0, r6
 80040ea:	f000 f93b 	bl	8004364 <_isatty_r>
 80040ee:	b128      	cbz	r0, 80040fc <__smakebuf_r+0x74>
 80040f0:	89a3      	ldrh	r3, [r4, #12]
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	81a3      	strh	r3, [r4, #12]
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	431d      	orrs	r5, r3
 8004100:	81a5      	strh	r5, [r4, #12]
 8004102:	e7cd      	b.n	80040a0 <__smakebuf_r+0x18>
 8004104:	08003ef5 	.word	0x08003ef5

08004108 <_free_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	4605      	mov	r5, r0
 800410c:	2900      	cmp	r1, #0
 800410e:	d043      	beq.n	8004198 <_free_r+0x90>
 8004110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004114:	1f0c      	subs	r4, r1, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	bfb8      	it	lt
 800411a:	18e4      	addlt	r4, r4, r3
 800411c:	f000 f944 	bl	80043a8 <__malloc_lock>
 8004120:	4a1e      	ldr	r2, [pc, #120]	; (800419c <_free_r+0x94>)
 8004122:	6813      	ldr	r3, [r2, #0]
 8004124:	4610      	mov	r0, r2
 8004126:	b933      	cbnz	r3, 8004136 <_free_r+0x2e>
 8004128:	6063      	str	r3, [r4, #4]
 800412a:	6014      	str	r4, [r2, #0]
 800412c:	4628      	mov	r0, r5
 800412e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004132:	f000 b93a 	b.w	80043aa <__malloc_unlock>
 8004136:	42a3      	cmp	r3, r4
 8004138:	d90b      	bls.n	8004152 <_free_r+0x4a>
 800413a:	6821      	ldr	r1, [r4, #0]
 800413c:	1862      	adds	r2, r4, r1
 800413e:	4293      	cmp	r3, r2
 8004140:	bf01      	itttt	eq
 8004142:	681a      	ldreq	r2, [r3, #0]
 8004144:	685b      	ldreq	r3, [r3, #4]
 8004146:	1852      	addeq	r2, r2, r1
 8004148:	6022      	streq	r2, [r4, #0]
 800414a:	6063      	str	r3, [r4, #4]
 800414c:	6004      	str	r4, [r0, #0]
 800414e:	e7ed      	b.n	800412c <_free_r+0x24>
 8004150:	4613      	mov	r3, r2
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	b10a      	cbz	r2, 800415a <_free_r+0x52>
 8004156:	42a2      	cmp	r2, r4
 8004158:	d9fa      	bls.n	8004150 <_free_r+0x48>
 800415a:	6819      	ldr	r1, [r3, #0]
 800415c:	1858      	adds	r0, r3, r1
 800415e:	42a0      	cmp	r0, r4
 8004160:	d10b      	bne.n	800417a <_free_r+0x72>
 8004162:	6820      	ldr	r0, [r4, #0]
 8004164:	4401      	add	r1, r0
 8004166:	1858      	adds	r0, r3, r1
 8004168:	4282      	cmp	r2, r0
 800416a:	6019      	str	r1, [r3, #0]
 800416c:	d1de      	bne.n	800412c <_free_r+0x24>
 800416e:	6810      	ldr	r0, [r2, #0]
 8004170:	6852      	ldr	r2, [r2, #4]
 8004172:	4401      	add	r1, r0
 8004174:	6019      	str	r1, [r3, #0]
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	e7d8      	b.n	800412c <_free_r+0x24>
 800417a:	d902      	bls.n	8004182 <_free_r+0x7a>
 800417c:	230c      	movs	r3, #12
 800417e:	602b      	str	r3, [r5, #0]
 8004180:	e7d4      	b.n	800412c <_free_r+0x24>
 8004182:	6820      	ldr	r0, [r4, #0]
 8004184:	1821      	adds	r1, r4, r0
 8004186:	428a      	cmp	r2, r1
 8004188:	bf01      	itttt	eq
 800418a:	6811      	ldreq	r1, [r2, #0]
 800418c:	6852      	ldreq	r2, [r2, #4]
 800418e:	1809      	addeq	r1, r1, r0
 8004190:	6021      	streq	r1, [r4, #0]
 8004192:	6062      	str	r2, [r4, #4]
 8004194:	605c      	str	r4, [r3, #4]
 8004196:	e7c9      	b.n	800412c <_free_r+0x24>
 8004198:	bd38      	pop	{r3, r4, r5, pc}
 800419a:	bf00      	nop
 800419c:	20000098 	.word	0x20000098

080041a0 <_malloc_r>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	1ccd      	adds	r5, r1, #3
 80041a4:	f025 0503 	bic.w	r5, r5, #3
 80041a8:	3508      	adds	r5, #8
 80041aa:	2d0c      	cmp	r5, #12
 80041ac:	bf38      	it	cc
 80041ae:	250c      	movcc	r5, #12
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	4606      	mov	r6, r0
 80041b4:	db01      	blt.n	80041ba <_malloc_r+0x1a>
 80041b6:	42a9      	cmp	r1, r5
 80041b8:	d903      	bls.n	80041c2 <_malloc_r+0x22>
 80041ba:	230c      	movs	r3, #12
 80041bc:	6033      	str	r3, [r6, #0]
 80041be:	2000      	movs	r0, #0
 80041c0:	bd70      	pop	{r4, r5, r6, pc}
 80041c2:	f000 f8f1 	bl	80043a8 <__malloc_lock>
 80041c6:	4a21      	ldr	r2, [pc, #132]	; (800424c <_malloc_r+0xac>)
 80041c8:	6814      	ldr	r4, [r2, #0]
 80041ca:	4621      	mov	r1, r4
 80041cc:	b991      	cbnz	r1, 80041f4 <_malloc_r+0x54>
 80041ce:	4c20      	ldr	r4, [pc, #128]	; (8004250 <_malloc_r+0xb0>)
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	b91b      	cbnz	r3, 80041dc <_malloc_r+0x3c>
 80041d4:	4630      	mov	r0, r6
 80041d6:	f000 f83d 	bl	8004254 <_sbrk_r>
 80041da:	6020      	str	r0, [r4, #0]
 80041dc:	4629      	mov	r1, r5
 80041de:	4630      	mov	r0, r6
 80041e0:	f000 f838 	bl	8004254 <_sbrk_r>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d124      	bne.n	8004232 <_malloc_r+0x92>
 80041e8:	230c      	movs	r3, #12
 80041ea:	4630      	mov	r0, r6
 80041ec:	6033      	str	r3, [r6, #0]
 80041ee:	f000 f8dc 	bl	80043aa <__malloc_unlock>
 80041f2:	e7e4      	b.n	80041be <_malloc_r+0x1e>
 80041f4:	680b      	ldr	r3, [r1, #0]
 80041f6:	1b5b      	subs	r3, r3, r5
 80041f8:	d418      	bmi.n	800422c <_malloc_r+0x8c>
 80041fa:	2b0b      	cmp	r3, #11
 80041fc:	d90f      	bls.n	800421e <_malloc_r+0x7e>
 80041fe:	600b      	str	r3, [r1, #0]
 8004200:	18cc      	adds	r4, r1, r3
 8004202:	50cd      	str	r5, [r1, r3]
 8004204:	4630      	mov	r0, r6
 8004206:	f000 f8d0 	bl	80043aa <__malloc_unlock>
 800420a:	f104 000b 	add.w	r0, r4, #11
 800420e:	1d23      	adds	r3, r4, #4
 8004210:	f020 0007 	bic.w	r0, r0, #7
 8004214:	1ac3      	subs	r3, r0, r3
 8004216:	d0d3      	beq.n	80041c0 <_malloc_r+0x20>
 8004218:	425a      	negs	r2, r3
 800421a:	50e2      	str	r2, [r4, r3]
 800421c:	e7d0      	b.n	80041c0 <_malloc_r+0x20>
 800421e:	684b      	ldr	r3, [r1, #4]
 8004220:	428c      	cmp	r4, r1
 8004222:	bf16      	itet	ne
 8004224:	6063      	strne	r3, [r4, #4]
 8004226:	6013      	streq	r3, [r2, #0]
 8004228:	460c      	movne	r4, r1
 800422a:	e7eb      	b.n	8004204 <_malloc_r+0x64>
 800422c:	460c      	mov	r4, r1
 800422e:	6849      	ldr	r1, [r1, #4]
 8004230:	e7cc      	b.n	80041cc <_malloc_r+0x2c>
 8004232:	1cc4      	adds	r4, r0, #3
 8004234:	f024 0403 	bic.w	r4, r4, #3
 8004238:	42a0      	cmp	r0, r4
 800423a:	d005      	beq.n	8004248 <_malloc_r+0xa8>
 800423c:	1a21      	subs	r1, r4, r0
 800423e:	4630      	mov	r0, r6
 8004240:	f000 f808 	bl	8004254 <_sbrk_r>
 8004244:	3001      	adds	r0, #1
 8004246:	d0cf      	beq.n	80041e8 <_malloc_r+0x48>
 8004248:	6025      	str	r5, [r4, #0]
 800424a:	e7db      	b.n	8004204 <_malloc_r+0x64>
 800424c:	20000098 	.word	0x20000098
 8004250:	2000009c 	.word	0x2000009c

08004254 <_sbrk_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	2300      	movs	r3, #0
 8004258:	4c05      	ldr	r4, [pc, #20]	; (8004270 <_sbrk_r+0x1c>)
 800425a:	4605      	mov	r5, r0
 800425c:	4608      	mov	r0, r1
 800425e:	6023      	str	r3, [r4, #0]
 8004260:	f7fd f982 	bl	8001568 <_sbrk>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d102      	bne.n	800426e <_sbrk_r+0x1a>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	b103      	cbz	r3, 800426e <_sbrk_r+0x1a>
 800426c:	602b      	str	r3, [r5, #0]
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	20000138 	.word	0x20000138

08004274 <__sread>:
 8004274:	b510      	push	{r4, lr}
 8004276:	460c      	mov	r4, r1
 8004278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800427c:	f000 f896 	bl	80043ac <_read_r>
 8004280:	2800      	cmp	r0, #0
 8004282:	bfab      	itete	ge
 8004284:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004286:	89a3      	ldrhlt	r3, [r4, #12]
 8004288:	181b      	addge	r3, r3, r0
 800428a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800428e:	bfac      	ite	ge
 8004290:	6563      	strge	r3, [r4, #84]	; 0x54
 8004292:	81a3      	strhlt	r3, [r4, #12]
 8004294:	bd10      	pop	{r4, pc}

08004296 <__swrite>:
 8004296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800429a:	461f      	mov	r7, r3
 800429c:	898b      	ldrh	r3, [r1, #12]
 800429e:	4605      	mov	r5, r0
 80042a0:	05db      	lsls	r3, r3, #23
 80042a2:	460c      	mov	r4, r1
 80042a4:	4616      	mov	r6, r2
 80042a6:	d505      	bpl.n	80042b4 <__swrite+0x1e>
 80042a8:	2302      	movs	r3, #2
 80042aa:	2200      	movs	r2, #0
 80042ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042b0:	f000 f868 	bl	8004384 <_lseek_r>
 80042b4:	89a3      	ldrh	r3, [r4, #12]
 80042b6:	4632      	mov	r2, r6
 80042b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042bc:	81a3      	strh	r3, [r4, #12]
 80042be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042c2:	463b      	mov	r3, r7
 80042c4:	4628      	mov	r0, r5
 80042c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042ca:	f000 b817 	b.w	80042fc <_write_r>

080042ce <__sseek>:
 80042ce:	b510      	push	{r4, lr}
 80042d0:	460c      	mov	r4, r1
 80042d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042d6:	f000 f855 	bl	8004384 <_lseek_r>
 80042da:	1c43      	adds	r3, r0, #1
 80042dc:	89a3      	ldrh	r3, [r4, #12]
 80042de:	bf15      	itete	ne
 80042e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80042e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042ea:	81a3      	strheq	r3, [r4, #12]
 80042ec:	bf18      	it	ne
 80042ee:	81a3      	strhne	r3, [r4, #12]
 80042f0:	bd10      	pop	{r4, pc}

080042f2 <__sclose>:
 80042f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f6:	f000 b813 	b.w	8004320 <_close_r>
	...

080042fc <_write_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4605      	mov	r5, r0
 8004300:	4608      	mov	r0, r1
 8004302:	4611      	mov	r1, r2
 8004304:	2200      	movs	r2, #0
 8004306:	4c05      	ldr	r4, [pc, #20]	; (800431c <_write_r+0x20>)
 8004308:	6022      	str	r2, [r4, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	f7fc fcd4 	bl	8000cb8 <_write>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	d102      	bne.n	800431a <_write_r+0x1e>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	b103      	cbz	r3, 800431a <_write_r+0x1e>
 8004318:	602b      	str	r3, [r5, #0]
 800431a:	bd38      	pop	{r3, r4, r5, pc}
 800431c:	20000138 	.word	0x20000138

08004320 <_close_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	2300      	movs	r3, #0
 8004324:	4c05      	ldr	r4, [pc, #20]	; (800433c <_close_r+0x1c>)
 8004326:	4605      	mov	r5, r0
 8004328:	4608      	mov	r0, r1
 800432a:	6023      	str	r3, [r4, #0]
 800432c:	f7fd f948 	bl	80015c0 <_close>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_close_r+0x1a>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	b103      	cbz	r3, 800433a <_close_r+0x1a>
 8004338:	602b      	str	r3, [r5, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	20000138 	.word	0x20000138

08004340 <_fstat_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	2300      	movs	r3, #0
 8004344:	4c06      	ldr	r4, [pc, #24]	; (8004360 <_fstat_r+0x20>)
 8004346:	4605      	mov	r5, r0
 8004348:	4608      	mov	r0, r1
 800434a:	4611      	mov	r1, r2
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	f7fd f942 	bl	80015d6 <_fstat>
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	d102      	bne.n	800435c <_fstat_r+0x1c>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	b103      	cbz	r3, 800435c <_fstat_r+0x1c>
 800435a:	602b      	str	r3, [r5, #0]
 800435c:	bd38      	pop	{r3, r4, r5, pc}
 800435e:	bf00      	nop
 8004360:	20000138 	.word	0x20000138

08004364 <_isatty_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	2300      	movs	r3, #0
 8004368:	4c05      	ldr	r4, [pc, #20]	; (8004380 <_isatty_r+0x1c>)
 800436a:	4605      	mov	r5, r0
 800436c:	4608      	mov	r0, r1
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	f7fd f940 	bl	80015f4 <_isatty>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d102      	bne.n	800437e <_isatty_r+0x1a>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	b103      	cbz	r3, 800437e <_isatty_r+0x1a>
 800437c:	602b      	str	r3, [r5, #0]
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	20000138 	.word	0x20000138

08004384 <_lseek_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4605      	mov	r5, r0
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	2200      	movs	r2, #0
 800438e:	4c05      	ldr	r4, [pc, #20]	; (80043a4 <_lseek_r+0x20>)
 8004390:	6022      	str	r2, [r4, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	f7fd f938 	bl	8001608 <_lseek>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d102      	bne.n	80043a2 <_lseek_r+0x1e>
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	b103      	cbz	r3, 80043a2 <_lseek_r+0x1e>
 80043a0:	602b      	str	r3, [r5, #0]
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
 80043a4:	20000138 	.word	0x20000138

080043a8 <__malloc_lock>:
 80043a8:	4770      	bx	lr

080043aa <__malloc_unlock>:
 80043aa:	4770      	bx	lr

080043ac <_read_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	4605      	mov	r5, r0
 80043b0:	4608      	mov	r0, r1
 80043b2:	4611      	mov	r1, r2
 80043b4:	2200      	movs	r2, #0
 80043b6:	4c05      	ldr	r4, [pc, #20]	; (80043cc <_read_r+0x20>)
 80043b8:	6022      	str	r2, [r4, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f7fd f8b6 	bl	800152c <_read>
 80043c0:	1c43      	adds	r3, r0, #1
 80043c2:	d102      	bne.n	80043ca <_read_r+0x1e>
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	b103      	cbz	r3, 80043ca <_read_r+0x1e>
 80043c8:	602b      	str	r3, [r5, #0]
 80043ca:	bd38      	pop	{r3, r4, r5, pc}
 80043cc:	20000138 	.word	0x20000138

080043d0 <cosf>:
 80043d0:	b507      	push	{r0, r1, r2, lr}
 80043d2:	4a18      	ldr	r2, [pc, #96]	; (8004434 <cosf+0x64>)
 80043d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80043d8:	4293      	cmp	r3, r2
 80043da:	4601      	mov	r1, r0
 80043dc:	dc03      	bgt.n	80043e6 <cosf+0x16>
 80043de:	2100      	movs	r1, #0
 80043e0:	f000 f9f8 	bl	80047d4 <__kernel_cosf>
 80043e4:	e004      	b.n	80043f0 <cosf+0x20>
 80043e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80043ea:	db04      	blt.n	80043f6 <cosf+0x26>
 80043ec:	f7fc f948 	bl	8000680 <__aeabi_fsub>
 80043f0:	b003      	add	sp, #12
 80043f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80043f6:	4669      	mov	r1, sp
 80043f8:	f000 f894 	bl	8004524 <__ieee754_rem_pio2f>
 80043fc:	f000 0203 	and.w	r2, r0, #3
 8004400:	2a01      	cmp	r2, #1
 8004402:	d005      	beq.n	8004410 <cosf+0x40>
 8004404:	2a02      	cmp	r2, #2
 8004406:	d00a      	beq.n	800441e <cosf+0x4e>
 8004408:	b972      	cbnz	r2, 8004428 <cosf+0x58>
 800440a:	9901      	ldr	r1, [sp, #4]
 800440c:	9800      	ldr	r0, [sp, #0]
 800440e:	e7e7      	b.n	80043e0 <cosf+0x10>
 8004410:	9901      	ldr	r1, [sp, #4]
 8004412:	9800      	ldr	r0, [sp, #0]
 8004414:	f000 fcfc 	bl	8004e10 <__kernel_sinf>
 8004418:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800441c:	e7e8      	b.n	80043f0 <cosf+0x20>
 800441e:	9901      	ldr	r1, [sp, #4]
 8004420:	9800      	ldr	r0, [sp, #0]
 8004422:	f000 f9d7 	bl	80047d4 <__kernel_cosf>
 8004426:	e7f7      	b.n	8004418 <cosf+0x48>
 8004428:	2201      	movs	r2, #1
 800442a:	9901      	ldr	r1, [sp, #4]
 800442c:	9800      	ldr	r0, [sp, #0]
 800442e:	f000 fcef 	bl	8004e10 <__kernel_sinf>
 8004432:	e7dd      	b.n	80043f0 <cosf+0x20>
 8004434:	3f490fd8 	.word	0x3f490fd8

08004438 <floorf>:
 8004438:	b570      	push	{r4, r5, r6, lr}
 800443a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800443e:	0df5      	lsrs	r5, r6, #23
 8004440:	3d7f      	subs	r5, #127	; 0x7f
 8004442:	2d16      	cmp	r5, #22
 8004444:	4601      	mov	r1, r0
 8004446:	4604      	mov	r4, r0
 8004448:	dc26      	bgt.n	8004498 <floorf+0x60>
 800444a:	2d00      	cmp	r5, #0
 800444c:	da0e      	bge.n	800446c <floorf+0x34>
 800444e:	4917      	ldr	r1, [pc, #92]	; (80044ac <floorf+0x74>)
 8004450:	f7fc f918 	bl	8000684 <__addsf3>
 8004454:	2100      	movs	r1, #0
 8004456:	f7fc fbd9 	bl	8000c0c <__aeabi_fcmpgt>
 800445a:	b128      	cbz	r0, 8004468 <floorf+0x30>
 800445c:	2c00      	cmp	r4, #0
 800445e:	da23      	bge.n	80044a8 <floorf+0x70>
 8004460:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <floorf+0x78>)
 8004462:	2e00      	cmp	r6, #0
 8004464:	bf18      	it	ne
 8004466:	461c      	movne	r4, r3
 8004468:	4621      	mov	r1, r4
 800446a:	e01b      	b.n	80044a4 <floorf+0x6c>
 800446c:	4e11      	ldr	r6, [pc, #68]	; (80044b4 <floorf+0x7c>)
 800446e:	412e      	asrs	r6, r5
 8004470:	4230      	tst	r0, r6
 8004472:	d017      	beq.n	80044a4 <floorf+0x6c>
 8004474:	490d      	ldr	r1, [pc, #52]	; (80044ac <floorf+0x74>)
 8004476:	f7fc f905 	bl	8000684 <__addsf3>
 800447a:	2100      	movs	r1, #0
 800447c:	f7fc fbc6 	bl	8000c0c <__aeabi_fcmpgt>
 8004480:	2800      	cmp	r0, #0
 8004482:	d0f1      	beq.n	8004468 <floorf+0x30>
 8004484:	2c00      	cmp	r4, #0
 8004486:	bfbe      	ittt	lt
 8004488:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800448c:	fa43 f505 	asrlt.w	r5, r3, r5
 8004490:	1964      	addlt	r4, r4, r5
 8004492:	ea24 0406 	bic.w	r4, r4, r6
 8004496:	e7e7      	b.n	8004468 <floorf+0x30>
 8004498:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800449c:	d302      	bcc.n	80044a4 <floorf+0x6c>
 800449e:	f7fc f8f1 	bl	8000684 <__addsf3>
 80044a2:	4601      	mov	r1, r0
 80044a4:	4608      	mov	r0, r1
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	2400      	movs	r4, #0
 80044aa:	e7dd      	b.n	8004468 <floorf+0x30>
 80044ac:	7149f2ca 	.word	0x7149f2ca
 80044b0:	bf800000 	.word	0xbf800000
 80044b4:	007fffff 	.word	0x007fffff

080044b8 <sinf>:
 80044b8:	b507      	push	{r0, r1, r2, lr}
 80044ba:	4a19      	ldr	r2, [pc, #100]	; (8004520 <sinf+0x68>)
 80044bc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80044c0:	4293      	cmp	r3, r2
 80044c2:	4601      	mov	r1, r0
 80044c4:	dc04      	bgt.n	80044d0 <sinf+0x18>
 80044c6:	2200      	movs	r2, #0
 80044c8:	2100      	movs	r1, #0
 80044ca:	f000 fca1 	bl	8004e10 <__kernel_sinf>
 80044ce:	e004      	b.n	80044da <sinf+0x22>
 80044d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80044d4:	db04      	blt.n	80044e0 <sinf+0x28>
 80044d6:	f7fc f8d3 	bl	8000680 <__aeabi_fsub>
 80044da:	b003      	add	sp, #12
 80044dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80044e0:	4669      	mov	r1, sp
 80044e2:	f000 f81f 	bl	8004524 <__ieee754_rem_pio2f>
 80044e6:	f000 0003 	and.w	r0, r0, #3
 80044ea:	2801      	cmp	r0, #1
 80044ec:	d006      	beq.n	80044fc <sinf+0x44>
 80044ee:	2802      	cmp	r0, #2
 80044f0:	d009      	beq.n	8004506 <sinf+0x4e>
 80044f2:	b980      	cbnz	r0, 8004516 <sinf+0x5e>
 80044f4:	2201      	movs	r2, #1
 80044f6:	9901      	ldr	r1, [sp, #4]
 80044f8:	9800      	ldr	r0, [sp, #0]
 80044fa:	e7e6      	b.n	80044ca <sinf+0x12>
 80044fc:	9901      	ldr	r1, [sp, #4]
 80044fe:	9800      	ldr	r0, [sp, #0]
 8004500:	f000 f968 	bl	80047d4 <__kernel_cosf>
 8004504:	e7e9      	b.n	80044da <sinf+0x22>
 8004506:	2201      	movs	r2, #1
 8004508:	9901      	ldr	r1, [sp, #4]
 800450a:	9800      	ldr	r0, [sp, #0]
 800450c:	f000 fc80 	bl	8004e10 <__kernel_sinf>
 8004510:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004514:	e7e1      	b.n	80044da <sinf+0x22>
 8004516:	9901      	ldr	r1, [sp, #4]
 8004518:	9800      	ldr	r0, [sp, #0]
 800451a:	f000 f95b 	bl	80047d4 <__kernel_cosf>
 800451e:	e7f7      	b.n	8004510 <sinf+0x58>
 8004520:	3f490fd8 	.word	0x3f490fd8

08004524 <__ieee754_rem_pio2f>:
 8004524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004528:	4a9d      	ldr	r2, [pc, #628]	; (80047a0 <__ieee754_rem_pio2f+0x27c>)
 800452a:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800452e:	4295      	cmp	r5, r2
 8004530:	b087      	sub	sp, #28
 8004532:	460c      	mov	r4, r1
 8004534:	4607      	mov	r7, r0
 8004536:	dc04      	bgt.n	8004542 <__ieee754_rem_pio2f+0x1e>
 8004538:	2300      	movs	r3, #0
 800453a:	6020      	str	r0, [r4, #0]
 800453c:	604b      	str	r3, [r1, #4]
 800453e:	2600      	movs	r6, #0
 8004540:	e01a      	b.n	8004578 <__ieee754_rem_pio2f+0x54>
 8004542:	4a98      	ldr	r2, [pc, #608]	; (80047a4 <__ieee754_rem_pio2f+0x280>)
 8004544:	4295      	cmp	r5, r2
 8004546:	dc4b      	bgt.n	80045e0 <__ieee754_rem_pio2f+0xbc>
 8004548:	2800      	cmp	r0, #0
 800454a:	f025 050f 	bic.w	r5, r5, #15
 800454e:	4996      	ldr	r1, [pc, #600]	; (80047a8 <__ieee754_rem_pio2f+0x284>)
 8004550:	4e96      	ldr	r6, [pc, #600]	; (80047ac <__ieee754_rem_pio2f+0x288>)
 8004552:	dd23      	ble.n	800459c <__ieee754_rem_pio2f+0x78>
 8004554:	f7fc f894 	bl	8000680 <__aeabi_fsub>
 8004558:	42b5      	cmp	r5, r6
 800455a:	4607      	mov	r7, r0
 800455c:	d010      	beq.n	8004580 <__ieee754_rem_pio2f+0x5c>
 800455e:	4994      	ldr	r1, [pc, #592]	; (80047b0 <__ieee754_rem_pio2f+0x28c>)
 8004560:	f7fc f88e 	bl	8000680 <__aeabi_fsub>
 8004564:	4601      	mov	r1, r0
 8004566:	6020      	str	r0, [r4, #0]
 8004568:	4638      	mov	r0, r7
 800456a:	f7fc f889 	bl	8000680 <__aeabi_fsub>
 800456e:	4990      	ldr	r1, [pc, #576]	; (80047b0 <__ieee754_rem_pio2f+0x28c>)
 8004570:	f7fc f886 	bl	8000680 <__aeabi_fsub>
 8004574:	2601      	movs	r6, #1
 8004576:	6060      	str	r0, [r4, #4]
 8004578:	4630      	mov	r0, r6
 800457a:	b007      	add	sp, #28
 800457c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004580:	498c      	ldr	r1, [pc, #560]	; (80047b4 <__ieee754_rem_pio2f+0x290>)
 8004582:	f7fc f87d 	bl	8000680 <__aeabi_fsub>
 8004586:	498c      	ldr	r1, [pc, #560]	; (80047b8 <__ieee754_rem_pio2f+0x294>)
 8004588:	4605      	mov	r5, r0
 800458a:	f7fc f879 	bl	8000680 <__aeabi_fsub>
 800458e:	4601      	mov	r1, r0
 8004590:	6020      	str	r0, [r4, #0]
 8004592:	4628      	mov	r0, r5
 8004594:	f7fc f874 	bl	8000680 <__aeabi_fsub>
 8004598:	4987      	ldr	r1, [pc, #540]	; (80047b8 <__ieee754_rem_pio2f+0x294>)
 800459a:	e7e9      	b.n	8004570 <__ieee754_rem_pio2f+0x4c>
 800459c:	f7fc f872 	bl	8000684 <__addsf3>
 80045a0:	42b5      	cmp	r5, r6
 80045a2:	4607      	mov	r7, r0
 80045a4:	d00e      	beq.n	80045c4 <__ieee754_rem_pio2f+0xa0>
 80045a6:	4982      	ldr	r1, [pc, #520]	; (80047b0 <__ieee754_rem_pio2f+0x28c>)
 80045a8:	f7fc f86c 	bl	8000684 <__addsf3>
 80045ac:	4601      	mov	r1, r0
 80045ae:	6020      	str	r0, [r4, #0]
 80045b0:	4638      	mov	r0, r7
 80045b2:	f7fc f865 	bl	8000680 <__aeabi_fsub>
 80045b6:	497e      	ldr	r1, [pc, #504]	; (80047b0 <__ieee754_rem_pio2f+0x28c>)
 80045b8:	f7fc f864 	bl	8000684 <__addsf3>
 80045bc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80045c0:	6060      	str	r0, [r4, #4]
 80045c2:	e7d9      	b.n	8004578 <__ieee754_rem_pio2f+0x54>
 80045c4:	497b      	ldr	r1, [pc, #492]	; (80047b4 <__ieee754_rem_pio2f+0x290>)
 80045c6:	f7fc f85d 	bl	8000684 <__addsf3>
 80045ca:	497b      	ldr	r1, [pc, #492]	; (80047b8 <__ieee754_rem_pio2f+0x294>)
 80045cc:	4605      	mov	r5, r0
 80045ce:	f7fc f859 	bl	8000684 <__addsf3>
 80045d2:	4601      	mov	r1, r0
 80045d4:	6020      	str	r0, [r4, #0]
 80045d6:	4628      	mov	r0, r5
 80045d8:	f7fc f852 	bl	8000680 <__aeabi_fsub>
 80045dc:	4976      	ldr	r1, [pc, #472]	; (80047b8 <__ieee754_rem_pio2f+0x294>)
 80045de:	e7eb      	b.n	80045b8 <__ieee754_rem_pio2f+0x94>
 80045e0:	4a76      	ldr	r2, [pc, #472]	; (80047bc <__ieee754_rem_pio2f+0x298>)
 80045e2:	4295      	cmp	r5, r2
 80045e4:	f300 808c 	bgt.w	8004700 <__ieee754_rem_pio2f+0x1dc>
 80045e8:	f000 fc88 	bl	8004efc <fabsf>
 80045ec:	4974      	ldr	r1, [pc, #464]	; (80047c0 <__ieee754_rem_pio2f+0x29c>)
 80045ee:	4680      	mov	r8, r0
 80045f0:	f7fc f950 	bl	8000894 <__aeabi_fmul>
 80045f4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80045f8:	f7fc f844 	bl	8000684 <__addsf3>
 80045fc:	f7fc fb10 	bl	8000c20 <__aeabi_f2iz>
 8004600:	4606      	mov	r6, r0
 8004602:	f7fc f8f3 	bl	80007ec <__aeabi_i2f>
 8004606:	4968      	ldr	r1, [pc, #416]	; (80047a8 <__ieee754_rem_pio2f+0x284>)
 8004608:	4682      	mov	sl, r0
 800460a:	f7fc f943 	bl	8000894 <__aeabi_fmul>
 800460e:	4601      	mov	r1, r0
 8004610:	4640      	mov	r0, r8
 8004612:	f7fc f835 	bl	8000680 <__aeabi_fsub>
 8004616:	4966      	ldr	r1, [pc, #408]	; (80047b0 <__ieee754_rem_pio2f+0x28c>)
 8004618:	4680      	mov	r8, r0
 800461a:	4650      	mov	r0, sl
 800461c:	f7fc f93a 	bl	8000894 <__aeabi_fmul>
 8004620:	2e1f      	cmp	r6, #31
 8004622:	4681      	mov	r9, r0
 8004624:	dc0c      	bgt.n	8004640 <__ieee754_rem_pio2f+0x11c>
 8004626:	4a67      	ldr	r2, [pc, #412]	; (80047c4 <__ieee754_rem_pio2f+0x2a0>)
 8004628:	1e71      	subs	r1, r6, #1
 800462a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800462e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8004632:	4293      	cmp	r3, r2
 8004634:	d004      	beq.n	8004640 <__ieee754_rem_pio2f+0x11c>
 8004636:	4649      	mov	r1, r9
 8004638:	4640      	mov	r0, r8
 800463a:	f7fc f821 	bl	8000680 <__aeabi_fsub>
 800463e:	e009      	b.n	8004654 <__ieee754_rem_pio2f+0x130>
 8004640:	4649      	mov	r1, r9
 8004642:	4640      	mov	r0, r8
 8004644:	f7fc f81c 	bl	8000680 <__aeabi_fsub>
 8004648:	15ed      	asrs	r5, r5, #23
 800464a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800464e:	1aeb      	subs	r3, r5, r3
 8004650:	2b08      	cmp	r3, #8
 8004652:	dc01      	bgt.n	8004658 <__ieee754_rem_pio2f+0x134>
 8004654:	6020      	str	r0, [r4, #0]
 8004656:	e024      	b.n	80046a2 <__ieee754_rem_pio2f+0x17e>
 8004658:	4956      	ldr	r1, [pc, #344]	; (80047b4 <__ieee754_rem_pio2f+0x290>)
 800465a:	4650      	mov	r0, sl
 800465c:	f7fc f91a 	bl	8000894 <__aeabi_fmul>
 8004660:	4681      	mov	r9, r0
 8004662:	4601      	mov	r1, r0
 8004664:	4640      	mov	r0, r8
 8004666:	f7fc f80b 	bl	8000680 <__aeabi_fsub>
 800466a:	4601      	mov	r1, r0
 800466c:	4683      	mov	fp, r0
 800466e:	4640      	mov	r0, r8
 8004670:	f7fc f806 	bl	8000680 <__aeabi_fsub>
 8004674:	4649      	mov	r1, r9
 8004676:	f7fc f803 	bl	8000680 <__aeabi_fsub>
 800467a:	4680      	mov	r8, r0
 800467c:	494e      	ldr	r1, [pc, #312]	; (80047b8 <__ieee754_rem_pio2f+0x294>)
 800467e:	4650      	mov	r0, sl
 8004680:	f7fc f908 	bl	8000894 <__aeabi_fmul>
 8004684:	4641      	mov	r1, r8
 8004686:	f7fb fffb 	bl	8000680 <__aeabi_fsub>
 800468a:	4601      	mov	r1, r0
 800468c:	4681      	mov	r9, r0
 800468e:	4658      	mov	r0, fp
 8004690:	f7fb fff6 	bl	8000680 <__aeabi_fsub>
 8004694:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004698:	1aed      	subs	r5, r5, r3
 800469a:	2d19      	cmp	r5, #25
 800469c:	dc15      	bgt.n	80046ca <__ieee754_rem_pio2f+0x1a6>
 800469e:	46d8      	mov	r8, fp
 80046a0:	6020      	str	r0, [r4, #0]
 80046a2:	6825      	ldr	r5, [r4, #0]
 80046a4:	4640      	mov	r0, r8
 80046a6:	4629      	mov	r1, r5
 80046a8:	f7fb ffea 	bl	8000680 <__aeabi_fsub>
 80046ac:	4649      	mov	r1, r9
 80046ae:	f7fb ffe7 	bl	8000680 <__aeabi_fsub>
 80046b2:	2f00      	cmp	r7, #0
 80046b4:	6060      	str	r0, [r4, #4]
 80046b6:	f6bf af5f 	bge.w	8004578 <__ieee754_rem_pio2f+0x54>
 80046ba:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80046be:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80046c2:	6025      	str	r5, [r4, #0]
 80046c4:	6060      	str	r0, [r4, #4]
 80046c6:	4276      	negs	r6, r6
 80046c8:	e756      	b.n	8004578 <__ieee754_rem_pio2f+0x54>
 80046ca:	493f      	ldr	r1, [pc, #252]	; (80047c8 <__ieee754_rem_pio2f+0x2a4>)
 80046cc:	4650      	mov	r0, sl
 80046ce:	f7fc f8e1 	bl	8000894 <__aeabi_fmul>
 80046d2:	4605      	mov	r5, r0
 80046d4:	4601      	mov	r1, r0
 80046d6:	4658      	mov	r0, fp
 80046d8:	f7fb ffd2 	bl	8000680 <__aeabi_fsub>
 80046dc:	4601      	mov	r1, r0
 80046de:	4680      	mov	r8, r0
 80046e0:	4658      	mov	r0, fp
 80046e2:	f7fb ffcd 	bl	8000680 <__aeabi_fsub>
 80046e6:	4629      	mov	r1, r5
 80046e8:	f7fb ffca 	bl	8000680 <__aeabi_fsub>
 80046ec:	4605      	mov	r5, r0
 80046ee:	4937      	ldr	r1, [pc, #220]	; (80047cc <__ieee754_rem_pio2f+0x2a8>)
 80046f0:	4650      	mov	r0, sl
 80046f2:	f7fc f8cf 	bl	8000894 <__aeabi_fmul>
 80046f6:	4629      	mov	r1, r5
 80046f8:	f7fb ffc2 	bl	8000680 <__aeabi_fsub>
 80046fc:	4681      	mov	r9, r0
 80046fe:	e79a      	b.n	8004636 <__ieee754_rem_pio2f+0x112>
 8004700:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004704:	db05      	blt.n	8004712 <__ieee754_rem_pio2f+0x1ee>
 8004706:	4601      	mov	r1, r0
 8004708:	f7fb ffba 	bl	8000680 <__aeabi_fsub>
 800470c:	6060      	str	r0, [r4, #4]
 800470e:	6020      	str	r0, [r4, #0]
 8004710:	e715      	b.n	800453e <__ieee754_rem_pio2f+0x1a>
 8004712:	15ee      	asrs	r6, r5, #23
 8004714:	3e86      	subs	r6, #134	; 0x86
 8004716:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800471a:	4628      	mov	r0, r5
 800471c:	f7fc fa80 	bl	8000c20 <__aeabi_f2iz>
 8004720:	f7fc f864 	bl	80007ec <__aeabi_i2f>
 8004724:	4601      	mov	r1, r0
 8004726:	9003      	str	r0, [sp, #12]
 8004728:	4628      	mov	r0, r5
 800472a:	f7fb ffa9 	bl	8000680 <__aeabi_fsub>
 800472e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004732:	f7fc f8af 	bl	8000894 <__aeabi_fmul>
 8004736:	4680      	mov	r8, r0
 8004738:	f7fc fa72 	bl	8000c20 <__aeabi_f2iz>
 800473c:	f7fc f856 	bl	80007ec <__aeabi_i2f>
 8004740:	4601      	mov	r1, r0
 8004742:	9004      	str	r0, [sp, #16]
 8004744:	4605      	mov	r5, r0
 8004746:	4640      	mov	r0, r8
 8004748:	f7fb ff9a 	bl	8000680 <__aeabi_fsub>
 800474c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004750:	f7fc f8a0 	bl	8000894 <__aeabi_fmul>
 8004754:	2100      	movs	r1, #0
 8004756:	9005      	str	r0, [sp, #20]
 8004758:	f7fc fa30 	bl	8000bbc <__aeabi_fcmpeq>
 800475c:	b1e8      	cbz	r0, 800479a <__ieee754_rem_pio2f+0x276>
 800475e:	2100      	movs	r1, #0
 8004760:	4628      	mov	r0, r5
 8004762:	f7fc fa2b 	bl	8000bbc <__aeabi_fcmpeq>
 8004766:	2800      	cmp	r0, #0
 8004768:	bf14      	ite	ne
 800476a:	2301      	movne	r3, #1
 800476c:	2302      	moveq	r3, #2
 800476e:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <__ieee754_rem_pio2f+0x2ac>)
 8004770:	4621      	mov	r1, r4
 8004772:	9201      	str	r2, [sp, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	a803      	add	r0, sp, #12
 8004778:	9200      	str	r2, [sp, #0]
 800477a:	4632      	mov	r2, r6
 800477c:	f000 f8aa 	bl	80048d4 <__kernel_rem_pio2f>
 8004780:	2f00      	cmp	r7, #0
 8004782:	4606      	mov	r6, r0
 8004784:	f6bf aef8 	bge.w	8004578 <__ieee754_rem_pio2f+0x54>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800478e:	6023      	str	r3, [r4, #0]
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004796:	6063      	str	r3, [r4, #4]
 8004798:	e795      	b.n	80046c6 <__ieee754_rem_pio2f+0x1a2>
 800479a:	2303      	movs	r3, #3
 800479c:	e7e7      	b.n	800476e <__ieee754_rem_pio2f+0x24a>
 800479e:	bf00      	nop
 80047a0:	3f490fd8 	.word	0x3f490fd8
 80047a4:	4016cbe3 	.word	0x4016cbe3
 80047a8:	3fc90f80 	.word	0x3fc90f80
 80047ac:	3fc90fd0 	.word	0x3fc90fd0
 80047b0:	37354443 	.word	0x37354443
 80047b4:	37354400 	.word	0x37354400
 80047b8:	2e85a308 	.word	0x2e85a308
 80047bc:	43490f80 	.word	0x43490f80
 80047c0:	3f22f984 	.word	0x3f22f984
 80047c4:	08005070 	.word	0x08005070
 80047c8:	2e85a300 	.word	0x2e85a300
 80047cc:	248d3132 	.word	0x248d3132
 80047d0:	080050f0 	.word	0x080050f0

080047d4 <__kernel_cosf>:
 80047d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d8:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80047dc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80047e0:	4606      	mov	r6, r0
 80047e2:	4688      	mov	r8, r1
 80047e4:	da03      	bge.n	80047ee <__kernel_cosf+0x1a>
 80047e6:	f7fc fa1b 	bl	8000c20 <__aeabi_f2iz>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d05c      	beq.n	80048a8 <__kernel_cosf+0xd4>
 80047ee:	4631      	mov	r1, r6
 80047f0:	4630      	mov	r0, r6
 80047f2:	f7fc f84f 	bl	8000894 <__aeabi_fmul>
 80047f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80047fa:	4605      	mov	r5, r0
 80047fc:	f7fc f84a 	bl	8000894 <__aeabi_fmul>
 8004800:	492b      	ldr	r1, [pc, #172]	; (80048b0 <__kernel_cosf+0xdc>)
 8004802:	4607      	mov	r7, r0
 8004804:	4628      	mov	r0, r5
 8004806:	f7fc f845 	bl	8000894 <__aeabi_fmul>
 800480a:	492a      	ldr	r1, [pc, #168]	; (80048b4 <__kernel_cosf+0xe0>)
 800480c:	f7fb ff3a 	bl	8000684 <__addsf3>
 8004810:	4629      	mov	r1, r5
 8004812:	f7fc f83f 	bl	8000894 <__aeabi_fmul>
 8004816:	4928      	ldr	r1, [pc, #160]	; (80048b8 <__kernel_cosf+0xe4>)
 8004818:	f7fb ff32 	bl	8000680 <__aeabi_fsub>
 800481c:	4629      	mov	r1, r5
 800481e:	f7fc f839 	bl	8000894 <__aeabi_fmul>
 8004822:	4926      	ldr	r1, [pc, #152]	; (80048bc <__kernel_cosf+0xe8>)
 8004824:	f7fb ff2e 	bl	8000684 <__addsf3>
 8004828:	4629      	mov	r1, r5
 800482a:	f7fc f833 	bl	8000894 <__aeabi_fmul>
 800482e:	4924      	ldr	r1, [pc, #144]	; (80048c0 <__kernel_cosf+0xec>)
 8004830:	f7fb ff26 	bl	8000680 <__aeabi_fsub>
 8004834:	4629      	mov	r1, r5
 8004836:	f7fc f82d 	bl	8000894 <__aeabi_fmul>
 800483a:	4922      	ldr	r1, [pc, #136]	; (80048c4 <__kernel_cosf+0xf0>)
 800483c:	f7fb ff22 	bl	8000684 <__addsf3>
 8004840:	4629      	mov	r1, r5
 8004842:	f7fc f827 	bl	8000894 <__aeabi_fmul>
 8004846:	4629      	mov	r1, r5
 8004848:	f7fc f824 	bl	8000894 <__aeabi_fmul>
 800484c:	4641      	mov	r1, r8
 800484e:	4605      	mov	r5, r0
 8004850:	4630      	mov	r0, r6
 8004852:	f7fc f81f 	bl	8000894 <__aeabi_fmul>
 8004856:	4601      	mov	r1, r0
 8004858:	4628      	mov	r0, r5
 800485a:	f7fb ff11 	bl	8000680 <__aeabi_fsub>
 800485e:	4b1a      	ldr	r3, [pc, #104]	; (80048c8 <__kernel_cosf+0xf4>)
 8004860:	4605      	mov	r5, r0
 8004862:	429c      	cmp	r4, r3
 8004864:	dc0a      	bgt.n	800487c <__kernel_cosf+0xa8>
 8004866:	4601      	mov	r1, r0
 8004868:	4638      	mov	r0, r7
 800486a:	f7fb ff09 	bl	8000680 <__aeabi_fsub>
 800486e:	4601      	mov	r1, r0
 8004870:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004874:	f7fb ff04 	bl	8000680 <__aeabi_fsub>
 8004878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800487c:	4b13      	ldr	r3, [pc, #76]	; (80048cc <__kernel_cosf+0xf8>)
 800487e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004882:	429c      	cmp	r4, r3
 8004884:	bfcc      	ite	gt
 8004886:	4c12      	ldrgt	r4, [pc, #72]	; (80048d0 <__kernel_cosf+0xfc>)
 8004888:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800488c:	4621      	mov	r1, r4
 800488e:	f7fb fef7 	bl	8000680 <__aeabi_fsub>
 8004892:	4621      	mov	r1, r4
 8004894:	4606      	mov	r6, r0
 8004896:	4638      	mov	r0, r7
 8004898:	f7fb fef2 	bl	8000680 <__aeabi_fsub>
 800489c:	4629      	mov	r1, r5
 800489e:	f7fb feef 	bl	8000680 <__aeabi_fsub>
 80048a2:	4601      	mov	r1, r0
 80048a4:	4630      	mov	r0, r6
 80048a6:	e7e5      	b.n	8004874 <__kernel_cosf+0xa0>
 80048a8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80048ac:	e7e4      	b.n	8004878 <__kernel_cosf+0xa4>
 80048ae:	bf00      	nop
 80048b0:	ad47d74e 	.word	0xad47d74e
 80048b4:	310f74f6 	.word	0x310f74f6
 80048b8:	3493f27c 	.word	0x3493f27c
 80048bc:	37d00d01 	.word	0x37d00d01
 80048c0:	3ab60b61 	.word	0x3ab60b61
 80048c4:	3d2aaaab 	.word	0x3d2aaaab
 80048c8:	3e999999 	.word	0x3e999999
 80048cc:	3f480000 	.word	0x3f480000
 80048d0:	3e900000 	.word	0x3e900000

080048d4 <__kernel_rem_pio2f>:
 80048d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d8:	b0d9      	sub	sp, #356	; 0x164
 80048da:	9304      	str	r3, [sp, #16]
 80048dc:	9101      	str	r1, [sp, #4]
 80048de:	4bc3      	ldr	r3, [pc, #780]	; (8004bec <__kernel_rem_pio2f+0x318>)
 80048e0:	9962      	ldr	r1, [sp, #392]	; 0x188
 80048e2:	1ed4      	subs	r4, r2, #3
 80048e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80048e8:	2500      	movs	r5, #0
 80048ea:	9302      	str	r3, [sp, #8]
 80048ec:	9b04      	ldr	r3, [sp, #16]
 80048ee:	f04f 0a00 	mov.w	sl, #0
 80048f2:	3b01      	subs	r3, #1
 80048f4:	9303      	str	r3, [sp, #12]
 80048f6:	2308      	movs	r3, #8
 80048f8:	fb94 f4f3 	sdiv	r4, r4, r3
 80048fc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004900:	1c66      	adds	r6, r4, #1
 8004902:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8004906:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800490a:	eb03 0802 	add.w	r8, r3, r2
 800490e:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8004910:	1aa7      	subs	r7, r4, r2
 8004912:	9005      	str	r0, [sp, #20]
 8004914:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004918:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800491c:	4545      	cmp	r5, r8
 800491e:	dd7f      	ble.n	8004a20 <__kernel_rem_pio2f+0x14c>
 8004920:	f04f 0800 	mov.w	r8, #0
 8004924:	f04f 0a00 	mov.w	sl, #0
 8004928:	f06f 0b03 	mvn.w	fp, #3
 800492c:	9b04      	ldr	r3, [sp, #16]
 800492e:	aa1c      	add	r2, sp, #112	; 0x70
 8004930:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8004934:	ab44      	add	r3, sp, #272	; 0x110
 8004936:	9a02      	ldr	r2, [sp, #8]
 8004938:	4590      	cmp	r8, r2
 800493a:	f340 8097 	ble.w	8004a6c <__kernel_rem_pio2f+0x198>
 800493e:	4613      	mov	r3, r2
 8004940:	aa08      	add	r2, sp, #32
 8004942:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004946:	9307      	str	r3, [sp, #28]
 8004948:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800494a:	9f02      	ldr	r7, [sp, #8]
 800494c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004950:	9306      	str	r3, [sp, #24]
 8004952:	46ba      	mov	sl, r7
 8004954:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8004958:	ab58      	add	r3, sp, #352	; 0x160
 800495a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800495e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8004962:	ad07      	add	r5, sp, #28
 8004964:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8004968:	f1ba 0f00 	cmp.w	sl, #0
 800496c:	f300 8081 	bgt.w	8004a72 <__kernel_rem_pio2f+0x19e>
 8004970:	4631      	mov	r1, r6
 8004972:	4620      	mov	r0, r4
 8004974:	f000 fac6 	bl	8004f04 <scalbnf>
 8004978:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800497c:	4604      	mov	r4, r0
 800497e:	f7fb ff89 	bl	8000894 <__aeabi_fmul>
 8004982:	f7ff fd59 	bl	8004438 <floorf>
 8004986:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800498a:	f7fb ff83 	bl	8000894 <__aeabi_fmul>
 800498e:	4601      	mov	r1, r0
 8004990:	4620      	mov	r0, r4
 8004992:	f7fb fe75 	bl	8000680 <__aeabi_fsub>
 8004996:	4604      	mov	r4, r0
 8004998:	f7fc f942 	bl	8000c20 <__aeabi_f2iz>
 800499c:	4681      	mov	r9, r0
 800499e:	f7fb ff25 	bl	80007ec <__aeabi_i2f>
 80049a2:	4601      	mov	r1, r0
 80049a4:	4620      	mov	r0, r4
 80049a6:	f7fb fe6b 	bl	8000680 <__aeabi_fsub>
 80049aa:	2e00      	cmp	r6, #0
 80049ac:	4604      	mov	r4, r0
 80049ae:	dd7e      	ble.n	8004aae <__kernel_rem_pio2f+0x1da>
 80049b0:	1e7b      	subs	r3, r7, #1
 80049b2:	aa08      	add	r2, sp, #32
 80049b4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80049b8:	f1c6 0208 	rsb	r2, r6, #8
 80049bc:	fa45 f002 	asr.w	r0, r5, r2
 80049c0:	4481      	add	r9, r0
 80049c2:	4090      	lsls	r0, r2
 80049c4:	1a2d      	subs	r5, r5, r0
 80049c6:	aa08      	add	r2, sp, #32
 80049c8:	f1c6 0007 	rsb	r0, r6, #7
 80049cc:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 80049d0:	4105      	asrs	r5, r0
 80049d2:	2d00      	cmp	r5, #0
 80049d4:	dd79      	ble.n	8004aca <__kernel_rem_pio2f+0x1f6>
 80049d6:	2200      	movs	r2, #0
 80049d8:	4690      	mov	r8, r2
 80049da:	f109 0901 	add.w	r9, r9, #1
 80049de:	4297      	cmp	r7, r2
 80049e0:	f300 80ae 	bgt.w	8004b40 <__kernel_rem_pio2f+0x26c>
 80049e4:	2e00      	cmp	r6, #0
 80049e6:	dd05      	ble.n	80049f4 <__kernel_rem_pio2f+0x120>
 80049e8:	2e01      	cmp	r6, #1
 80049ea:	f000 80c0 	beq.w	8004b6e <__kernel_rem_pio2f+0x29a>
 80049ee:	2e02      	cmp	r6, #2
 80049f0:	f000 80c7 	beq.w	8004b82 <__kernel_rem_pio2f+0x2ae>
 80049f4:	2d02      	cmp	r5, #2
 80049f6:	d168      	bne.n	8004aca <__kernel_rem_pio2f+0x1f6>
 80049f8:	4621      	mov	r1, r4
 80049fa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80049fe:	f7fb fe3f 	bl	8000680 <__aeabi_fsub>
 8004a02:	4604      	mov	r4, r0
 8004a04:	f1b8 0f00 	cmp.w	r8, #0
 8004a08:	d05f      	beq.n	8004aca <__kernel_rem_pio2f+0x1f6>
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004a10:	f000 fa78 	bl	8004f04 <scalbnf>
 8004a14:	4601      	mov	r1, r0
 8004a16:	4620      	mov	r0, r4
 8004a18:	f7fb fe32 	bl	8000680 <__aeabi_fsub>
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	e054      	b.n	8004aca <__kernel_rem_pio2f+0x1f6>
 8004a20:	42ef      	cmn	r7, r5
 8004a22:	d407      	bmi.n	8004a34 <__kernel_rem_pio2f+0x160>
 8004a24:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004a28:	f7fb fee0 	bl	80007ec <__aeabi_i2f>
 8004a2c:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8004a30:	3501      	adds	r5, #1
 8004a32:	e773      	b.n	800491c <__kernel_rem_pio2f+0x48>
 8004a34:	4650      	mov	r0, sl
 8004a36:	e7f9      	b.n	8004a2c <__kernel_rem_pio2f+0x158>
 8004a38:	fb0b 5207 	mla	r2, fp, r7, r5
 8004a3c:	9306      	str	r3, [sp, #24]
 8004a3e:	9b05      	ldr	r3, [sp, #20]
 8004a40:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8004a44:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8004a48:	f7fb ff24 	bl	8000894 <__aeabi_fmul>
 8004a4c:	4601      	mov	r1, r0
 8004a4e:	4648      	mov	r0, r9
 8004a50:	f7fb fe18 	bl	8000684 <__addsf3>
 8004a54:	4681      	mov	r9, r0
 8004a56:	9b06      	ldr	r3, [sp, #24]
 8004a58:	3701      	adds	r7, #1
 8004a5a:	9a03      	ldr	r2, [sp, #12]
 8004a5c:	4297      	cmp	r7, r2
 8004a5e:	ddeb      	ble.n	8004a38 <__kernel_rem_pio2f+0x164>
 8004a60:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 8004a64:	3504      	adds	r5, #4
 8004a66:	f108 0801 	add.w	r8, r8, #1
 8004a6a:	e764      	b.n	8004936 <__kernel_rem_pio2f+0x62>
 8004a6c:	46d1      	mov	r9, sl
 8004a6e:	2700      	movs	r7, #0
 8004a70:	e7f3      	b.n	8004a5a <__kernel_rem_pio2f+0x186>
 8004a72:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8004a76:	4620      	mov	r0, r4
 8004a78:	f7fb ff0c 	bl	8000894 <__aeabi_fmul>
 8004a7c:	f7fc f8d0 	bl	8000c20 <__aeabi_f2iz>
 8004a80:	f7fb feb4 	bl	80007ec <__aeabi_i2f>
 8004a84:	4641      	mov	r1, r8
 8004a86:	4683      	mov	fp, r0
 8004a88:	f7fb ff04 	bl	8000894 <__aeabi_fmul>
 8004a8c:	4601      	mov	r1, r0
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f7fb fdf6 	bl	8000680 <__aeabi_fsub>
 8004a94:	f7fc f8c4 	bl	8000c20 <__aeabi_f2iz>
 8004a98:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004a9c:	f845 0f04 	str.w	r0, [r5, #4]!
 8004aa0:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8004aa4:	4658      	mov	r0, fp
 8004aa6:	f7fb fded 	bl	8000684 <__addsf3>
 8004aaa:	4604      	mov	r4, r0
 8004aac:	e75c      	b.n	8004968 <__kernel_rem_pio2f+0x94>
 8004aae:	d105      	bne.n	8004abc <__kernel_rem_pio2f+0x1e8>
 8004ab0:	1e7b      	subs	r3, r7, #1
 8004ab2:	aa08      	add	r2, sp, #32
 8004ab4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8004ab8:	122d      	asrs	r5, r5, #8
 8004aba:	e78a      	b.n	80049d2 <__kernel_rem_pio2f+0xfe>
 8004abc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004ac0:	f7fc f89a 	bl	8000bf8 <__aeabi_fcmpge>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d139      	bne.n	8004b3c <__kernel_rem_pio2f+0x268>
 8004ac8:	4605      	mov	r5, r0
 8004aca:	2100      	movs	r1, #0
 8004acc:	4620      	mov	r0, r4
 8004ace:	f7fc f875 	bl	8000bbc <__aeabi_fcmpeq>
 8004ad2:	2800      	cmp	r0, #0
 8004ad4:	f000 80a0 	beq.w	8004c18 <__kernel_rem_pio2f+0x344>
 8004ad8:	1e7c      	subs	r4, r7, #1
 8004ada:	4623      	mov	r3, r4
 8004adc:	2200      	movs	r2, #0
 8004ade:	9902      	ldr	r1, [sp, #8]
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	da55      	bge.n	8004b90 <__kernel_rem_pio2f+0x2bc>
 8004ae4:	2a00      	cmp	r2, #0
 8004ae6:	d07e      	beq.n	8004be6 <__kernel_rem_pio2f+0x312>
 8004ae8:	ab08      	add	r3, sp, #32
 8004aea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004aee:	3e08      	subs	r6, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 808f 	beq.w	8004c14 <__kernel_rem_pio2f+0x340>
 8004af6:	4631      	mov	r1, r6
 8004af8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004afc:	f000 fa02 	bl	8004f04 <scalbnf>
 8004b00:	46a0      	mov	r8, r4
 8004b02:	4682      	mov	sl, r0
 8004b04:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 8004b08:	af44      	add	r7, sp, #272	; 0x110
 8004b0a:	f1b8 0f00 	cmp.w	r8, #0
 8004b0e:	f280 80b5 	bge.w	8004c7c <__kernel_rem_pio2f+0x3a8>
 8004b12:	f04f 0a00 	mov.w	sl, #0
 8004b16:	2300      	movs	r3, #0
 8004b18:	00a6      	lsls	r6, r4, #2
 8004b1a:	4a35      	ldr	r2, [pc, #212]	; (8004bf0 <__kernel_rem_pio2f+0x31c>)
 8004b1c:	4437      	add	r7, r6
 8004b1e:	eba4 010a 	sub.w	r1, r4, sl
 8004b22:	2900      	cmp	r1, #0
 8004b24:	f280 80db 	bge.w	8004cde <__kernel_rem_pio2f+0x40a>
 8004b28:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	f200 80ff 	bhi.w	8004d2e <__kernel_rem_pio2f+0x45a>
 8004b30:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b34:	01200102 	.word	0x01200102
 8004b38:	00d90120 	.word	0x00d90120
 8004b3c:	2502      	movs	r5, #2
 8004b3e:	e74a      	b.n	80049d6 <__kernel_rem_pio2f+0x102>
 8004b40:	ab08      	add	r3, sp, #32
 8004b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b46:	f1b8 0f00 	cmp.w	r8, #0
 8004b4a:	d109      	bne.n	8004b60 <__kernel_rem_pio2f+0x28c>
 8004b4c:	b12b      	cbz	r3, 8004b5a <__kernel_rem_pio2f+0x286>
 8004b4e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004b52:	a908      	add	r1, sp, #32
 8004b54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004b58:	2301      	movs	r3, #1
 8004b5a:	3201      	adds	r2, #1
 8004b5c:	4698      	mov	r8, r3
 8004b5e:	e73e      	b.n	80049de <__kernel_rem_pio2f+0x10a>
 8004b60:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004b64:	a908      	add	r1, sp, #32
 8004b66:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004b6a:	4643      	mov	r3, r8
 8004b6c:	e7f5      	b.n	8004b5a <__kernel_rem_pio2f+0x286>
 8004b6e:	1e7a      	subs	r2, r7, #1
 8004b70:	ab08      	add	r3, sp, #32
 8004b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b7a:	a908      	add	r1, sp, #32
 8004b7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004b80:	e738      	b.n	80049f4 <__kernel_rem_pio2f+0x120>
 8004b82:	1e7a      	subs	r2, r7, #1
 8004b84:	ab08      	add	r3, sp, #32
 8004b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b8e:	e7f4      	b.n	8004b7a <__kernel_rem_pio2f+0x2a6>
 8004b90:	a908      	add	r1, sp, #32
 8004b92:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	e7a0      	b.n	8004ade <__kernel_rem_pio2f+0x20a>
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004ba2:	2900      	cmp	r1, #0
 8004ba4:	d0fa      	beq.n	8004b9c <__kernel_rem_pio2f+0x2c8>
 8004ba6:	f06f 0803 	mvn.w	r8, #3
 8004baa:	9a04      	ldr	r2, [sp, #16]
 8004bac:	1c7d      	adds	r5, r7, #1
 8004bae:	18bc      	adds	r4, r7, r2
 8004bb0:	aa1c      	add	r2, sp, #112	; 0x70
 8004bb2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004bb6:	441f      	add	r7, r3
 8004bb8:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8004bbc:	42af      	cmp	r7, r5
 8004bbe:	f6ff aec8 	blt.w	8004952 <__kernel_rem_pio2f+0x7e>
 8004bc2:	9b06      	ldr	r3, [sp, #24]
 8004bc4:	f04f 0a00 	mov.w	sl, #0
 8004bc8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004bcc:	f7fb fe0e 	bl	80007ec <__aeabi_i2f>
 8004bd0:	f04f 0b00 	mov.w	fp, #0
 8004bd4:	6020      	str	r0, [r4, #0]
 8004bd6:	9b03      	ldr	r3, [sp, #12]
 8004bd8:	459a      	cmp	sl, r3
 8004bda:	dd0b      	ble.n	8004bf4 <__kernel_rem_pio2f+0x320>
 8004bdc:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8004be0:	3404      	adds	r4, #4
 8004be2:	3501      	adds	r5, #1
 8004be4:	e7ea      	b.n	8004bbc <__kernel_rem_pio2f+0x2e8>
 8004be6:	9a07      	ldr	r2, [sp, #28]
 8004be8:	2301      	movs	r3, #1
 8004bea:	e7d8      	b.n	8004b9e <__kernel_rem_pio2f+0x2ca>
 8004bec:	08005434 	.word	0x08005434
 8004bf0:	08005408 	.word	0x08005408
 8004bf4:	fb08 f30a 	mul.w	r3, r8, sl
 8004bf8:	9a05      	ldr	r2, [sp, #20]
 8004bfa:	58e0      	ldr	r0, [r4, r3]
 8004bfc:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8004c00:	f7fb fe48 	bl	8000894 <__aeabi_fmul>
 8004c04:	4601      	mov	r1, r0
 8004c06:	4658      	mov	r0, fp
 8004c08:	f7fb fd3c 	bl	8000684 <__addsf3>
 8004c0c:	f10a 0a01 	add.w	sl, sl, #1
 8004c10:	4683      	mov	fp, r0
 8004c12:	e7e0      	b.n	8004bd6 <__kernel_rem_pio2f+0x302>
 8004c14:	3c01      	subs	r4, #1
 8004c16:	e767      	b.n	8004ae8 <__kernel_rem_pio2f+0x214>
 8004c18:	4271      	negs	r1, r6
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f000 f972 	bl	8004f04 <scalbnf>
 8004c20:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004c24:	4604      	mov	r4, r0
 8004c26:	f7fb ffe7 	bl	8000bf8 <__aeabi_fcmpge>
 8004c2a:	b1f8      	cbz	r0, 8004c6c <__kernel_rem_pio2f+0x398>
 8004c2c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8004c30:	4620      	mov	r0, r4
 8004c32:	f7fb fe2f 	bl	8000894 <__aeabi_fmul>
 8004c36:	f7fb fff3 	bl	8000c20 <__aeabi_f2iz>
 8004c3a:	f7fb fdd7 	bl	80007ec <__aeabi_i2f>
 8004c3e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004c42:	4680      	mov	r8, r0
 8004c44:	f7fb fe26 	bl	8000894 <__aeabi_fmul>
 8004c48:	4601      	mov	r1, r0
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f7fb fd18 	bl	8000680 <__aeabi_fsub>
 8004c50:	f7fb ffe6 	bl	8000c20 <__aeabi_f2iz>
 8004c54:	ab08      	add	r3, sp, #32
 8004c56:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004c5a:	4640      	mov	r0, r8
 8004c5c:	f7fb ffe0 	bl	8000c20 <__aeabi_f2iz>
 8004c60:	1c7c      	adds	r4, r7, #1
 8004c62:	ab08      	add	r3, sp, #32
 8004c64:	3608      	adds	r6, #8
 8004c66:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004c6a:	e744      	b.n	8004af6 <__kernel_rem_pio2f+0x222>
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f7fb ffd7 	bl	8000c20 <__aeabi_f2iz>
 8004c72:	ab08      	add	r3, sp, #32
 8004c74:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004c78:	463c      	mov	r4, r7
 8004c7a:	e73c      	b.n	8004af6 <__kernel_rem_pio2f+0x222>
 8004c7c:	ab08      	add	r3, sp, #32
 8004c7e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004c82:	f7fb fdb3 	bl	80007ec <__aeabi_i2f>
 8004c86:	4651      	mov	r1, sl
 8004c88:	f7fb fe04 	bl	8000894 <__aeabi_fmul>
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 8004c92:	4650      	mov	r0, sl
 8004c94:	f7fb fdfe 	bl	8000894 <__aeabi_fmul>
 8004c98:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004c9c:	4682      	mov	sl, r0
 8004c9e:	e734      	b.n	8004b0a <__kernel_rem_pio2f+0x236>
 8004ca0:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8004ca4:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8004ca8:	9304      	str	r3, [sp, #16]
 8004caa:	9203      	str	r2, [sp, #12]
 8004cac:	f7fb fdf2 	bl	8000894 <__aeabi_fmul>
 8004cb0:	4601      	mov	r1, r0
 8004cb2:	4658      	mov	r0, fp
 8004cb4:	f7fb fce6 	bl	8000684 <__addsf3>
 8004cb8:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8004cbc:	4683      	mov	fp, r0
 8004cbe:	f108 0801 	add.w	r8, r8, #1
 8004cc2:	9902      	ldr	r1, [sp, #8]
 8004cc4:	4588      	cmp	r8, r1
 8004cc6:	dc01      	bgt.n	8004ccc <__kernel_rem_pio2f+0x3f8>
 8004cc8:	45c2      	cmp	sl, r8
 8004cca:	dae9      	bge.n	8004ca0 <__kernel_rem_pio2f+0x3cc>
 8004ccc:	a958      	add	r1, sp, #352	; 0x160
 8004cce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004cd2:	f841 bca0 	str.w	fp, [r1, #-160]
 8004cd6:	f10a 0a01 	add.w	sl, sl, #1
 8004cda:	3f04      	subs	r7, #4
 8004cdc:	e71f      	b.n	8004b1e <__kernel_rem_pio2f+0x24a>
 8004cde:	469b      	mov	fp, r3
 8004ce0:	f04f 0800 	mov.w	r8, #0
 8004ce4:	e7ed      	b.n	8004cc2 <__kernel_rem_pio2f+0x3ee>
 8004ce6:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 8004cea:	4456      	add	r6, sl
 8004cec:	4637      	mov	r7, r6
 8004cee:	46a0      	mov	r8, r4
 8004cf0:	f1b8 0f00 	cmp.w	r8, #0
 8004cf4:	dc4a      	bgt.n	8004d8c <__kernel_rem_pio2f+0x4b8>
 8004cf6:	4627      	mov	r7, r4
 8004cf8:	2f01      	cmp	r7, #1
 8004cfa:	dc60      	bgt.n	8004dbe <__kernel_rem_pio2f+0x4ea>
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	2c01      	cmp	r4, #1
 8004d00:	dc74      	bgt.n	8004dec <__kernel_rem_pio2f+0x518>
 8004d02:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8004d04:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8004d06:	2d00      	cmp	r5, #0
 8004d08:	d176      	bne.n	8004df8 <__kernel_rem_pio2f+0x524>
 8004d0a:	9901      	ldr	r1, [sp, #4]
 8004d0c:	600a      	str	r2, [r1, #0]
 8004d0e:	460a      	mov	r2, r1
 8004d10:	604b      	str	r3, [r1, #4]
 8004d12:	6090      	str	r0, [r2, #8]
 8004d14:	e00b      	b.n	8004d2e <__kernel_rem_pio2f+0x45a>
 8004d16:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8004d1a:	f7fb fcb3 	bl	8000684 <__addsf3>
 8004d1e:	3c01      	subs	r4, #1
 8004d20:	2c00      	cmp	r4, #0
 8004d22:	daf8      	bge.n	8004d16 <__kernel_rem_pio2f+0x442>
 8004d24:	b10d      	cbz	r5, 8004d2a <__kernel_rem_pio2f+0x456>
 8004d26:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004d2a:	9b01      	ldr	r3, [sp, #4]
 8004d2c:	6018      	str	r0, [r3, #0]
 8004d2e:	f009 0007 	and.w	r0, r9, #7
 8004d32:	b059      	add	sp, #356	; 0x164
 8004d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d38:	2000      	movs	r0, #0
 8004d3a:	ae30      	add	r6, sp, #192	; 0xc0
 8004d3c:	e7f0      	b.n	8004d20 <__kernel_rem_pio2f+0x44c>
 8004d3e:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8004d42:	f7fb fc9f 	bl	8000684 <__addsf3>
 8004d46:	3e01      	subs	r6, #1
 8004d48:	2e00      	cmp	r6, #0
 8004d4a:	daf8      	bge.n	8004d3e <__kernel_rem_pio2f+0x46a>
 8004d4c:	b1b5      	cbz	r5, 8004d7c <__kernel_rem_pio2f+0x4a8>
 8004d4e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8004d52:	9a01      	ldr	r2, [sp, #4]
 8004d54:	af58      	add	r7, sp, #352	; 0x160
 8004d56:	4601      	mov	r1, r0
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8004d5e:	f7fb fc8f 	bl	8000680 <__aeabi_fsub>
 8004d62:	2601      	movs	r6, #1
 8004d64:	42b4      	cmp	r4, r6
 8004d66:	da0b      	bge.n	8004d80 <__kernel_rem_pio2f+0x4ac>
 8004d68:	b10d      	cbz	r5, 8004d6e <__kernel_rem_pio2f+0x49a>
 8004d6a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004d6e:	9b01      	ldr	r3, [sp, #4]
 8004d70:	6058      	str	r0, [r3, #4]
 8004d72:	e7dc      	b.n	8004d2e <__kernel_rem_pio2f+0x45a>
 8004d74:	4626      	mov	r6, r4
 8004d76:	2000      	movs	r0, #0
 8004d78:	af30      	add	r7, sp, #192	; 0xc0
 8004d7a:	e7e5      	b.n	8004d48 <__kernel_rem_pio2f+0x474>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	e7e8      	b.n	8004d52 <__kernel_rem_pio2f+0x47e>
 8004d80:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8004d84:	f7fb fc7e 	bl	8000684 <__addsf3>
 8004d88:	3601      	adds	r6, #1
 8004d8a:	e7eb      	b.n	8004d64 <__kernel_rem_pio2f+0x490>
 8004d8c:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8004d90:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4610      	mov	r0, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	9303      	str	r3, [sp, #12]
 8004d9c:	9202      	str	r2, [sp, #8]
 8004d9e:	f7fb fc71 	bl	8000684 <__addsf3>
 8004da2:	9a02      	ldr	r2, [sp, #8]
 8004da4:	4601      	mov	r1, r0
 8004da6:	4683      	mov	fp, r0
 8004da8:	4610      	mov	r0, r2
 8004daa:	f7fb fc69 	bl	8000680 <__aeabi_fsub>
 8004dae:	9b03      	ldr	r3, [sp, #12]
 8004db0:	4619      	mov	r1, r3
 8004db2:	f7fb fc67 	bl	8000684 <__addsf3>
 8004db6:	f8c7 b000 	str.w	fp, [r7]
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	e798      	b.n	8004cf0 <__kernel_rem_pio2f+0x41c>
 8004dbe:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8004dc2:	3f01      	subs	r7, #1
 8004dc4:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	4659      	mov	r1, fp
 8004dcc:	9302      	str	r3, [sp, #8]
 8004dce:	f7fb fc59 	bl	8000684 <__addsf3>
 8004dd2:	9b02      	ldr	r3, [sp, #8]
 8004dd4:	4601      	mov	r1, r0
 8004dd6:	4680      	mov	r8, r0
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fb fc51 	bl	8000680 <__aeabi_fsub>
 8004dde:	4659      	mov	r1, fp
 8004de0:	f7fb fc50 	bl	8000684 <__addsf3>
 8004de4:	f8c6 8000 	str.w	r8, [r6]
 8004de8:	6070      	str	r0, [r6, #4]
 8004dea:	e785      	b.n	8004cf8 <__kernel_rem_pio2f+0x424>
 8004dec:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8004df0:	f7fb fc48 	bl	8000684 <__addsf3>
 8004df4:	3c01      	subs	r4, #1
 8004df6:	e782      	b.n	8004cfe <__kernel_rem_pio2f+0x42a>
 8004df8:	9901      	ldr	r1, [sp, #4]
 8004dfa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8004dfe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004e02:	600a      	str	r2, [r1, #0]
 8004e04:	604b      	str	r3, [r1, #4]
 8004e06:	460a      	mov	r2, r1
 8004e08:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004e0c:	e781      	b.n	8004d12 <__kernel_rem_pio2f+0x43e>
 8004e0e:	bf00      	nop

08004e10 <__kernel_sinf>:
 8004e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e14:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004e18:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	460f      	mov	r7, r1
 8004e20:	4691      	mov	r9, r2
 8004e22:	da03      	bge.n	8004e2c <__kernel_sinf+0x1c>
 8004e24:	f7fb fefc 	bl	8000c20 <__aeabi_f2iz>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	d035      	beq.n	8004e98 <__kernel_sinf+0x88>
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f7fb fd30 	bl	8000894 <__aeabi_fmul>
 8004e34:	4605      	mov	r5, r0
 8004e36:	4601      	mov	r1, r0
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f7fb fd2b 	bl	8000894 <__aeabi_fmul>
 8004e3e:	4929      	ldr	r1, [pc, #164]	; (8004ee4 <__kernel_sinf+0xd4>)
 8004e40:	4606      	mov	r6, r0
 8004e42:	4628      	mov	r0, r5
 8004e44:	f7fb fd26 	bl	8000894 <__aeabi_fmul>
 8004e48:	4927      	ldr	r1, [pc, #156]	; (8004ee8 <__kernel_sinf+0xd8>)
 8004e4a:	f7fb fc19 	bl	8000680 <__aeabi_fsub>
 8004e4e:	4629      	mov	r1, r5
 8004e50:	f7fb fd20 	bl	8000894 <__aeabi_fmul>
 8004e54:	4925      	ldr	r1, [pc, #148]	; (8004eec <__kernel_sinf+0xdc>)
 8004e56:	f7fb fc15 	bl	8000684 <__addsf3>
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	f7fb fd1a 	bl	8000894 <__aeabi_fmul>
 8004e60:	4923      	ldr	r1, [pc, #140]	; (8004ef0 <__kernel_sinf+0xe0>)
 8004e62:	f7fb fc0d 	bl	8000680 <__aeabi_fsub>
 8004e66:	4629      	mov	r1, r5
 8004e68:	f7fb fd14 	bl	8000894 <__aeabi_fmul>
 8004e6c:	4921      	ldr	r1, [pc, #132]	; (8004ef4 <__kernel_sinf+0xe4>)
 8004e6e:	f7fb fc09 	bl	8000684 <__addsf3>
 8004e72:	4680      	mov	r8, r0
 8004e74:	f1b9 0f00 	cmp.w	r9, #0
 8004e78:	d111      	bne.n	8004e9e <__kernel_sinf+0x8e>
 8004e7a:	4601      	mov	r1, r0
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f7fb fd09 	bl	8000894 <__aeabi_fmul>
 8004e82:	491d      	ldr	r1, [pc, #116]	; (8004ef8 <__kernel_sinf+0xe8>)
 8004e84:	f7fb fbfc 	bl	8000680 <__aeabi_fsub>
 8004e88:	4631      	mov	r1, r6
 8004e8a:	f7fb fd03 	bl	8000894 <__aeabi_fmul>
 8004e8e:	4601      	mov	r1, r0
 8004e90:	4620      	mov	r0, r4
 8004e92:	f7fb fbf7 	bl	8000684 <__addsf3>
 8004e96:	4604      	mov	r4, r0
 8004e98:	4620      	mov	r0, r4
 8004e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e9e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004ea2:	4638      	mov	r0, r7
 8004ea4:	f7fb fcf6 	bl	8000894 <__aeabi_fmul>
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	4681      	mov	r9, r0
 8004eac:	4630      	mov	r0, r6
 8004eae:	f7fb fcf1 	bl	8000894 <__aeabi_fmul>
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	4648      	mov	r0, r9
 8004eb6:	f7fb fbe3 	bl	8000680 <__aeabi_fsub>
 8004eba:	4629      	mov	r1, r5
 8004ebc:	f7fb fcea 	bl	8000894 <__aeabi_fmul>
 8004ec0:	4639      	mov	r1, r7
 8004ec2:	f7fb fbdd 	bl	8000680 <__aeabi_fsub>
 8004ec6:	490c      	ldr	r1, [pc, #48]	; (8004ef8 <__kernel_sinf+0xe8>)
 8004ec8:	4605      	mov	r5, r0
 8004eca:	4630      	mov	r0, r6
 8004ecc:	f7fb fce2 	bl	8000894 <__aeabi_fmul>
 8004ed0:	4601      	mov	r1, r0
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f7fb fbd6 	bl	8000684 <__addsf3>
 8004ed8:	4601      	mov	r1, r0
 8004eda:	4620      	mov	r0, r4
 8004edc:	f7fb fbd0 	bl	8000680 <__aeabi_fsub>
 8004ee0:	e7d9      	b.n	8004e96 <__kernel_sinf+0x86>
 8004ee2:	bf00      	nop
 8004ee4:	2f2ec9d3 	.word	0x2f2ec9d3
 8004ee8:	32d72f34 	.word	0x32d72f34
 8004eec:	3638ef1b 	.word	0x3638ef1b
 8004ef0:	39500d01 	.word	0x39500d01
 8004ef4:	3c088889 	.word	0x3c088889
 8004ef8:	3e2aaaab 	.word	0x3e2aaaab

08004efc <fabsf>:
 8004efc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004f00:	4770      	bx	lr
	...

08004f04 <scalbnf>:
 8004f04:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8004f08:	b510      	push	{r4, lr}
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	4601      	mov	r1, r0
 8004f10:	d027      	beq.n	8004f62 <scalbnf+0x5e>
 8004f12:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004f16:	d303      	bcc.n	8004f20 <scalbnf+0x1c>
 8004f18:	f7fb fbb4 	bl	8000684 <__addsf3>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	e020      	b.n	8004f62 <scalbnf+0x5e>
 8004f20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f24:	d215      	bcs.n	8004f52 <scalbnf+0x4e>
 8004f26:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8004f2a:	f7fb fcb3 	bl	8000894 <__aeabi_fmul>
 8004f2e:	4b18      	ldr	r3, [pc, #96]	; (8004f90 <scalbnf+0x8c>)
 8004f30:	4602      	mov	r2, r0
 8004f32:	429c      	cmp	r4, r3
 8004f34:	db22      	blt.n	8004f7c <scalbnf+0x78>
 8004f36:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004f3a:	3b19      	subs	r3, #25
 8004f3c:	4423      	add	r3, r4
 8004f3e:	2bfe      	cmp	r3, #254	; 0xfe
 8004f40:	dd09      	ble.n	8004f56 <scalbnf+0x52>
 8004f42:	4611      	mov	r1, r2
 8004f44:	4813      	ldr	r0, [pc, #76]	; (8004f94 <scalbnf+0x90>)
 8004f46:	f000 f829 	bl	8004f9c <copysignf>
 8004f4a:	4912      	ldr	r1, [pc, #72]	; (8004f94 <scalbnf+0x90>)
 8004f4c:	f7fb fca2 	bl	8000894 <__aeabi_fmul>
 8004f50:	e7e4      	b.n	8004f1c <scalbnf+0x18>
 8004f52:	0ddb      	lsrs	r3, r3, #23
 8004f54:	e7f2      	b.n	8004f3c <scalbnf+0x38>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	dd05      	ble.n	8004f66 <scalbnf+0x62>
 8004f5a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8004f5e:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8004f62:	4610      	mov	r0, r2
 8004f64:	bd10      	pop	{r4, pc}
 8004f66:	f113 0f16 	cmn.w	r3, #22
 8004f6a:	da09      	bge.n	8004f80 <scalbnf+0x7c>
 8004f6c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004f70:	429c      	cmp	r4, r3
 8004f72:	4611      	mov	r1, r2
 8004f74:	dce6      	bgt.n	8004f44 <scalbnf+0x40>
 8004f76:	4808      	ldr	r0, [pc, #32]	; (8004f98 <scalbnf+0x94>)
 8004f78:	f000 f810 	bl	8004f9c <copysignf>
 8004f7c:	4906      	ldr	r1, [pc, #24]	; (8004f98 <scalbnf+0x94>)
 8004f7e:	e7e5      	b.n	8004f4c <scalbnf+0x48>
 8004f80:	3319      	adds	r3, #25
 8004f82:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8004f86:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8004f8a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8004f8e:	e7dd      	b.n	8004f4c <scalbnf+0x48>
 8004f90:	ffff3cb0 	.word	0xffff3cb0
 8004f94:	7149f2ca 	.word	0x7149f2ca
 8004f98:	0da24260 	.word	0x0da24260

08004f9c <copysignf>:
 8004f9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004fa0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004fa4:	4308      	orrs	r0, r1
 8004fa6:	4770      	bx	lr

08004fa8 <_init>:
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	bf00      	nop
 8004fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fae:	bc08      	pop	{r3}
 8004fb0:	469e      	mov	lr, r3
 8004fb2:	4770      	bx	lr

08004fb4 <_fini>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	bf00      	nop
 8004fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fba:	bc08      	pop	{r3}
 8004fbc:	469e      	mov	lr, r3
 8004fbe:	4770      	bx	lr
