
svpwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006050  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08006160  08006160  00016160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e0  080065e0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080065e0  080065e0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065e0  080065e0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065e0  080065e0  000165e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065e4  080065e4  000165e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080065e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000078  08006660  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08006660  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d331  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cb1  00000000  00000000  0002d3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db0  00000000  00000000  0002f088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf0  00000000  00000000  0002fe38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015a06  00000000  00000000  00030b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098eb  00000000  00000000  0004652e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078735  00000000  00000000  0004fe19  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c854e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043bc  00000000  00000000  000c85cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08006148 	.word	0x08006148

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08006148 	.word	0x08006148

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a48:	f1a2 0201 	sub.w	r2, r2, #1
 8000a4c:	d1ed      	bne.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f8c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d013      	beq.n	8000fc0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f9c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fa0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00b      	beq.n	8000fc0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fa8:	e000      	b.n	8000fac <ITM_SendChar+0x2c>
    {
      __NOP();
 8000faa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f9      	beq.n	8000faa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fb6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fc0:	687b      	ldr	r3, [r7, #4]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
	for(i=0; i < len; i++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e009      	b.n	8000ff6 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	60ba      	str	r2, [r7, #8]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffc8 	bl	8000f80 <ITM_SendChar>
	for(i=0; i < len; i++) {
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	dbf1      	blt.n	8000fe2 <_write+0x16>
	}
	return len;
 8000ffe:	687b      	ldr	r3, [r7, #4]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_TIM_PeriodElapsedCallback>:

uint16_t electricOffset = 35;
uint16_t electricRange = 585;
uint16_t electricAngle = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1_1) {
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b08f      	sub	sp, #60	; 0x3c
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	float third_sector = floorf(theta / S_2_PI_3);
 8001010:	4b6f      	ldr	r3, [pc, #444]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a6f      	ldr	r2, [pc, #444]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe79 	bl	8000d10 <__aeabi_fdiv>
 800101e:	4603      	mov	r3, r0
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fad9 	bl	80055d8 <floorf>
 8001026:	6338      	str	r0, [r7, #48]	; 0x30
	float third_sector_theta = theta - third_sector * S_2_PI_3;
 8001028:	4b69      	ldr	r3, [pc, #420]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800102a:	681c      	ldr	r4, [r3, #0]
 800102c:	4b69      	ldr	r3, [pc, #420]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800102e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fdb9 	bl	8000ba8 <__aeabi_fmul>
 8001036:	4603      	mov	r3, r0
 8001038:	4619      	mov	r1, r3
 800103a:	4620      	mov	r0, r4
 800103c:	f7ff fcaa 	bl	8000994 <__aeabi_fsub>
 8001040:	4603      	mov	r3, r0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c

	float x = cosf(third_sector_theta);
 8001044:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001046:	f004 fa93 	bl	8005570 <cosf>
 800104a:	62b8      	str	r0, [r7, #40]	; 0x28
	float y = sinf(third_sector_theta);
 800104c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800104e:	f004 fb03 	bl	8005658 <sinf>
 8001052:	6278      	str	r0, [r7, #36]	; 0x24

	float a = SCALE_TO_ONE * (S_1_SQRT3 * y + x);
 8001054:	4b60      	ldr	r3, [pc, #384]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001056:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fda5 	bl	8000ba8 <__aeabi_fmul>
 800105e:	4603      	mov	r3, r0
 8001060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fc98 	bl	8000998 <__addsf3>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b5b      	ldr	r3, [pc, #364]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800106e:	4619      	mov	r1, r3
 8001070:	4610      	mov	r0, r2
 8001072:	f7ff fd99 	bl	8000ba8 <__aeabi_fmul>
 8001076:	4603      	mov	r3, r0
 8001078:	623b      	str	r3, [r7, #32]
	float b = SCALE_TO_ONE * (S_2_SQRT3 * y);
 800107a:	4b59      	ldr	r3, [pc, #356]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800107c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fd92 	bl	8000ba8 <__aeabi_fmul>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	4b54      	ldr	r3, [pc, #336]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800108a:	4619      	mov	r1, r3
 800108c:	4610      	mov	r0, r2
 800108e:	f7ff fd8b 	bl	8000ba8 <__aeabi_fmul>
 8001092:	4603      	mov	r3, r0
 8001094:	61fb      	str	r3, [r7, #28]

	float p = 20.0f * (desiredVelocity - velocity);
 8001096:	4b53      	ldr	r3, [pc, #332]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b53      	ldr	r3, [pc, #332]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fd2d 	bl	8000b00 <__aeabi_i2f>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4950      	ldr	r1, [pc, #320]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fd7c 	bl	8000ba8 <__aeabi_fmul>
 80010b0:	4603      	mov	r3, r0
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34

	if (p < 0.0f) {
 80010b4:	f04f 0100 	mov.w	r1, #0
 80010b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010ba:	f7ff ff13 	bl	8000ee4 <__aeabi_fcmplt>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <HAL_TIM_PeriodElapsedCallback+0xc2>
		p = 0.0f;
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
	}

	float multiplyBy = (150.0f + p) * (1.0f + 12.5f * thetaAdd);
 80010ca:	4949      	ldr	r1, [pc, #292]	; (80011f0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80010cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010ce:	f7ff fc63 	bl	8000998 <__addsf3>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461c      	mov	r4, r3
 80010d6:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4947      	ldr	r1, [pc, #284]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fd63 	bl	8000ba8 <__aeabi_fmul>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fc55 	bl	8000998 <__addsf3>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4619      	mov	r1, r3
 80010f2:	4620      	mov	r0, r4
 80010f4:	f7ff fd58 	bl	8000ba8 <__aeabi_fmul>
 80010f8:	4603      	mov	r3, r0
 80010fa:	61bb      	str	r3, [r7, #24]
	int addTo = (5000.0f - multiplyBy) / 2.0f;
 80010fc:	69b9      	ldr	r1, [r7, #24]
 80010fe:	483f      	ldr	r0, [pc, #252]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001100:	f7ff fc48 	bl	8000994 <__aeabi_fsub>
 8001104:	4603      	mov	r3, r0
 8001106:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe00 	bl	8000d10 <__aeabi_fdiv>
 8001110:	4603      	mov	r3, r0
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff0e 	bl	8000f34 <__aeabi_f2iz>
 8001118:	4603      	mov	r3, r0
 800111a:	617b      	str	r3, [r7, #20]

	int a_time = a * multiplyBy;
 800111c:	69b9      	ldr	r1, [r7, #24]
 800111e:	6a38      	ldr	r0, [r7, #32]
 8001120:	f7ff fd42 	bl	8000ba8 <__aeabi_fmul>
 8001124:	4603      	mov	r3, r0
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff04 	bl	8000f34 <__aeabi_f2iz>
 800112c:	4603      	mov	r3, r0
 800112e:	613b      	str	r3, [r7, #16]
	int b_time = b * multiplyBy;
 8001130:	69b9      	ldr	r1, [r7, #24]
 8001132:	69f8      	ldr	r0, [r7, #28]
 8001134:	f7ff fd38 	bl	8000ba8 <__aeabi_fmul>
 8001138:	4603      	mov	r3, r0
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff fefa 	bl	8000f34 <__aeabi_f2iz>
 8001140:	4603      	mov	r3, r0
 8001142:	60fb      	str	r3, [r7, #12]

	if (third_sector == 0) {
 8001144:	f04f 0100 	mov.w	r1, #0
 8001148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800114a:	f7ff fec1 	bl	8000ed0 <__aeabi_fcmpeq>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d010      	beq.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x16e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, a_time + addTo);
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	441a      	add	r2, r3
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, b_time + addTo);
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	441a      	add	r2, r3
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, addTo);
 800116c:	4b24      	ldr	r3, [pc, #144]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	63da      	str	r2, [r3, #60]	; 0x3c
//	thetaAdd += 0.0000002f;
//
//	if (theta >= 2.0f * M_PI) {
//		theta -= 2.0f * M_PI;
//	}
}
 8001174:	e028      	b.n	80011c8 <HAL_TIM_PeriodElapsedCallback+0x1c0>
	} else if (third_sector == 1) {
 8001176:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800117a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800117c:	f7ff fea8 	bl	8000ed0 <__aeabi_fcmpeq>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d010      	beq.n	80011a8 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, addTo);
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, a_time + addTo);
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	441a      	add	r2, r3
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b_time + addTo);
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	441a      	add	r2, r3
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011a6:	e00f      	b.n	80011c8 <HAL_TIM_PeriodElapsedCallback+0x1c0>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, b_time + addTo);
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	441a      	add	r2, r3
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, addTo);
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, a_time + addTo);
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	441a      	add	r2, r3
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80011c8:	bf00      	nop
 80011ca:	373c      	adds	r7, #60	; 0x3c
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	20000094 	.word	0x20000094
 80011d4:	40060a92 	.word	0x40060a92
 80011d8:	3f13cd3a 	.word	0x3f13cd3a
 80011dc:	3f5db3d8 	.word	0x3f5db3d8
 80011e0:	3f93cd3a 	.word	0x3f93cd3a
 80011e4:	20000000 	.word	0x20000000
 80011e8:	200000a0 	.word	0x200000a0
 80011ec:	41a00000 	.word	0x41a00000
 80011f0:	43160000 	.word	0x43160000
 80011f4:	20000098 	.word	0x20000098
 80011f8:	41480000 	.word	0x41480000
 80011fc:	459c4000 	.word	0x459c4000
 8001200:	20000138 	.word	0x20000138
 8001204:	00000000 	.word	0x00000000

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120e:	f000 fcf3 	bl	8001bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001212:	f000 f8eb 	bl	80013ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001216:	f000 fa6d 	bl	80016f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800121a:	f000 f9ad 	bl	8001578 <MX_TIM1_Init>
  MX_ADC1_Init();
 800121e:	f000 f93f 	bl	80014a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001222:	f000 f97b 	bl	800151c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8001226:	4b66      	ldr	r3, [pc, #408]	; (80013c0 <main+0x1b8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <main+0x1b8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0201 	orr.w	r2, r2, #1
 8001234:	60da      	str	r2, [r3, #12]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001236:	2100      	movs	r1, #0
 8001238:	4861      	ldr	r0, [pc, #388]	; (80013c0 <main+0x1b8>)
 800123a:	f002 fe8b 	bl	8003f54 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800123e:	2100      	movs	r1, #0
 8001240:	485f      	ldr	r0, [pc, #380]	; (80013c0 <main+0x1b8>)
 8001242:	f003 fc07 	bl	8004a54 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001246:	2104      	movs	r1, #4
 8001248:	485d      	ldr	r0, [pc, #372]	; (80013c0 <main+0x1b8>)
 800124a:	f002 fe83 	bl	8003f54 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800124e:	2104      	movs	r1, #4
 8001250:	485b      	ldr	r0, [pc, #364]	; (80013c0 <main+0x1b8>)
 8001252:	f003 fbff 	bl	8004a54 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001256:	2108      	movs	r1, #8
 8001258:	4859      	ldr	r0, [pc, #356]	; (80013c0 <main+0x1b8>)
 800125a:	f002 fe7b 	bl	8003f54 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800125e:	2108      	movs	r1, #8
 8001260:	4857      	ldr	r0, [pc, #348]	; (80013c0 <main+0x1b8>)
 8001262:	f003 fbf7 	bl	8004a54 <HAL_TIMEx_PWMN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  buf[0] = RAW_ANGLE_REG;
 8001266:	230c      	movs	r3, #12
 8001268:	703b      	strb	r3, [r7, #0]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, buf, 1, 1000);
 800126a:	236c      	movs	r3, #108	; 0x6c
 800126c:	b299      	uxth	r1, r3
 800126e:	463a      	mov	r2, r7
 8001270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2301      	movs	r3, #1
 8001278:	4852      	ldr	r0, [pc, #328]	; (80013c4 <main+0x1bc>)
 800127a:	f001 fac9 	bl	8002810 <HAL_I2C_Master_Transmit>
 800127e:	4603      	mov	r3, r0
 8001280:	73fb      	strb	r3, [r7, #15]
	  if (ret == HAL_BUSY) {
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d103      	bne.n	8001290 <main+0x88>
		  printf("Busy Tx\n");
 8001288:	484f      	ldr	r0, [pc, #316]	; (80013c8 <main+0x1c0>)
 800128a:	f003 fd67 	bl	8004d5c <puts>
 800128e:	e7ea      	b.n	8001266 <main+0x5e>
	  } else if (ret == HAL_ERROR) {
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d103      	bne.n	800129e <main+0x96>
		  printf("Error Tx\n");
 8001296:	484d      	ldr	r0, [pc, #308]	; (80013cc <main+0x1c4>)
 8001298:	f003 fd60 	bl	8004d5c <puts>
 800129c:	e7e3      	b.n	8001266 <main+0x5e>
	  } else {
		  // Read 2 bytes from the temperature register
		  ret = HAL_I2C_Master_Receive(&hi2c1, AS5600_ADDR, buf, 2, 1000);
 800129e:	236c      	movs	r3, #108	; 0x6c
 80012a0:	b299      	uxth	r1, r3
 80012a2:	463a      	mov	r2, r7
 80012a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2302      	movs	r3, #2
 80012ac:	4845      	ldr	r0, [pc, #276]	; (80013c4 <main+0x1bc>)
 80012ae:	f001 fbad 	bl	8002a0c <HAL_I2C_Master_Receive>
 80012b2:	4603      	mov	r3, r0
 80012b4:	73fb      	strb	r3, [r7, #15]
		  if (ret != HAL_OK) {
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <main+0xbc>
			  printf("Error Rx\n");
 80012bc:	4844      	ldr	r0, [pc, #272]	; (80013d0 <main+0x1c8>)
 80012be:	f003 fd4d 	bl	8004d5c <puts>
 80012c2:	e7d0      	b.n	8001266 <main+0x5e>
		  } else {
			  uint16_t rawAngle = (((uint16_t) buf[0]) << 8) + buf[1];
 80012c4:	783b      	ldrb	r3, [r7, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4413      	add	r3, r2
 80012d2:	81bb      	strh	r3, [r7, #12]
//			  printf("Read I2C %u\n", rawAngle);

			  if (lastRawAngle > 3995 && rawAngle < 100) {
 80012d4:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <main+0x1cc>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	f640 729b 	movw	r2, #3995	; 0xf9b
 80012dc:	4293      	cmp	r3, r2
 80012de:	d90c      	bls.n	80012fa <main+0xf2>
 80012e0:	89bb      	ldrh	r3, [r7, #12]
 80012e2:	2b63      	cmp	r3, #99	; 0x63
 80012e4:	d809      	bhi.n	80012fa <main+0xf2>
				  velocity = 4095 - ((int)lastRawAngle) + ((int)rawAngle);
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <main+0x1cc>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80012ee:	330f      	adds	r3, #15
 80012f0:	89ba      	ldrh	r2, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <main+0x1d0>)
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e005      	b.n	8001306 <main+0xfe>
			  } else {
				  velocity = ((int)rawAngle) - ((int)lastRawAngle);
 80012fa:	89bb      	ldrh	r3, [r7, #12]
 80012fc:	4a35      	ldr	r2, [pc, #212]	; (80013d4 <main+0x1cc>)
 80012fe:	8812      	ldrh	r2, [r2, #0]
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	4a35      	ldr	r2, [pc, #212]	; (80013d8 <main+0x1d0>)
 8001304:	6013      	str	r3, [r2, #0]
			  }

//			  printf("Velocity %d\n", velocity);

			  lastRawAngle = rawAngle;
 8001306:	4a33      	ldr	r2, [pc, #204]	; (80013d4 <main+0x1cc>)
 8001308:	89bb      	ldrh	r3, [r7, #12]
 800130a:	8013      	strh	r3, [r2, #0]

			  if (electricOffset > rawAngle) {
 800130c:	4b33      	ldr	r3, [pc, #204]	; (80013dc <main+0x1d4>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	89ba      	ldrh	r2, [r7, #12]
 8001312:	429a      	cmp	r2, r3
 8001314:	d20b      	bcs.n	800132e <main+0x126>
				  electricAngle = electricRange - electricOffset + rawAngle;
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <main+0x1d8>)
 8001318:	881a      	ldrh	r2, [r3, #0]
 800131a:	4b30      	ldr	r3, [pc, #192]	; (80013dc <main+0x1d4>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	b29a      	uxth	r2, r3
 8001322:	89bb      	ldrh	r3, [r7, #12]
 8001324:	4413      	add	r3, r2
 8001326:	b29a      	uxth	r2, r3
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <main+0x1dc>)
 800132a:	801a      	strh	r2, [r3, #0]
 800132c:	e00d      	b.n	800134a <main+0x142>
			  } else {
				  electricAngle = (rawAngle - electricOffset) % electricRange;
 800132e:	89bb      	ldrh	r3, [r7, #12]
 8001330:	4a2a      	ldr	r2, [pc, #168]	; (80013dc <main+0x1d4>)
 8001332:	8812      	ldrh	r2, [r2, #0]
 8001334:	1a9b      	subs	r3, r3, r2
 8001336:	4a2a      	ldr	r2, [pc, #168]	; (80013e0 <main+0x1d8>)
 8001338:	8812      	ldrh	r2, [r2, #0]
 800133a:	fb93 f1f2 	sdiv	r1, r3, r2
 800133e:	fb02 f201 	mul.w	r2, r2, r1
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <main+0x1dc>)
 8001348:	801a      	strh	r2, [r3, #0]
			  }

//			  printf("Electric angle %u\n", electricAngle);

			  theta = 2.0f * M_PI * ((electricAngle + electricRange / 4) % electricRange) / (1.0f * electricRange);
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <main+0x1dc>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <main+0x1d8>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	b29b      	uxth	r3, r3
 8001358:	4413      	add	r3, r2
 800135a:	4a21      	ldr	r2, [pc, #132]	; (80013e0 <main+0x1d8>)
 800135c:	8812      	ldrh	r2, [r2, #0]
 800135e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001362:	fb02 f201 	mul.w	r2, r2, r1
 8001366:	1a9b      	subs	r3, r3, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f843 	bl	80003f4 <__aeabi_i2d>
 800136e:	a312      	add	r3, pc, #72	; (adr r3, 80013b8 <main+0x1b0>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f8a8 	bl	80004c8 <__aeabi_dmul>
 8001378:	4603      	mov	r3, r0
 800137a:	460c      	mov	r4, r1
 800137c:	4625      	mov	r5, r4
 800137e:	461c      	mov	r4, r3
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <main+0x1d8>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fbbb 	bl	8000b00 <__aeabi_i2f>
 800138a:	4603      	mov	r3, r0
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f843 	bl	8000418 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4620      	mov	r0, r4
 8001398:	4629      	mov	r1, r5
 800139a:	f7ff f9bf 	bl	800071c <__aeabi_ddiv>
 800139e:	4603      	mov	r3, r0
 80013a0:	460c      	mov	r4, r1
 80013a2:	4618      	mov	r0, r3
 80013a4:	4621      	mov	r1, r4
 80013a6:	f7ff faa1 	bl	80008ec <__aeabi_d2f>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <main+0x1e0>)
 80013ae:	601a      	str	r2, [r3, #0]
	  buf[0] = RAW_ANGLE_REG;
 80013b0:	e759      	b.n	8001266 <main+0x5e>
 80013b2:	bf00      	nop
 80013b4:	f3af 8000 	nop.w
 80013b8:	54442d18 	.word	0x54442d18
 80013bc:	401921fb 	.word	0x401921fb
 80013c0:	20000138 	.word	0x20000138
 80013c4:	200000b4 	.word	0x200000b4
 80013c8:	08006160 	.word	0x08006160
 80013cc:	08006168 	.word	0x08006168
 80013d0:	08006174 	.word	0x08006174
 80013d4:	2000009c 	.word	0x2000009c
 80013d8:	200000a0 	.word	0x200000a0
 80013dc:	20000004 	.word	0x20000004
 80013e0:	20000006 	.word	0x20000006
 80013e4:	200000a4 	.word	0x200000a4
 80013e8:	20000094 	.word	0x20000094

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b094      	sub	sp, #80	; 0x50
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f6:	2228      	movs	r2, #40	; 0x28
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 fc4a 	bl	8004c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800141c:	2301      	movs	r3, #1
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142a:	2301      	movs	r3, #1
 800142c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142e:	2302      	movs	r3, #2
 8001430:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001436:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001438:	2300      	movs	r3, #0
 800143a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001440:	4618      	mov	r0, r3
 8001442:	f002 f869 	bl	8003518 <HAL_RCC_OscConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800144c:	f000 f980 	bl	8001750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001450:	230f      	movs	r3, #15
 8001452:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001454:	2302      	movs	r3, #2
 8001456:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800145c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001460:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fad3 	bl	8003a18 <HAL_RCC_ClockConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001478:	f000 f96a 	bl	8001750 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800147c:	2302      	movs	r3, #2
 800147e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fc4e 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001492:	f000 f95d 	bl	8001750 <Error_Handler>
  }
}
 8001496:	bf00      	nop
 8001498:	3750      	adds	r7, #80	; 0x50
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_ADC1_Init+0x74>)
 80014b2:	4a19      	ldr	r2, [pc, #100]	; (8001518 <MX_ADC1_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <MX_ADC1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MX_ADC1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_ADC1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_ADC1_Init+0x74>)
 80014ca:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_ADC1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_ADC1_Init+0x74>)
 80014d8:	2201      	movs	r2, #1
 80014da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014dc:	480d      	ldr	r0, [pc, #52]	; (8001514 <MX_ADC1_Init+0x74>)
 80014de:	f000 fbed 	bl	8001cbc <HAL_ADC_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80014e8:	f000 f932 	bl	8001750 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_ADC1_Init+0x74>)
 80014fe:	f000 fcb5 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001508:	f000 f922 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000108 	.word	0x20000108
 8001518:	40012400 	.word	0x40012400

0800151c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_I2C1_Init+0x50>)
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <MX_I2C1_Init+0x54>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_I2C1_Init+0x50>)
 8001528:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_I2C1_Init+0x58>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_I2C1_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_I2C1_Init+0x50>)
 800153a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_I2C1_Init+0x50>)
 800155a:	f001 f821 	bl	80025a0 <HAL_I2C_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001564:	f000 f8f4 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200000b4 	.word	0x200000b4
 8001570:	40005400 	.word	0x40005400
 8001574:	000186a0 	.word	0x000186a0

08001578 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b096      	sub	sp, #88	; 0x58
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2220      	movs	r2, #32
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fb6f 	bl	8004c94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b6:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <MX_TIM1_Init+0x174>)
 80015b8:	4a4d      	ldr	r2, [pc, #308]	; (80016f0 <MX_TIM1_Init+0x178>)
 80015ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015bc:	4b4b      	ldr	r3, [pc, #300]	; (80016ec <MX_TIM1_Init+0x174>)
 80015be:	2200      	movs	r2, #0
 80015c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <MX_TIM1_Init+0x174>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80015c8:	4b48      	ldr	r3, [pc, #288]	; (80016ec <MX_TIM1_Init+0x174>)
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d0:	4b46      	ldr	r3, [pc, #280]	; (80016ec <MX_TIM1_Init+0x174>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d6:	4b45      	ldr	r3, [pc, #276]	; (80016ec <MX_TIM1_Init+0x174>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015dc:	4b43      	ldr	r3, [pc, #268]	; (80016ec <MX_TIM1_Init+0x174>)
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015e2:	4842      	ldr	r0, [pc, #264]	; (80016ec <MX_TIM1_Init+0x174>)
 80015e4:	f002 fc56 	bl	8003e94 <HAL_TIM_Base_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015ee:	f000 f8af 	bl	8001750 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015fc:	4619      	mov	r1, r3
 80015fe:	483b      	ldr	r0, [pc, #236]	; (80016ec <MX_TIM1_Init+0x174>)
 8001600:	f002 fea8 	bl	8004354 <HAL_TIM_ConfigClockSource>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800160a:	f000 f8a1 	bl	8001750 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800160e:	4837      	ldr	r0, [pc, #220]	; (80016ec <MX_TIM1_Init+0x174>)
 8001610:	f002 fc6b 	bl	8003eea <HAL_TIM_PWM_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800161a:	f000 f899 	bl	8001750 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001626:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800162a:	4619      	mov	r1, r3
 800162c:	482f      	ldr	r0, [pc, #188]	; (80016ec <MX_TIM1_Init+0x174>)
 800162e:	f003 fa3b 	bl	8004aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001638:	f000 f88a 	bl	8001750 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163c:	2360      	movs	r3, #96	; 0x60
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001640:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001646:	2300      	movs	r3, #0
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800164a:	2300      	movs	r3, #0
 800164c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800165a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165e:	2200      	movs	r2, #0
 8001660:	4619      	mov	r1, r3
 8001662:	4822      	ldr	r0, [pc, #136]	; (80016ec <MX_TIM1_Init+0x174>)
 8001664:	f002 fdb0 	bl	80041c8 <HAL_TIM_PWM_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800166e:	f000 f86f 	bl	8001750 <Error_Handler>
  }
  sConfigOC.Pulse = 250;
 8001672:	23fa      	movs	r3, #250	; 0xfa
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	2204      	movs	r2, #4
 800167c:	4619      	mov	r1, r3
 800167e:	481b      	ldr	r0, [pc, #108]	; (80016ec <MX_TIM1_Init+0x174>)
 8001680:	f002 fda2 	bl	80041c8 <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800168a:	f000 f861 	bl	8001750 <Error_Handler>
  }
  sConfigOC.Pulse = 750;
 800168e:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001698:	2208      	movs	r2, #8
 800169a:	4619      	mov	r1, r3
 800169c:	4813      	ldr	r0, [pc, #76]	; (80016ec <MX_TIM1_Init+0x174>)
 800169e:	f002 fd93 	bl	80041c8 <HAL_TIM_PWM_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80016a8:	f000 f852 	bl	8001750 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	4619      	mov	r1, r3
 80016ce:	4807      	ldr	r0, [pc, #28]	; (80016ec <MX_TIM1_Init+0x174>)
 80016d0:	f003 fa2e 	bl	8004b30 <HAL_TIMEx_ConfigBreakDeadTime>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 80016da:	f000 f839 	bl	8001750 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016de:	4803      	ldr	r0, [pc, #12]	; (80016ec <MX_TIM1_Init+0x174>)
 80016e0:	f000 f916 	bl	8001910 <HAL_TIM_MspPostInit>

}
 80016e4:	bf00      	nop
 80016e6:	3758      	adds	r7, #88	; 0x58
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000138 	.word	0x20000138
 80016f0:	40012c00 	.word	0x40012c00

080016f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_GPIO_Init+0x58>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	4a13      	ldr	r2, [pc, #76]	; (800174c <MX_GPIO_Init+0x58>)
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	6193      	str	r3, [r2, #24]
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_GPIO_Init+0x58>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_GPIO_Init+0x58>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	4a0d      	ldr	r2, [pc, #52]	; (800174c <MX_GPIO_Init+0x58>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6193      	str	r3, [r2, #24]
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_GPIO_Init+0x58>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_GPIO_Init+0x58>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	4a07      	ldr	r2, [pc, #28]	; (800174c <MX_GPIO_Init+0x58>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	6193      	str	r3, [r2, #24]
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <MX_GPIO_Init+0x58>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	40021000 	.word	0x40021000

08001750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <HAL_MspInit+0x5c>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6193      	str	r3, [r2, #24]
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_MspInit+0x5c>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <HAL_MspInit+0x5c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	61d3      	str	r3, [r2, #28]
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_MspInit+0x5c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_MspInit+0x60>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_MspInit+0x60>)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010000 	.word	0x40010000

080017c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_ADC_MspInit+0x6c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d121      	bne.n	8001824 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_ADC_MspInit+0x70>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a12      	ldr	r2, [pc, #72]	; (8001830 <HAL_ADC_MspInit+0x70>)
 80017e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_ADC_MspInit+0x70>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_ADC_MspInit+0x70>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <HAL_ADC_MspInit+0x70>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_ADC_MspInit+0x70>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001810:	2302      	movs	r3, #2
 8001812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001814:	2303      	movs	r3, #3
 8001816:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4619      	mov	r1, r3
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_ADC_MspInit+0x74>)
 8001820:	f000 fd64 	bl	80022ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40012400 	.word	0x40012400
 8001830:	40021000 	.word	0x40021000
 8001834:	40010800 	.word	0x40010800

08001838 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <HAL_I2C_MspInit+0x70>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d123      	bne.n	80018a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_I2C_MspInit+0x74>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a13      	ldr	r2, [pc, #76]	; (80018ac <HAL_I2C_MspInit+0x74>)
 800185e:	f043 0308 	orr.w	r3, r3, #8
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_I2C_MspInit+0x74>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001870:	23c0      	movs	r3, #192	; 0xc0
 8001872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001874:	2312      	movs	r3, #18
 8001876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4619      	mov	r1, r3
 8001882:	480b      	ldr	r0, [pc, #44]	; (80018b0 <HAL_I2C_MspInit+0x78>)
 8001884:	f000 fd32 	bl	80022ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_I2C_MspInit+0x74>)
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_I2C_MspInit+0x74>)
 800188e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001892:	61d3      	str	r3, [r2, #28]
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_I2C_MspInit+0x74>)
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018a0:	bf00      	nop
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40005400 	.word	0x40005400
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40010c00 	.word	0x40010c00

080018b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_TIM_Base_MspInit+0x54>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d11b      	bne.n	80018fe <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <HAL_TIM_Base_MspInit+0x58>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a10      	ldr	r2, [pc, #64]	; (800190c <HAL_TIM_Base_MspInit+0x58>)
 80018cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_TIM_Base_MspInit+0x58>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2018      	movs	r0, #24
 80018e4:	f000 fccb 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80018e8:	2018      	movs	r0, #24
 80018ea:	f000 fce4 	bl	80022b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2019      	movs	r0, #25
 80018f4:	f000 fcc3 	bl	800227e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018f8:	2019      	movs	r0, #25
 80018fa:	f000 fcdc 	bl	80022b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a25      	ldr	r2, [pc, #148]	; (80019c0 <HAL_TIM_MspPostInit+0xb0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d142      	bne.n	80019b6 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_TIM_MspPostInit+0xb4>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a23      	ldr	r2, [pc, #140]	; (80019c4 <HAL_TIM_MspPostInit+0xb4>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <HAL_TIM_MspPostInit+0xb4>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_TIM_MspPostInit+0xb4>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <HAL_TIM_MspPostInit+0xb4>)
 800194e:	f043 0308 	orr.w	r3, r3, #8
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_TIM_MspPostInit+0xb4>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001960:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2302      	movs	r3, #2
 800196c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4814      	ldr	r0, [pc, #80]	; (80019c8 <HAL_TIM_MspPostInit+0xb8>)
 8001976:	f000 fcb9 	bl	80022ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800197a:	2303      	movs	r3, #3
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2302      	movs	r3, #2
 8001984:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	480f      	ldr	r0, [pc, #60]	; (80019cc <HAL_TIM_MspPostInit+0xbc>)
 800198e:	f000 fcad 	bl	80022ec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_TIM_MspPostInit+0xc0>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
 80019a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_TIM_MspPostInit+0xc0>)
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010800 	.word	0x40010800
 80019cc:	40010c00 	.word	0x40010c00
 80019d0:	40010000 	.word	0x40010000

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <HardFault_Handler+0x4>

080019e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <MemManage_Handler+0x4>

080019ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <BusFault_Handler+0x4>

080019f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <UsageFault_Handler+0x4>

080019f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a20:	f000 f930 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <TIM1_BRK_IRQHandler+0x10>)
 8001a2e:	f002 fac3 	bl	8003fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000138 	.word	0x20000138

08001a3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM1_UP_IRQHandler+0x10>)
 8001a42:	f002 fab9 	bl	8003fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000138 	.word	0x20000138

08001a50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	e00a      	b.n	8001a78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a62:	f3af 8000 	nop.w
 8001a66:	4601      	mov	r1, r0
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	60ba      	str	r2, [r7, #8]
 8001a6e:	b2ca      	uxtb	r2, r1
 8001a70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	dbf0      	blt.n	8001a62 <_read+0x12>
	}

return len;
 8001a80:	687b      	ldr	r3, [r7, #4]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <_sbrk+0x50>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <_sbrk+0x16>
		heap_end = &end;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <_sbrk+0x50>)
 8001a9e:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <_sbrk+0x54>)
 8001aa0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <_sbrk+0x50>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <_sbrk+0x50>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4413      	add	r3, r2
 8001ab0:	466a      	mov	r2, sp
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d907      	bls.n	8001ac6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001ab6:	f003 f8c3 	bl	8004c40 <__errno>
 8001aba:	4602      	mov	r2, r0
 8001abc:	230c      	movs	r3, #12
 8001abe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ac4:	e006      	b.n	8001ad4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <_sbrk+0x50>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	4a03      	ldr	r2, [pc, #12]	; (8001adc <_sbrk+0x50>)
 8001ad0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200000a8 	.word	0x200000a8
 8001ae0:	20000180 	.word	0x20000180

08001ae4 <_close>:

int _close(int file)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <_isatty>:

int _isatty(int file)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	return 1;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
	return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <SystemInit+0x5c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <SystemInit+0x5c>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <SystemInit+0x5c>)
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4911      	ldr	r1, [pc, #68]	; (8001ba0 <SystemInit+0x5c>)
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <SystemInit+0x60>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <SystemInit+0x5c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <SystemInit+0x5c>)
 8001b66:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <SystemInit+0x5c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <SystemInit+0x5c>)
 8001b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <SystemInit+0x5c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <SystemInit+0x5c>)
 8001b82:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b86:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SystemInit+0x5c>)
 8001b8a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b8e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <SystemInit+0x64>)
 8001b92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b96:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	f8ff0000 	.word	0xf8ff0000
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001bac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bae:	e003      	b.n	8001bb8 <LoopCopyDataInit>

08001bb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bb6:	3104      	adds	r1, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bb8:	480a      	ldr	r0, [pc, #40]	; (8001be4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bbc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bbe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bc0:	d3f6      	bcc.n	8001bb0 <CopyDataInit>
  ldr r2, =_sbss
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bc4:	e002      	b.n	8001bcc <LoopFillZerobss>

08001bc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bc8:	f842 3b04 	str.w	r3, [r2], #4

08001bcc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001bce:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001bd0:	d3f9      	bcc.n	8001bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bd2:	f7ff ffb7 	bl	8001b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f003 f839 	bl	8004c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bda:	f7ff fb15 	bl	8001208 <main>
  bx lr
 8001bde:	4770      	bx	lr
  ldr r3, =_sidata
 8001be0:	080065e8 	.word	0x080065e8
  ldr r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001be8:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001bec:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001bf0:	20000180 	.word	0x20000180

08001bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC1_2_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_Init+0x28>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_Init+0x28>)
 8001c02:	f043 0310 	orr.w	r3, r3, #16
 8001c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 fb2d 	bl	8002268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f000 f808 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7ff fda2 	bl	800175c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40022000 	.word	0x40022000

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x54>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x58>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 fb45 	bl	80022d2 <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c60:	f000 fb0d 	bl	800227e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <HAL_InitTick+0x5c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	20000010 	.word	0x20000010
 8001c80:	2000000c 	.word	0x2000000c

08001c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_IncTick+0x1c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	20000010 	.word	0x20000010
 8001ca4:	20000178 	.word	0x20000178

08001ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <HAL_GetTick+0x10>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	20000178 	.word	0x20000178

08001cbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0be      	b.n	8001e5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fd60 	bl	80017c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f9ab 	bl	800205c <ADC_ConversionStop_Disable>
 8001d06:	4603      	mov	r3, r0
 8001d08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 8099 	bne.w	8001e4a <HAL_ADC_Init+0x18e>
 8001d18:	7dfb      	ldrb	r3, [r7, #23]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 8095 	bne.w	8001e4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d28:	f023 0302 	bic.w	r3, r3, #2
 8001d2c:	f043 0202 	orr.w	r2, r3, #2
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7b1b      	ldrb	r3, [r3, #12]
 8001d42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d54:	d003      	beq.n	8001d5e <HAL_ADC_Init+0xa2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d102      	bne.n	8001d64 <HAL_ADC_Init+0xa8>
 8001d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d62:	e000      	b.n	8001d66 <HAL_ADC_Init+0xaa>
 8001d64:	2300      	movs	r3, #0
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7d1b      	ldrb	r3, [r3, #20]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d119      	bne.n	8001da8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7b1b      	ldrb	r3, [r3, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	035a      	lsls	r2, r3, #13
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	e00b      	b.n	8001da8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	f043 0220 	orr.w	r2, r3, #32
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <HAL_ADC_Init+0x1a8>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd8:	d003      	beq.n	8001de2 <HAL_ADC_Init+0x126>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d104      	bne.n	8001dec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	051b      	lsls	r3, r3, #20
 8001dea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_ADC_Init+0x1ac>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d10b      	bne.n	8001e28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1a:	f023 0303 	bic.w	r3, r3, #3
 8001e1e:	f043 0201 	orr.w	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e26:	e018      	b.n	8001e5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	f023 0312 	bic.w	r3, r3, #18
 8001e30:	f043 0210 	orr.w	r2, r3, #16
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e48:	e007      	b.n	8001e5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	f043 0210 	orr.w	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	ffe1f7fd 	.word	0xffe1f7fd
 8001e68:	ff1f0efe 	.word	0xff1f0efe

08001e6c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x20>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e0dc      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1da>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b06      	cmp	r3, #6
 8001e9a:	d81c      	bhi.n	8001ed6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b05      	subs	r3, #5
 8001eae:	221f      	movs	r2, #31
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4019      	ands	r1, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3b05      	subs	r3, #5
 8001ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed4:	e03c      	b.n	8001f50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b0c      	cmp	r3, #12
 8001edc:	d81c      	bhi.n	8001f18 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	3b23      	subs	r3, #35	; 0x23
 8001ef0:	221f      	movs	r2, #31
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	4019      	ands	r1, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b23      	subs	r3, #35	; 0x23
 8001f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
 8001f16:	e01b      	b.n	8001f50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b41      	subs	r3, #65	; 0x41
 8001f2a:	221f      	movs	r2, #31
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4019      	ands	r1, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	3b41      	subs	r3, #65	; 0x41
 8001f44:	fa00 f203 	lsl.w	r2, r0, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b09      	cmp	r3, #9
 8001f56:	d91c      	bls.n	8001f92 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68d9      	ldr	r1, [r3, #12]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	3b1e      	subs	r3, #30
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4019      	ands	r1, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6898      	ldr	r0, [r3, #8]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	3b1e      	subs	r3, #30
 8001f84:	fa00 f203 	lsl.w	r2, r0, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	e019      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6919      	ldr	r1, [r3, #16]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	2207      	movs	r2, #7
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4019      	ands	r1, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6898      	ldr	r0, [r3, #8]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	fa00 f203 	lsl.w	r2, r0, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d003      	beq.n	8001fd6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fd2:	2b11      	cmp	r3, #17
 8001fd4:	d132      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1d      	ldr	r2, [pc, #116]	; (8002050 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d125      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d126      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ffc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b10      	cmp	r3, #16
 8002004:	d11a      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_ADC_ConfigChannel+0x1e8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <HAL_ADC_ConfigChannel+0x1ec>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	0c9a      	lsrs	r2, r3, #18
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800201c:	e002      	b.n	8002024 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3b01      	subs	r3, #1
 8002022:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f9      	bne.n	800201e <HAL_ADC_ConfigChannel+0x1b2>
 800202a:	e007      	b.n	800203c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	f043 0220 	orr.w	r2, r3, #32
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	40012400 	.word	0x40012400
 8002054:	20000008 	.word	0x20000008
 8002058:	431bde83 	.word	0x431bde83

0800205c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b01      	cmp	r3, #1
 8002074:	d127      	bne.n	80020c6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002086:	f7ff fe0f 	bl	8001ca8 <HAL_GetTick>
 800208a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800208c:	e014      	b.n	80020b8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800208e:	f7ff fe0b 	bl	8001ca8 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d90d      	bls.n	80020b8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	f043 0210 	orr.w	r2, r3, #16
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e007      	b.n	80020c8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d0e3      	beq.n	800208e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <__NVIC_SetPriorityGrouping>:
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002102:	4a04      	ldr	r2, [pc, #16]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60d3      	str	r3, [r2, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_GetPriorityGrouping>:
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_EnableIRQ>:
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db0b      	blt.n	800215e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4906      	ldr	r1, [pc, #24]	; (8002168 <__NVIC_EnableIRQ+0x34>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2001      	movs	r0, #1
 8002156:	fa00 f202 	lsl.w	r2, r0, r2
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100

0800216c <__NVIC_SetPriority>:
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	6039      	str	r1, [r7, #0]
 8002176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	2b00      	cmp	r3, #0
 800217e:	db0a      	blt.n	8002196 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	b2da      	uxtb	r2, r3
 8002184:	490c      	ldr	r1, [pc, #48]	; (80021b8 <__NVIC_SetPriority+0x4c>)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	0112      	lsls	r2, r2, #4
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	440b      	add	r3, r1
 8002190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002194:	e00a      	b.n	80021ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4908      	ldr	r1, [pc, #32]	; (80021bc <__NVIC_SetPriority+0x50>)
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	3b04      	subs	r3, #4
 80021a4:	0112      	lsls	r2, r2, #4
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	440b      	add	r3, r1
 80021aa:	761a      	strb	r2, [r3, #24]
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000e100 	.word	0xe000e100
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <NVIC_EncodePriority>:
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f1c3 0307 	rsb	r3, r3, #7
 80021da:	2b04      	cmp	r3, #4
 80021dc:	bf28      	it	cs
 80021de:	2304      	movcs	r3, #4
 80021e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3304      	adds	r3, #4
 80021e6:	2b06      	cmp	r3, #6
 80021e8:	d902      	bls.n	80021f0 <NVIC_EncodePriority+0x30>
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3b03      	subs	r3, #3
 80021ee:	e000      	b.n	80021f2 <NVIC_EncodePriority+0x32>
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43da      	mvns	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	401a      	ands	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	fa01 f303 	lsl.w	r3, r1, r3
 8002212:	43d9      	mvns	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	4313      	orrs	r3, r2
}
 800221a:	4618      	mov	r0, r3
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <SysTick_Config>:
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3b01      	subs	r3, #1
 8002230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002234:	d301      	bcc.n	800223a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002236:	2301      	movs	r3, #1
 8002238:	e00f      	b.n	800225a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <SysTick_Config+0x40>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002242:	210f      	movs	r1, #15
 8002244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002248:	f7ff ff90 	bl	800216c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <SysTick_Config+0x40>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002252:	4b04      	ldr	r3, [pc, #16]	; (8002264 <SysTick_Config+0x40>)
 8002254:	2207      	movs	r2, #7
 8002256:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	e000e010 	.word	0xe000e010

08002268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ff2d 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002290:	f7ff ff42 	bl	8002118 <__NVIC_GetPriorityGrouping>
 8002294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	6978      	ldr	r0, [r7, #20]
 800229c:	f7ff ff90 	bl	80021c0 <NVIC_EncodePriority>
 80022a0:	4602      	mov	r2, r0
 80022a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff5f 	bl	800216c <__NVIC_SetPriority>
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff35 	bl	8002134 <__NVIC_EnableIRQ>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ffa2 	bl	8002224 <SysTick_Config>
 80022e0:	4603      	mov	r3, r0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b08b      	sub	sp, #44	; 0x2c
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fe:	e127      	b.n	8002550 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002300:	2201      	movs	r2, #1
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	429a      	cmp	r2, r3
 800231a:	f040 8116 	bne.w	800254a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b12      	cmp	r3, #18
 8002324:	d034      	beq.n	8002390 <HAL_GPIO_Init+0xa4>
 8002326:	2b12      	cmp	r3, #18
 8002328:	d80d      	bhi.n	8002346 <HAL_GPIO_Init+0x5a>
 800232a:	2b02      	cmp	r3, #2
 800232c:	d02b      	beq.n	8002386 <HAL_GPIO_Init+0x9a>
 800232e:	2b02      	cmp	r3, #2
 8002330:	d804      	bhi.n	800233c <HAL_GPIO_Init+0x50>
 8002332:	2b00      	cmp	r3, #0
 8002334:	d031      	beq.n	800239a <HAL_GPIO_Init+0xae>
 8002336:	2b01      	cmp	r3, #1
 8002338:	d01c      	beq.n	8002374 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800233a:	e048      	b.n	80023ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800233c:	2b03      	cmp	r3, #3
 800233e:	d043      	beq.n	80023c8 <HAL_GPIO_Init+0xdc>
 8002340:	2b11      	cmp	r3, #17
 8002342:	d01b      	beq.n	800237c <HAL_GPIO_Init+0x90>
          break;
 8002344:	e043      	b.n	80023ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002346:	4a89      	ldr	r2, [pc, #548]	; (800256c <HAL_GPIO_Init+0x280>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d026      	beq.n	800239a <HAL_GPIO_Init+0xae>
 800234c:	4a87      	ldr	r2, [pc, #540]	; (800256c <HAL_GPIO_Init+0x280>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d806      	bhi.n	8002360 <HAL_GPIO_Init+0x74>
 8002352:	4a87      	ldr	r2, [pc, #540]	; (8002570 <HAL_GPIO_Init+0x284>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d020      	beq.n	800239a <HAL_GPIO_Init+0xae>
 8002358:	4a86      	ldr	r2, [pc, #536]	; (8002574 <HAL_GPIO_Init+0x288>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01d      	beq.n	800239a <HAL_GPIO_Init+0xae>
          break;
 800235e:	e036      	b.n	80023ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002360:	4a85      	ldr	r2, [pc, #532]	; (8002578 <HAL_GPIO_Init+0x28c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d019      	beq.n	800239a <HAL_GPIO_Init+0xae>
 8002366:	4a85      	ldr	r2, [pc, #532]	; (800257c <HAL_GPIO_Init+0x290>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d016      	beq.n	800239a <HAL_GPIO_Init+0xae>
 800236c:	4a84      	ldr	r2, [pc, #528]	; (8002580 <HAL_GPIO_Init+0x294>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0xae>
          break;
 8002372:	e02c      	b.n	80023ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	623b      	str	r3, [r7, #32]
          break;
 800237a:	e028      	b.n	80023ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	3304      	adds	r3, #4
 8002382:	623b      	str	r3, [r7, #32]
          break;
 8002384:	e023      	b.n	80023ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	3308      	adds	r3, #8
 800238c:	623b      	str	r3, [r7, #32]
          break;
 800238e:	e01e      	b.n	80023ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	330c      	adds	r3, #12
 8002396:	623b      	str	r3, [r7, #32]
          break;
 8002398:	e019      	b.n	80023ce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023a2:	2304      	movs	r3, #4
 80023a4:	623b      	str	r3, [r7, #32]
          break;
 80023a6:	e012      	b.n	80023ce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b0:	2308      	movs	r3, #8
 80023b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	611a      	str	r2, [r3, #16]
          break;
 80023ba:	e008      	b.n	80023ce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023bc:	2308      	movs	r3, #8
 80023be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	615a      	str	r2, [r3, #20]
          break;
 80023c6:	e002      	b.n	80023ce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023c8:	2300      	movs	r3, #0
 80023ca:	623b      	str	r3, [r7, #32]
          break;
 80023cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2bff      	cmp	r3, #255	; 0xff
 80023d2:	d801      	bhi.n	80023d8 <HAL_GPIO_Init+0xec>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	e001      	b.n	80023dc <HAL_GPIO_Init+0xf0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3304      	adds	r3, #4
 80023dc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	2bff      	cmp	r3, #255	; 0xff
 80023e2:	d802      	bhi.n	80023ea <HAL_GPIO_Init+0xfe>
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	e002      	b.n	80023f0 <HAL_GPIO_Init+0x104>
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	3b08      	subs	r3, #8
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	210f      	movs	r1, #15
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	401a      	ands	r2, r3
 8002402:	6a39      	ldr	r1, [r7, #32]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	431a      	orrs	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 8096 	beq.w	800254a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800241e:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_GPIO_Init+0x298>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	4a58      	ldr	r2, [pc, #352]	; (8002584 <HAL_GPIO_Init+0x298>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6193      	str	r3, [r2, #24]
 800242a:	4b56      	ldr	r3, [pc, #344]	; (8002584 <HAL_GPIO_Init+0x298>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002436:	4a54      	ldr	r2, [pc, #336]	; (8002588 <HAL_GPIO_Init+0x29c>)
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4013      	ands	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4b      	ldr	r2, [pc, #300]	; (800258c <HAL_GPIO_Init+0x2a0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_GPIO_Init+0x19e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4a      	ldr	r2, [pc, #296]	; (8002590 <HAL_GPIO_Init+0x2a4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00d      	beq.n	8002486 <HAL_GPIO_Init+0x19a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a49      	ldr	r2, [pc, #292]	; (8002594 <HAL_GPIO_Init+0x2a8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d007      	beq.n	8002482 <HAL_GPIO_Init+0x196>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a48      	ldr	r2, [pc, #288]	; (8002598 <HAL_GPIO_Init+0x2ac>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_GPIO_Init+0x192>
 800247a:	2303      	movs	r3, #3
 800247c:	e006      	b.n	800248c <HAL_GPIO_Init+0x1a0>
 800247e:	2304      	movs	r3, #4
 8002480:	e004      	b.n	800248c <HAL_GPIO_Init+0x1a0>
 8002482:	2302      	movs	r3, #2
 8002484:	e002      	b.n	800248c <HAL_GPIO_Init+0x1a0>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_GPIO_Init+0x1a0>
 800248a:	2300      	movs	r3, #0
 800248c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800248e:	f002 0203 	and.w	r2, r2, #3
 8002492:	0092      	lsls	r2, r2, #2
 8002494:	4093      	lsls	r3, r2
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	4313      	orrs	r3, r2
 800249a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800249c:	493a      	ldr	r1, [pc, #232]	; (8002588 <HAL_GPIO_Init+0x29c>)
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	3302      	adds	r3, #2
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d006      	beq.n	80024c4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <HAL_GPIO_Init+0x2b0>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4938      	ldr	r1, [pc, #224]	; (800259c <HAL_GPIO_Init+0x2b0>)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
 80024c2:	e006      	b.n	80024d2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024c4:	4b35      	ldr	r3, [pc, #212]	; (800259c <HAL_GPIO_Init+0x2b0>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	4933      	ldr	r1, [pc, #204]	; (800259c <HAL_GPIO_Init+0x2b0>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024de:	4b2f      	ldr	r3, [pc, #188]	; (800259c <HAL_GPIO_Init+0x2b0>)
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	492e      	ldr	r1, [pc, #184]	; (800259c <HAL_GPIO_Init+0x2b0>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
 80024ea:	e006      	b.n	80024fa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <HAL_GPIO_Init+0x2b0>)
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	4929      	ldr	r1, [pc, #164]	; (800259c <HAL_GPIO_Init+0x2b0>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d006      	beq.n	8002514 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002506:	4b25      	ldr	r3, [pc, #148]	; (800259c <HAL_GPIO_Init+0x2b0>)
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	4924      	ldr	r1, [pc, #144]	; (800259c <HAL_GPIO_Init+0x2b0>)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
 8002512:	e006      	b.n	8002522 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_GPIO_Init+0x2b0>)
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	43db      	mvns	r3, r3
 800251c:	491f      	ldr	r1, [pc, #124]	; (800259c <HAL_GPIO_Init+0x2b0>)
 800251e:	4013      	ands	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_GPIO_Init+0x2b0>)
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	491a      	ldr	r1, [pc, #104]	; (800259c <HAL_GPIO_Init+0x2b0>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	60cb      	str	r3, [r1, #12]
 800253a:	e006      	b.n	800254a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <HAL_GPIO_Init+0x2b0>)
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	43db      	mvns	r3, r3
 8002544:	4915      	ldr	r1, [pc, #84]	; (800259c <HAL_GPIO_Init+0x2b0>)
 8002546:	4013      	ands	r3, r2
 8002548:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	3301      	adds	r3, #1
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	f47f aed0 	bne.w	8002300 <HAL_GPIO_Init+0x14>
  }
}
 8002560:	bf00      	nop
 8002562:	372c      	adds	r7, #44	; 0x2c
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	10210000 	.word	0x10210000
 8002570:	10110000 	.word	0x10110000
 8002574:	10120000 	.word	0x10120000
 8002578:	10310000 	.word	0x10310000
 800257c:	10320000 	.word	0x10320000
 8002580:	10220000 	.word	0x10220000
 8002584:	40021000 	.word	0x40021000
 8002588:	40010000 	.word	0x40010000
 800258c:	40010800 	.word	0x40010800
 8002590:	40010c00 	.word	0x40010c00
 8002594:	40011000 	.word	0x40011000
 8002598:	40011400 	.word	0x40011400
 800259c:	40010400 	.word	0x40010400

080025a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e11f      	b.n	80027f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff f936 	bl	8001838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2224      	movs	r2, #36	; 0x24
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002602:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002604:	f001 fb5e 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8002608:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4a7b      	ldr	r2, [pc, #492]	; (80027fc <HAL_I2C_Init+0x25c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d807      	bhi.n	8002624 <HAL_I2C_Init+0x84>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4a7a      	ldr	r2, [pc, #488]	; (8002800 <HAL_I2C_Init+0x260>)
 8002618:	4293      	cmp	r3, r2
 800261a:	bf94      	ite	ls
 800261c:	2301      	movls	r3, #1
 800261e:	2300      	movhi	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e006      	b.n	8002632 <HAL_I2C_Init+0x92>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4a77      	ldr	r2, [pc, #476]	; (8002804 <HAL_I2C_Init+0x264>)
 8002628:	4293      	cmp	r3, r2
 800262a:	bf94      	ite	ls
 800262c:	2301      	movls	r3, #1
 800262e:	2300      	movhi	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0db      	b.n	80027f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4a72      	ldr	r2, [pc, #456]	; (8002808 <HAL_I2C_Init+0x268>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0c9b      	lsrs	r3, r3, #18
 8002644:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	430a      	orrs	r2, r1
 8002658:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a64      	ldr	r2, [pc, #400]	; (80027fc <HAL_I2C_Init+0x25c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d802      	bhi.n	8002674 <HAL_I2C_Init+0xd4>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	3301      	adds	r3, #1
 8002672:	e009      	b.n	8002688 <HAL_I2C_Init+0xe8>
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	4a63      	ldr	r2, [pc, #396]	; (800280c <HAL_I2C_Init+0x26c>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	099b      	lsrs	r3, r3, #6
 8002686:	3301      	adds	r3, #1
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	430b      	orrs	r3, r1
 800268e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800269a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4956      	ldr	r1, [pc, #344]	; (80027fc <HAL_I2C_Init+0x25c>)
 80026a4:	428b      	cmp	r3, r1
 80026a6:	d80d      	bhi.n	80026c4 <HAL_I2C_Init+0x124>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1e59      	subs	r1, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026bc:	2b04      	cmp	r3, #4
 80026be:	bf38      	it	cc
 80026c0:	2304      	movcc	r3, #4
 80026c2:	e04f      	b.n	8002764 <HAL_I2C_Init+0x1c4>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d111      	bne.n	80026f0 <HAL_I2C_Init+0x150>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1e58      	subs	r0, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	440b      	add	r3, r1
 80026da:	fbb0 f3f3 	udiv	r3, r0, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e012      	b.n	8002716 <HAL_I2C_Init+0x176>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1e58      	subs	r0, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	0099      	lsls	r1, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	fbb0 f3f3 	udiv	r3, r0, r3
 8002706:	3301      	adds	r3, #1
 8002708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_Init+0x17e>
 800271a:	2301      	movs	r3, #1
 800271c:	e022      	b.n	8002764 <HAL_I2C_Init+0x1c4>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10e      	bne.n	8002744 <HAL_I2C_Init+0x1a4>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1e58      	subs	r0, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	440b      	add	r3, r1
 8002734:	fbb0 f3f3 	udiv	r3, r0, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002742:	e00f      	b.n	8002764 <HAL_I2C_Init+0x1c4>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1e58      	subs	r0, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	0099      	lsls	r1, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	fbb0 f3f3 	udiv	r3, r0, r3
 800275a:	3301      	adds	r3, #1
 800275c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	6809      	ldr	r1, [r1, #0]
 8002768:	4313      	orrs	r3, r2
 800276a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6911      	ldr	r1, [r2, #16]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68d2      	ldr	r2, [r2, #12]
 800279e:	4311      	orrs	r1, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	000186a0 	.word	0x000186a0
 8002800:	001e847f 	.word	0x001e847f
 8002804:	003d08ff 	.word	0x003d08ff
 8002808:	431bde83 	.word	0x431bde83
 800280c:	10624dd3 	.word	0x10624dd3

08002810 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	461a      	mov	r2, r3
 800281c:	460b      	mov	r3, r1
 800281e:	817b      	strh	r3, [r7, #10]
 8002820:	4613      	mov	r3, r2
 8002822:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002824:	f7ff fa40 	bl	8001ca8 <HAL_GetTick>
 8002828:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b20      	cmp	r3, #32
 8002834:	f040 80e0 	bne.w	80029f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	2319      	movs	r3, #25
 800283e:	2201      	movs	r2, #1
 8002840:	4970      	ldr	r1, [pc, #448]	; (8002a04 <HAL_I2C_Master_Transmit+0x1f4>)
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fc8c 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
 8002850:	e0d3      	b.n	80029fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_I2C_Master_Transmit+0x50>
 800285c:	2302      	movs	r3, #2
 800285e:	e0cc      	b.n	80029fa <HAL_I2C_Master_Transmit+0x1ea>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b01      	cmp	r3, #1
 8002874:	d007      	beq.n	8002886 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002894:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2221      	movs	r2, #33	; 0x21
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2210      	movs	r2, #16
 80028a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	893a      	ldrh	r2, [r7, #8]
 80028b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a50      	ldr	r2, [pc, #320]	; (8002a08 <HAL_I2C_Master_Transmit+0x1f8>)
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028c8:	8979      	ldrh	r1, [r7, #10]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	6a3a      	ldr	r2, [r7, #32]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 faf6 	bl	8002ec0 <I2C_MasterRequestWrite>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e08d      	b.n	80029fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028f4:	e066      	b.n	80029c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	6a39      	ldr	r1, [r7, #32]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fd06 	bl	800330c <I2C_WaitOnTXEFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00d      	beq.n	8002922 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b04      	cmp	r3, #4
 800290c:	d107      	bne.n	800291e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06b      	b.n	80029fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	781a      	ldrb	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b04      	cmp	r3, #4
 800295e:	d11b      	bne.n	8002998 <HAL_I2C_Master_Transmit+0x188>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	2b00      	cmp	r3, #0
 8002966:	d017      	beq.n	8002998 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	781a      	ldrb	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	6a39      	ldr	r1, [r7, #32]
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fcf6 	bl	800338e <I2C_WaitOnBTFFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00d      	beq.n	80029c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d107      	bne.n	80029c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e01a      	b.n	80029fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d194      	bne.n	80028f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	00100002 	.word	0x00100002
 8002a08:	ffff0000 	.word	0xffff0000

08002a0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08c      	sub	sp, #48	; 0x30
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	461a      	mov	r2, r3
 8002a18:	460b      	mov	r3, r1
 8002a1a:	817b      	strh	r3, [r7, #10]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a24:	f7ff f940 	bl	8001ca8 <HAL_GetTick>
 8002a28:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	f040 8238 	bne.w	8002ea8 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	2319      	movs	r3, #25
 8002a3e:	2201      	movs	r2, #1
 8002a40:	497e      	ldr	r1, [pc, #504]	; (8002c3c <HAL_I2C_Master_Receive+0x230>)
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fb8c 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e22b      	b.n	8002eaa <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_I2C_Master_Receive+0x54>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e224      	b.n	8002eaa <HAL_I2C_Master_Receive+0x49e>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d007      	beq.n	8002a86 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2222      	movs	r2, #34	; 0x22
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	893a      	ldrh	r2, [r7, #8]
 8002ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4a5e      	ldr	r2, [pc, #376]	; (8002c40 <HAL_I2C_Master_Receive+0x234>)
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ac8:	8979      	ldrh	r1, [r7, #10]
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fa78 	bl	8002fc4 <I2C_MasterRequestRead>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e1e5      	b.n	8002eaa <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d113      	bne.n	8002b0e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e1b9      	b.n	8002e82 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d11d      	bne.n	8002b52 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b24:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b26:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b4e:	b662      	cpsie	i
 8002b50:	e197      	b.n	8002e82 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d11d      	bne.n	8002b96 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b6a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b92:	b662      	cpsie	i
 8002b94:	e175      	b.n	8002e82 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ba4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002bbc:	e161      	b.n	8002e82 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	f200 811a 	bhi.w	8002dfc <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d123      	bne.n	8002c18 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 fc1b 	bl	8003410 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e162      	b.n	8002eaa <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c16:	e134      	b.n	8002e82 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d150      	bne.n	8002cc2 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	2200      	movs	r2, #0
 8002c28:	4906      	ldr	r1, [pc, #24]	; (8002c44 <HAL_I2C_Master_Receive+0x238>)
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 fa98 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e137      	b.n	8002eaa <HAL_I2C_Master_Receive+0x49e>
 8002c3a:	bf00      	nop
 8002c3c:	00100002 	.word	0x00100002
 8002c40:	ffff0000 	.word	0xffff0000
 8002c44:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002c48:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c58:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c8c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cc0:	e0df      	b.n	8002e82 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	2200      	movs	r2, #0
 8002cca:	497a      	ldr	r1, [pc, #488]	; (8002eb4 <HAL_I2C_Master_Receive+0x4a8>)
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fa47 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0e6      	b.n	8002eaa <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cec:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d20:	4b65      	ldr	r3, [pc, #404]	; (8002eb8 <HAL_I2C_Master_Receive+0x4ac>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	08db      	lsrs	r3, r3, #3
 8002d26:	4a65      	ldr	r2, [pc, #404]	; (8002ebc <HAL_I2C_Master_Receive+0x4b0>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	0a1a      	lsrs	r2, r3, #8
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	00da      	lsls	r2, r3, #3
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d117      	bne.n	8002d76 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002d68:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e099      	b.n	8002eaa <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d1da      	bne.n	8002d3a <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dc6:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dfa:	e042      	b.n	8002e82 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fb05 	bl	8003410 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e04c      	b.n	8002eaa <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d118      	bne.n	8002e82 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f47f ae99 	bne.w	8002bbe <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e000      	b.n	8002eaa <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8002ea8:	2302      	movs	r3, #2
  }
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3728      	adds	r7, #40	; 0x28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	00010004 	.word	0x00010004
 8002eb8:	20000008 	.word	0x20000008
 8002ebc:	14f8b589 	.word	0x14f8b589

08002ec0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d006      	beq.n	8002eea <I2C_MasterRequestWrite+0x2a>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d003      	beq.n	8002eea <I2C_MasterRequestWrite+0x2a>
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ee8:	d108      	bne.n	8002efc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	e00b      	b.n	8002f14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	2b12      	cmp	r3, #18
 8002f02:	d107      	bne.n	8002f14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f91d 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00d      	beq.n	8002f48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3a:	d103      	bne.n	8002f44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e035      	b.n	8002fb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f50:	d108      	bne.n	8002f64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f52:	897b      	ldrh	r3, [r7, #10]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	e01b      	b.n	8002f9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f64:	897b      	ldrh	r3, [r7, #10]
 8002f66:	11db      	asrs	r3, r3, #7
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f003 0306 	and.w	r3, r3, #6
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f063 030f 	orn	r3, r3, #15
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	490e      	ldr	r1, [pc, #56]	; (8002fbc <I2C_MasterRequestWrite+0xfc>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f943 	bl	800320e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e010      	b.n	8002fb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4907      	ldr	r1, [pc, #28]	; (8002fc0 <I2C_MasterRequestWrite+0x100>)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f933 	bl	800320e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	00010008 	.word	0x00010008
 8002fc0:	00010002 	.word	0x00010002

08002fc4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d006      	beq.n	8002ffe <I2C_MasterRequestRead+0x3a>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d003      	beq.n	8002ffe <I2C_MasterRequestRead+0x3a>
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ffc:	d108      	bne.n	8003010 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	e00b      	b.n	8003028 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	2b11      	cmp	r3, #17
 8003016:	d107      	bne.n	8003028 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003026:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f893 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00d      	beq.n	800305c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304e:	d103      	bne.n	8003058 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003056:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e079      	b.n	8003150 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003064:	d108      	bne.n	8003078 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003066:	897b      	ldrh	r3, [r7, #10]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	611a      	str	r2, [r3, #16]
 8003076:	e05f      	b.n	8003138 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003078:	897b      	ldrh	r3, [r7, #10]
 800307a:	11db      	asrs	r3, r3, #7
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f003 0306 	and.w	r3, r3, #6
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f063 030f 	orn	r3, r3, #15
 8003088:	b2da      	uxtb	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4930      	ldr	r1, [pc, #192]	; (8003158 <I2C_MasterRequestRead+0x194>)
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f8b9 	bl	800320e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e054      	b.n	8003150 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030a6:	897b      	ldrh	r3, [r7, #10]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4929      	ldr	r1, [pc, #164]	; (800315c <I2C_MasterRequestRead+0x198>)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f8a9 	bl	800320e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e044      	b.n	8003150 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f831 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00d      	beq.n	8003120 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003112:	d103      	bne.n	800311c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e017      	b.n	8003150 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003120:	897b      	ldrh	r3, [r7, #10]
 8003122:	11db      	asrs	r3, r3, #7
 8003124:	b2db      	uxtb	r3, r3
 8003126:	f003 0306 	and.w	r3, r3, #6
 800312a:	b2db      	uxtb	r3, r3
 800312c:	f063 030e 	orn	r3, r3, #14
 8003130:	b2da      	uxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4907      	ldr	r1, [pc, #28]	; (800315c <I2C_MasterRequestRead+0x198>)
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f865 	bl	800320e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	00010008 	.word	0x00010008
 800315c:	00010002 	.word	0x00010002

08003160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003170:	e025      	b.n	80031be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003178:	d021      	beq.n	80031be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7fe fd95 	bl	8001ca8 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <I2C_WaitOnFlagUntilTimeout+0x30>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d116      	bne.n	80031be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f043 0220 	orr.w	r2, r3, #32
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e023      	b.n	8003206 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d10d      	bne.n	80031e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	43da      	mvns	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bf0c      	ite	eq
 80031da:	2301      	moveq	r3, #1
 80031dc:	2300      	movne	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	e00c      	b.n	80031fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	43da      	mvns	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	429a      	cmp	r2, r3
 8003202:	d0b6      	beq.n	8003172 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b084      	sub	sp, #16
 8003212:	af00      	add	r7, sp, #0
 8003214:	60f8      	str	r0, [r7, #12]
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800321c:	e051      	b.n	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322c:	d123      	bne.n	8003276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003246:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f043 0204 	orr.w	r2, r3, #4
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e046      	b.n	8003304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800327c:	d021      	beq.n	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327e:	f7fe fd13 	bl	8001ca8 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	429a      	cmp	r2, r3
 800328c:	d302      	bcc.n	8003294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d116      	bne.n	80032c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f043 0220 	orr.w	r2, r3, #32
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e020      	b.n	8003304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d10c      	bne.n	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4013      	ands	r3, r2
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	e00b      	b.n	80032fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	43da      	mvns	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4013      	ands	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d18d      	bne.n	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003318:	e02d      	b.n	8003376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f8ce 	bl	80034bc <I2C_IsAcknowledgeFailed>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e02d      	b.n	8003386 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003330:	d021      	beq.n	8003376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003332:	f7fe fcb9 	bl	8001ca8 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	429a      	cmp	r2, r3
 8003340:	d302      	bcc.n	8003348 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d116      	bne.n	8003376 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e007      	b.n	8003386 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003380:	2b80      	cmp	r3, #128	; 0x80
 8003382:	d1ca      	bne.n	800331a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b084      	sub	sp, #16
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800339a:	e02d      	b.n	80033f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f88d 	bl	80034bc <I2C_IsAcknowledgeFailed>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e02d      	b.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033b2:	d021      	beq.n	80033f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b4:	f7fe fc78 	bl	8001ca8 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d302      	bcc.n	80033ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d116      	bne.n	80033f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f043 0220 	orr.w	r2, r3, #32
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e007      	b.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b04      	cmp	r3, #4
 8003404:	d1ca      	bne.n	800339c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800341c:	e042      	b.n	80034a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b10      	cmp	r3, #16
 800342a:	d119      	bne.n	8003460 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0210 	mvn.w	r2, #16
 8003434:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e029      	b.n	80034b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003460:	f7fe fc22 	bl	8001ca8 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	429a      	cmp	r2, r3
 800346e:	d302      	bcc.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e007      	b.n	80034b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d1b5      	bne.n	800341e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d2:	d11b      	bne.n	800350c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr

08003518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e26c      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8087 	beq.w	8003646 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003538:	4b92      	ldr	r3, [pc, #584]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	2b04      	cmp	r3, #4
 8003542:	d00c      	beq.n	800355e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003544:	4b8f      	ldr	r3, [pc, #572]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	2b08      	cmp	r3, #8
 800354e:	d112      	bne.n	8003576 <HAL_RCC_OscConfig+0x5e>
 8003550:	4b8c      	ldr	r3, [pc, #560]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d10b      	bne.n	8003576 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355e:	4b89      	ldr	r3, [pc, #548]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d06c      	beq.n	8003644 <HAL_RCC_OscConfig+0x12c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d168      	bne.n	8003644 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e246      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x76>
 8003580:	4b80      	ldr	r3, [pc, #512]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a7f      	ldr	r2, [pc, #508]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	e02e      	b.n	80035ec <HAL_RCC_OscConfig+0xd4>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x98>
 8003596:	4b7b      	ldr	r3, [pc, #492]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a7a      	ldr	r2, [pc, #488]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 800359c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	4b78      	ldr	r3, [pc, #480]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a77      	ldr	r2, [pc, #476]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	e01d      	b.n	80035ec <HAL_RCC_OscConfig+0xd4>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCC_OscConfig+0xbc>
 80035ba:	4b72      	ldr	r3, [pc, #456]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a71      	ldr	r2, [pc, #452]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	4b6f      	ldr	r3, [pc, #444]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a6e      	ldr	r2, [pc, #440]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e00b      	b.n	80035ec <HAL_RCC_OscConfig+0xd4>
 80035d4:	4b6b      	ldr	r3, [pc, #428]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a6a      	ldr	r2, [pc, #424]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035de:	6013      	str	r3, [r2, #0]
 80035e0:	4b68      	ldr	r3, [pc, #416]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a67      	ldr	r2, [pc, #412]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d013      	beq.n	800361c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f4:	f7fe fb58 	bl	8001ca8 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe fb54 	bl	8001ca8 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e1fa      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	4b5d      	ldr	r3, [pc, #372]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0xe4>
 800361a:	e014      	b.n	8003646 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fe fb44 	bl	8001ca8 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003624:	f7fe fb40 	bl	8001ca8 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e1e6      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003636:	4b53      	ldr	r3, [pc, #332]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x10c>
 8003642:	e000      	b.n	8003646 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d063      	beq.n	800371a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003652:	4b4c      	ldr	r3, [pc, #304]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800365e:	4b49      	ldr	r3, [pc, #292]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b08      	cmp	r3, #8
 8003668:	d11c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x18c>
 800366a:	4b46      	ldr	r3, [pc, #280]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d116      	bne.n	80036a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003676:	4b43      	ldr	r3, [pc, #268]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_RCC_OscConfig+0x176>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d001      	beq.n	800368e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e1ba      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368e:	4b3d      	ldr	r3, [pc, #244]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4939      	ldr	r1, [pc, #228]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a2:	e03a      	b.n	800371a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d020      	beq.n	80036ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ac:	4b36      	ldr	r3, [pc, #216]	; (8003788 <HAL_RCC_OscConfig+0x270>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7fe faf9 	bl	8001ca8 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ba:	f7fe faf5 	bl	8001ca8 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e19b      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036cc:	4b2d      	ldr	r3, [pc, #180]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d8:	4b2a      	ldr	r3, [pc, #168]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4927      	ldr	r1, [pc, #156]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	600b      	str	r3, [r1, #0]
 80036ec:	e015      	b.n	800371a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ee:	4b26      	ldr	r3, [pc, #152]	; (8003788 <HAL_RCC_OscConfig+0x270>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fe fad8 	bl	8001ca8 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fc:	f7fe fad4 	bl	8001ca8 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e17a      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d03a      	beq.n	800379c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d019      	beq.n	8003762 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800372e:	4b17      	ldr	r3, [pc, #92]	; (800378c <HAL_RCC_OscConfig+0x274>)
 8003730:	2201      	movs	r2, #1
 8003732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003734:	f7fe fab8 	bl	8001ca8 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373c:	f7fe fab4 	bl	8001ca8 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e15a      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374e:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <HAL_RCC_OscConfig+0x26c>)
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800375a:	2001      	movs	r0, #1
 800375c:	f000 fac6 	bl	8003cec <RCC_Delay>
 8003760:	e01c      	b.n	800379c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_RCC_OscConfig+0x274>)
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003768:	f7fe fa9e 	bl	8001ca8 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800376e:	e00f      	b.n	8003790 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003770:	f7fe fa9a 	bl	8001ca8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d908      	bls.n	8003790 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e140      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
 8003782:	bf00      	nop
 8003784:	40021000 	.word	0x40021000
 8003788:	42420000 	.word	0x42420000
 800378c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003790:	4b9e      	ldr	r3, [pc, #632]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e9      	bne.n	8003770 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80a6 	beq.w	80038f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ae:	4b97      	ldr	r3, [pc, #604]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10d      	bne.n	80037d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ba:	4b94      	ldr	r3, [pc, #592]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	4a93      	ldr	r2, [pc, #588]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c4:	61d3      	str	r3, [r2, #28]
 80037c6:	4b91      	ldr	r3, [pc, #580]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d6:	4b8e      	ldr	r3, [pc, #568]	; (8003a10 <HAL_RCC_OscConfig+0x4f8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d118      	bne.n	8003814 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e2:	4b8b      	ldr	r3, [pc, #556]	; (8003a10 <HAL_RCC_OscConfig+0x4f8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a8a      	ldr	r2, [pc, #552]	; (8003a10 <HAL_RCC_OscConfig+0x4f8>)
 80037e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ee:	f7fe fa5b 	bl	8001ca8 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f6:	f7fe fa57 	bl	8001ca8 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b64      	cmp	r3, #100	; 0x64
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e0fd      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	4b81      	ldr	r3, [pc, #516]	; (8003a10 <HAL_RCC_OscConfig+0x4f8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x312>
 800381c:	4b7b      	ldr	r3, [pc, #492]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4a7a      	ldr	r2, [pc, #488]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6213      	str	r3, [r2, #32]
 8003828:	e02d      	b.n	8003886 <HAL_RCC_OscConfig+0x36e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x334>
 8003832:	4b76      	ldr	r3, [pc, #472]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	4a75      	ldr	r2, [pc, #468]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	6213      	str	r3, [r2, #32]
 800383e:	4b73      	ldr	r3, [pc, #460]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4a72      	ldr	r2, [pc, #456]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003844:	f023 0304 	bic.w	r3, r3, #4
 8003848:	6213      	str	r3, [r2, #32]
 800384a:	e01c      	b.n	8003886 <HAL_RCC_OscConfig+0x36e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b05      	cmp	r3, #5
 8003852:	d10c      	bne.n	800386e <HAL_RCC_OscConfig+0x356>
 8003854:	4b6d      	ldr	r3, [pc, #436]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	4a6c      	ldr	r2, [pc, #432]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 800385a:	f043 0304 	orr.w	r3, r3, #4
 800385e:	6213      	str	r3, [r2, #32]
 8003860:	4b6a      	ldr	r3, [pc, #424]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	4a69      	ldr	r2, [pc, #420]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	6213      	str	r3, [r2, #32]
 800386c:	e00b      	b.n	8003886 <HAL_RCC_OscConfig+0x36e>
 800386e:	4b67      	ldr	r3, [pc, #412]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	4a66      	ldr	r2, [pc, #408]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	6213      	str	r3, [r2, #32]
 800387a:	4b64      	ldr	r3, [pc, #400]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4a63      	ldr	r2, [pc, #396]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d015      	beq.n	80038ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388e:	f7fe fa0b 	bl	8001ca8 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003894:	e00a      	b.n	80038ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fe fa07 	bl	8001ca8 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e0ab      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ac:	4b57      	ldr	r3, [pc, #348]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d0ee      	beq.n	8003896 <HAL_RCC_OscConfig+0x37e>
 80038b8:	e014      	b.n	80038e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ba:	f7fe f9f5 	bl	8001ca8 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c0:	e00a      	b.n	80038d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c2:	f7fe f9f1 	bl	8001ca8 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e095      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d8:	4b4c      	ldr	r3, [pc, #304]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ee      	bne.n	80038c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d105      	bne.n	80038f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ea:	4b48      	ldr	r3, [pc, #288]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	4a47      	ldr	r2, [pc, #284]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80038f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8081 	beq.w	8003a02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003900:	4b42      	ldr	r3, [pc, #264]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b08      	cmp	r3, #8
 800390a:	d061      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d146      	bne.n	80039a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003914:	4b3f      	ldr	r3, [pc, #252]	; (8003a14 <HAL_RCC_OscConfig+0x4fc>)
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fe f9c5 	bl	8001ca8 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003922:	f7fe f9c1 	bl	8001ca8 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e067      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003934:	4b35      	ldr	r3, [pc, #212]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f0      	bne.n	8003922 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003948:	d108      	bne.n	800395c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800394a:	4b30      	ldr	r3, [pc, #192]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	492d      	ldr	r1, [pc, #180]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003958:	4313      	orrs	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800395c:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a19      	ldr	r1, [r3, #32]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	430b      	orrs	r3, r1
 800396e:	4927      	ldr	r1, [pc, #156]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003974:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <HAL_RCC_OscConfig+0x4fc>)
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397a:	f7fe f995 	bl	8001ca8 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003982:	f7fe f991 	bl	8001ca8 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e037      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003994:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x46a>
 80039a0:	e02f      	b.n	8003a02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a2:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <HAL_RCC_OscConfig+0x4fc>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fe f97e 	bl	8001ca8 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b0:	f7fe f97a 	bl	8001ca8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e020      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x498>
 80039ce:	e018      	b.n	8003a02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e013      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_OscConfig+0x4f4>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d001      	beq.n	8003a02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40007000 	.word	0x40007000
 8003a14:	42420060 	.word	0x42420060

08003a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0d0      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b6a      	ldr	r3, [pc, #424]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d910      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b67      	ldr	r3, [pc, #412]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 0207 	bic.w	r2, r3, #7
 8003a42:	4965      	ldr	r1, [pc, #404]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0b8      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a74:	4b59      	ldr	r3, [pc, #356]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a8c:	4b53      	ldr	r3, [pc, #332]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a52      	ldr	r2, [pc, #328]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a98:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	494d      	ldr	r1, [pc, #308]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d040      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d115      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e07f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad6:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e073      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e06b      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af6:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f023 0203 	bic.w	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4936      	ldr	r1, [pc, #216]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b08:	f7fe f8ce 	bl	8001ca8 <HAL_GetTick>
 8003b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b10:	f7fe f8ca 	bl	8001ca8 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e053      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 020c 	and.w	r2, r3, #12
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d1eb      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b38:	4b27      	ldr	r3, [pc, #156]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d210      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 0207 	bic.w	r2, r3, #7
 8003b4e:	4922      	ldr	r1, [pc, #136]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b20      	ldr	r3, [pc, #128]	; (8003bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e032      	b.n	8003bce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4916      	ldr	r1, [pc, #88]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b92:	4b12      	ldr	r3, [pc, #72]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	490e      	ldr	r1, [pc, #56]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ba6:	f000 f821 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003baa:	4601      	mov	r1, r0
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	5cd3      	ldrb	r3, [r2, r3]
 8003bba:	fa21 f303 	lsr.w	r3, r1, r3
 8003bbe:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <HAL_RCC_ClockConfig+0x1cc>)
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bc2:	4b09      	ldr	r3, [pc, #36]	; (8003be8 <HAL_RCC_ClockConfig+0x1d0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe f82c 	bl	8001c24 <HAL_InitTick>

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	08006194 	.word	0x08006194
 8003be4:	20000008 	.word	0x20000008
 8003be8:	2000000c 	.word	0x2000000c

08003bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	b490      	push	{r4, r7}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bf2:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bf4:	1d3c      	adds	r4, r7, #4
 8003bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bfc:	4b28      	ldr	r3, [pc, #160]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	2300      	movs	r3, #0
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c16:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d002      	beq.n	8003c2c <HAL_RCC_GetSysClockFreq+0x40>
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d003      	beq.n	8003c32 <HAL_RCC_GetSysClockFreq+0x46>
 8003c2a:	e02d      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c2e:	623b      	str	r3, [r7, #32]
      break;
 8003c30:	e02d      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	0c9b      	lsrs	r3, r3, #18
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c3e:	4413      	add	r3, r2
 8003c40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c50:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	0c5b      	lsrs	r3, r3, #17
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c5e:	4413      	add	r3, r2
 8003c60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	4a0f      	ldr	r2, [pc, #60]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c6a:	fb02 f203 	mul.w	r2, r2, r3
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
 8003c76:	e004      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	4a0c      	ldr	r2, [pc, #48]	; (8003cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c7c:	fb02 f303 	mul.w	r3, r2, r3
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	623b      	str	r3, [r7, #32]
      break;
 8003c86:	e002      	b.n	8003c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c88:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c8a:	623b      	str	r3, [r7, #32]
      break;
 8003c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3728      	adds	r7, #40	; 0x28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc90      	pop	{r4, r7}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	08006180 	.word	0x08006180
 8003ca0:	08006190 	.word	0x08006190
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	007a1200 	.word	0x007a1200
 8003cac:	003d0900 	.word	0x003d0900

08003cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb4:	4b02      	ldr	r3, [pc, #8]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	20000008 	.word	0x20000008

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cc8:	f7ff fff2 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4601      	mov	r1, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4a03      	ldr	r2, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cda:	5cd3      	ldrb	r3, [r2, r3]
 8003cdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	080061a4 	.word	0x080061a4

08003cec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <RCC_Delay+0x34>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <RCC_Delay+0x38>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	0a5b      	lsrs	r3, r3, #9
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d08:	bf00      	nop
  }
  while (Delay --);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1e5a      	subs	r2, r3, #1
 8003d0e:	60fa      	str	r2, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f9      	bne.n	8003d08 <RCC_Delay+0x1c>
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000008 	.word	0x20000008
 8003d24:	10624dd3 	.word	0x10624dd3

08003d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d07d      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003d44:	2300      	movs	r3, #0
 8003d46:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d48:	4b4f      	ldr	r3, [pc, #316]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d54:	4b4c      	ldr	r3, [pc, #304]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	4a4b      	ldr	r2, [pc, #300]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	61d3      	str	r3, [r2, #28]
 8003d60:	4b49      	ldr	r3, [pc, #292]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d70:	4b46      	ldr	r3, [pc, #280]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d118      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7c:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a42      	ldr	r2, [pc, #264]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d88:	f7fd ff8e 	bl	8001ca8 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8e:	e008      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d90:	f7fd ff8a 	bl	8001ca8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	; 0x64
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e06d      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da2:	4b3a      	ldr	r3, [pc, #232]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dae:	4b36      	ldr	r3, [pc, #216]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d02e      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d027      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dcc:	4b2e      	ldr	r3, [pc, #184]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dd6:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ddc:	4b2c      	ldr	r3, [pc, #176]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003de2:	4a29      	ldr	r2, [pc, #164]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d014      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fd ff59 	bl	8001ca8 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fd ff55 	bl	8001ca8 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e036      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e10:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0ee      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e1c:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	4917      	ldr	r1, [pc, #92]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d105      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e34:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e4c:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	490b      	ldr	r1, [pc, #44]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e6a:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	4904      	ldr	r1, [pc, #16]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40007000 	.word	0x40007000
 8003e90:	42420440 	.word	0x42420440

08003e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e01d      	b.n	8003ee2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd fcfa 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f000 fb1a 	bl	800450c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e01d      	b.n	8003f38 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d106      	bne.n	8003f16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f815 	bl	8003f40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	4619      	mov	r1, r3
 8003f28:	4610      	mov	r0, r2
 8003f2a:	f000 faef 	bl	800450c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
	...

08003f54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2201      	movs	r2, #1
 8003f64:	6839      	ldr	r1, [r7, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fd50 	bl	8004a0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a10      	ldr	r2, [pc, #64]	; (8003fb4 <HAL_TIM_PWM_Start+0x60>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d107      	bne.n	8003f86 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b06      	cmp	r3, #6
 8003f96:	d007      	beq.n	8003fa8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40012c00 	.word	0x40012c00

08003fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d122      	bne.n	8004014 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d11b      	bne.n	8004014 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0202 	mvn.w	r2, #2
 8003fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa6a 	bl	80044d4 <HAL_TIM_IC_CaptureCallback>
 8004000:	e005      	b.n	800400e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fa5d 	bl	80044c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fa6c 	bl	80044e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b04      	cmp	r3, #4
 8004020:	d122      	bne.n	8004068 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b04      	cmp	r3, #4
 800402e:	d11b      	bne.n	8004068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0204 	mvn.w	r2, #4
 8004038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2202      	movs	r2, #2
 800403e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fa40 	bl	80044d4 <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fa33 	bl	80044c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fa42 	bl	80044e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b08      	cmp	r3, #8
 8004074:	d122      	bne.n	80040bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b08      	cmp	r3, #8
 8004082:	d11b      	bne.n	80040bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0208 	mvn.w	r2, #8
 800408c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2204      	movs	r2, #4
 8004092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fa16 	bl	80044d4 <HAL_TIM_IC_CaptureCallback>
 80040a8:	e005      	b.n	80040b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fa09 	bl	80044c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 fa18 	bl	80044e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d122      	bne.n	8004110 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d11b      	bne.n	8004110 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0210 	mvn.w	r2, #16
 80040e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2208      	movs	r2, #8
 80040e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f9ec 	bl	80044d4 <HAL_TIM_IC_CaptureCallback>
 80040fc:	e005      	b.n	800410a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f9df 	bl	80044c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f9ee 	bl	80044e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b01      	cmp	r3, #1
 800411c:	d10e      	bne.n	800413c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b01      	cmp	r3, #1
 800412a:	d107      	bne.n	800413c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0201 	mvn.w	r2, #1
 8004134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fc ff66 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d10e      	bne.n	8004168 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	d107      	bne.n	8004168 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fd3e 	bl	8004be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b40      	cmp	r3, #64	; 0x40
 8004174:	d10e      	bne.n	8004194 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b40      	cmp	r3, #64	; 0x40
 8004182:	d107      	bne.n	8004194 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800418c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f9b2 	bl	80044f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d10e      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d107      	bne.n	80041c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0220 	mvn.w	r2, #32
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fd09 	bl	8004bd2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041c0:	bf00      	nop
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80041de:	2302      	movs	r3, #2
 80041e0:	e0b4      	b.n	800434c <HAL_TIM_PWM_ConfigChannel+0x184>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2202      	movs	r2, #2
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b0c      	cmp	r3, #12
 80041f6:	f200 809f 	bhi.w	8004338 <HAL_TIM_PWM_ConfigChannel+0x170>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	08004235 	.word	0x08004235
 8004204:	08004339 	.word	0x08004339
 8004208:	08004339 	.word	0x08004339
 800420c:	08004339 	.word	0x08004339
 8004210:	08004275 	.word	0x08004275
 8004214:	08004339 	.word	0x08004339
 8004218:	08004339 	.word	0x08004339
 800421c:	08004339 	.word	0x08004339
 8004220:	080042b7 	.word	0x080042b7
 8004224:	08004339 	.word	0x08004339
 8004228:	08004339 	.word	0x08004339
 800422c:	08004339 	.word	0x08004339
 8004230:	080042f7 	.word	0x080042f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f9c8 	bl	80045d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0208 	orr.w	r2, r2, #8
 800424e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0204 	bic.w	r2, r2, #4
 800425e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6999      	ldr	r1, [r3, #24]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	619a      	str	r2, [r3, #24]
      break;
 8004272:	e062      	b.n	800433a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fa0e 	bl	800469c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800428e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6999      	ldr	r1, [r3, #24]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	021a      	lsls	r2, r3, #8
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	619a      	str	r2, [r3, #24]
      break;
 80042b4:	e041      	b.n	800433a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fa57 	bl	8004770 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0208 	orr.w	r2, r2, #8
 80042d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69da      	ldr	r2, [r3, #28]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0204 	bic.w	r2, r2, #4
 80042e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69d9      	ldr	r1, [r3, #28]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	61da      	str	r2, [r3, #28]
      break;
 80042f4:	e021      	b.n	800433a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 faa1 	bl	8004844 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69da      	ldr	r2, [r3, #28]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69d9      	ldr	r1, [r3, #28]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	021a      	lsls	r2, r3, #8
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	61da      	str	r2, [r3, #28]
      break;
 8004336:	e000      	b.n	800433a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004338:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_TIM_ConfigClockSource+0x18>
 8004368:	2302      	movs	r3, #2
 800436a:	e0a6      	b.n	80044ba <HAL_TIM_ConfigClockSource+0x166>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800438a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004392:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d067      	beq.n	8004474 <HAL_TIM_ConfigClockSource+0x120>
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d80b      	bhi.n	80043c0 <HAL_TIM_ConfigClockSource+0x6c>
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d073      	beq.n	8004494 <HAL_TIM_ConfigClockSource+0x140>
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d802      	bhi.n	80043b6 <HAL_TIM_ConfigClockSource+0x62>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d06f      	beq.n	8004494 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80043b4:	e078      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d06c      	beq.n	8004494 <HAL_TIM_ConfigClockSource+0x140>
 80043ba:	2b30      	cmp	r3, #48	; 0x30
 80043bc:	d06a      	beq.n	8004494 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80043be:	e073      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043c0:	2b70      	cmp	r3, #112	; 0x70
 80043c2:	d00d      	beq.n	80043e0 <HAL_TIM_ConfigClockSource+0x8c>
 80043c4:	2b70      	cmp	r3, #112	; 0x70
 80043c6:	d804      	bhi.n	80043d2 <HAL_TIM_ConfigClockSource+0x7e>
 80043c8:	2b50      	cmp	r3, #80	; 0x50
 80043ca:	d033      	beq.n	8004434 <HAL_TIM_ConfigClockSource+0xe0>
 80043cc:	2b60      	cmp	r3, #96	; 0x60
 80043ce:	d041      	beq.n	8004454 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80043d0:	e06a      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d6:	d066      	beq.n	80044a6 <HAL_TIM_ConfigClockSource+0x152>
 80043d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043dc:	d017      	beq.n	800440e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80043de:	e063      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	6899      	ldr	r1, [r3, #8]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f000 faed 	bl	80049ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004402:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	609a      	str	r2, [r3, #8]
      break;
 800440c:	e04c      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6899      	ldr	r1, [r3, #8]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f000 fad6 	bl	80049ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004430:	609a      	str	r2, [r3, #8]
      break;
 8004432:	e039      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6818      	ldr	r0, [r3, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	6859      	ldr	r1, [r3, #4]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	461a      	mov	r2, r3
 8004442:	f000 fa4d 	bl	80048e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2150      	movs	r1, #80	; 0x50
 800444c:	4618      	mov	r0, r3
 800444e:	f000 faa4 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 8004452:	e029      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	461a      	mov	r2, r3
 8004462:	f000 fa6b 	bl	800493c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2160      	movs	r1, #96	; 0x60
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fa94 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 8004472:	e019      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	461a      	mov	r2, r3
 8004482:	f000 fa2d 	bl	80048e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2140      	movs	r1, #64	; 0x40
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fa84 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 8004492:	e009      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f000 fa7b 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 80044a4:	e000      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80044a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr

080044d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr

080044f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr
	...

0800450c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a29      	ldr	r2, [pc, #164]	; (80045c4 <TIM_Base_SetConfig+0xb8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00b      	beq.n	800453c <TIM_Base_SetConfig+0x30>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452a:	d007      	beq.n	800453c <TIM_Base_SetConfig+0x30>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a26      	ldr	r2, [pc, #152]	; (80045c8 <TIM_Base_SetConfig+0xbc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_Base_SetConfig+0x30>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a25      	ldr	r2, [pc, #148]	; (80045cc <TIM_Base_SetConfig+0xc0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d108      	bne.n	800454e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a1c      	ldr	r2, [pc, #112]	; (80045c4 <TIM_Base_SetConfig+0xb8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00b      	beq.n	800456e <TIM_Base_SetConfig+0x62>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455c:	d007      	beq.n	800456e <TIM_Base_SetConfig+0x62>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a19      	ldr	r2, [pc, #100]	; (80045c8 <TIM_Base_SetConfig+0xbc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d003      	beq.n	800456e <TIM_Base_SetConfig+0x62>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a18      	ldr	r2, [pc, #96]	; (80045cc <TIM_Base_SetConfig+0xc0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d108      	bne.n	8004580 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a07      	ldr	r2, [pc, #28]	; (80045c4 <TIM_Base_SetConfig+0xb8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d103      	bne.n	80045b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	615a      	str	r2, [r3, #20]
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800

080045d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f023 0201 	bic.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f023 0302 	bic.w	r3, r3, #2
 8004618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a1c      	ldr	r2, [pc, #112]	; (8004698 <TIM_OC1_SetConfig+0xc8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d10c      	bne.n	8004646 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f023 0308 	bic.w	r3, r3, #8
 8004632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	4313      	orrs	r3, r2
 800463c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f023 0304 	bic.w	r3, r3, #4
 8004644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a13      	ldr	r2, [pc, #76]	; (8004698 <TIM_OC1_SetConfig+0xc8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d111      	bne.n	8004672 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800465c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	621a      	str	r2, [r3, #32]
}
 800468c:	bf00      	nop
 800468e:	371c      	adds	r7, #28
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40012c00 	.word	0x40012c00

0800469c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f023 0210 	bic.w	r2, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0320 	bic.w	r3, r3, #32
 80046e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a1d      	ldr	r2, [pc, #116]	; (800476c <TIM_OC2_SetConfig+0xd0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d10d      	bne.n	8004718 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004716:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a14      	ldr	r2, [pc, #80]	; (800476c <TIM_OC2_SetConfig+0xd0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d113      	bne.n	8004748 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800472e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	621a      	str	r2, [r3, #32]
}
 8004762:	bf00      	nop
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr
 800476c:	40012c00 	.word	0x40012c00

08004770 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0303 	bic.w	r3, r3, #3
 80047a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	021b      	lsls	r3, r3, #8
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <TIM_OC3_SetConfig+0xd0>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d10d      	bne.n	80047ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a14      	ldr	r2, [pc, #80]	; (8004840 <TIM_OC3_SetConfig+0xd0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d113      	bne.n	800481a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	621a      	str	r2, [r3, #32]
}
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40012c00 	.word	0x40012c00

08004844 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	021b      	lsls	r3, r3, #8
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800488e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	031b      	lsls	r3, r3, #12
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a0f      	ldr	r2, [pc, #60]	; (80048dc <TIM_OC4_SetConfig+0x98>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d109      	bne.n	80048b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	019b      	lsls	r3, r3, #6
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr
 80048dc:	40012c00 	.word	0x40012c00

080048e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f023 0201 	bic.w	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 030a 	bic.w	r3, r3, #10
 800491c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr

0800493c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f023 0210 	bic.w	r2, r3, #16
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004966:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	031b      	lsls	r3, r3, #12
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004978:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	621a      	str	r2, [r3, #32]
}
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr

0800499a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f043 0307 	orr.w	r3, r3, #7
 80049bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	609a      	str	r2, [r3, #8]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b087      	sub	sp, #28
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
 80049da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	021a      	lsls	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	431a      	orrs	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	609a      	str	r2, [r3, #8]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 031f 	and.w	r3, r3, #31
 8004a1e:	2201      	movs	r2, #1
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a1a      	ldr	r2, [r3, #32]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	43db      	mvns	r3, r3
 8004a2e:	401a      	ands	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1a      	ldr	r2, [r3, #32]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 031f 	and.w	r3, r3, #31
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	431a      	orrs	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	621a      	str	r2, [r3, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2204      	movs	r2, #4
 8004a64:	6839      	ldr	r1, [r7, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 f8c5 	bl	8004bf6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b06      	cmp	r3, #6
 8004a8c:	d007      	beq.n	8004a9e <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e032      	b.n	8004b26 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d101      	bne.n	8004b4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b48:	2302      	movs	r3, #2
 8004b4a:	e03d      	b.n	8004bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr

08004bf6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b087      	sub	sp, #28
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	2204      	movs	r2, #4
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6a1a      	ldr	r2, [r3, #32]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	43db      	mvns	r3, r3
 8004c18:	401a      	ands	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a1a      	ldr	r2, [r3, #32]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f003 031f 	and.w	r3, r3, #31
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	621a      	str	r2, [r3, #32]
}
 8004c34:	bf00      	nop
 8004c36:	371c      	adds	r7, #28
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr
	...

08004c40 <__errno>:
 8004c40:	4b01      	ldr	r3, [pc, #4]	; (8004c48 <__errno+0x8>)
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	20000014 	.word	0x20000014

08004c4c <__libc_init_array>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	2500      	movs	r5, #0
 8004c50:	4e0c      	ldr	r6, [pc, #48]	; (8004c84 <__libc_init_array+0x38>)
 8004c52:	4c0d      	ldr	r4, [pc, #52]	; (8004c88 <__libc_init_array+0x3c>)
 8004c54:	1ba4      	subs	r4, r4, r6
 8004c56:	10a4      	asrs	r4, r4, #2
 8004c58:	42a5      	cmp	r5, r4
 8004c5a:	d109      	bne.n	8004c70 <__libc_init_array+0x24>
 8004c5c:	f001 fa74 	bl	8006148 <_init>
 8004c60:	2500      	movs	r5, #0
 8004c62:	4e0a      	ldr	r6, [pc, #40]	; (8004c8c <__libc_init_array+0x40>)
 8004c64:	4c0a      	ldr	r4, [pc, #40]	; (8004c90 <__libc_init_array+0x44>)
 8004c66:	1ba4      	subs	r4, r4, r6
 8004c68:	10a4      	asrs	r4, r4, #2
 8004c6a:	42a5      	cmp	r5, r4
 8004c6c:	d105      	bne.n	8004c7a <__libc_init_array+0x2e>
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c74:	4798      	blx	r3
 8004c76:	3501      	adds	r5, #1
 8004c78:	e7ee      	b.n	8004c58 <__libc_init_array+0xc>
 8004c7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c7e:	4798      	blx	r3
 8004c80:	3501      	adds	r5, #1
 8004c82:	e7f2      	b.n	8004c6a <__libc_init_array+0x1e>
 8004c84:	080065e0 	.word	0x080065e0
 8004c88:	080065e0 	.word	0x080065e0
 8004c8c:	080065e0 	.word	0x080065e0
 8004c90:	080065e4 	.word	0x080065e4

08004c94 <memset>:
 8004c94:	4603      	mov	r3, r0
 8004c96:	4402      	add	r2, r0
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d100      	bne.n	8004c9e <memset+0xa>
 8004c9c:	4770      	bx	lr
 8004c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ca2:	e7f9      	b.n	8004c98 <memset+0x4>

08004ca4 <_puts_r>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	460e      	mov	r6, r1
 8004ca8:	4605      	mov	r5, r0
 8004caa:	b118      	cbz	r0, 8004cb4 <_puts_r+0x10>
 8004cac:	6983      	ldr	r3, [r0, #24]
 8004cae:	b90b      	cbnz	r3, 8004cb4 <_puts_r+0x10>
 8004cb0:	f000 fa0c 	bl	80050cc <__sinit>
 8004cb4:	69ab      	ldr	r3, [r5, #24]
 8004cb6:	68ac      	ldr	r4, [r5, #8]
 8004cb8:	b913      	cbnz	r3, 8004cc0 <_puts_r+0x1c>
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f000 fa06 	bl	80050cc <__sinit>
 8004cc0:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <_puts_r+0xac>)
 8004cc2:	429c      	cmp	r4, r3
 8004cc4:	d117      	bne.n	8004cf6 <_puts_r+0x52>
 8004cc6:	686c      	ldr	r4, [r5, #4]
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	071b      	lsls	r3, r3, #28
 8004ccc:	d51d      	bpl.n	8004d0a <_puts_r+0x66>
 8004cce:	6923      	ldr	r3, [r4, #16]
 8004cd0:	b1db      	cbz	r3, 8004d0a <_puts_r+0x66>
 8004cd2:	3e01      	subs	r6, #1
 8004cd4:	68a3      	ldr	r3, [r4, #8]
 8004cd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	60a3      	str	r3, [r4, #8]
 8004cde:	b9e9      	cbnz	r1, 8004d1c <_puts_r+0x78>
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	da2e      	bge.n	8004d42 <_puts_r+0x9e>
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	210a      	movs	r1, #10
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f000 f83f 	bl	8004d6c <__swbuf_r>
 8004cee:	3001      	adds	r0, #1
 8004cf0:	d011      	beq.n	8004d16 <_puts_r+0x72>
 8004cf2:	200a      	movs	r0, #10
 8004cf4:	e011      	b.n	8004d1a <_puts_r+0x76>
 8004cf6:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <_puts_r+0xb0>)
 8004cf8:	429c      	cmp	r4, r3
 8004cfa:	d101      	bne.n	8004d00 <_puts_r+0x5c>
 8004cfc:	68ac      	ldr	r4, [r5, #8]
 8004cfe:	e7e3      	b.n	8004cc8 <_puts_r+0x24>
 8004d00:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <_puts_r+0xb4>)
 8004d02:	429c      	cmp	r4, r3
 8004d04:	bf08      	it	eq
 8004d06:	68ec      	ldreq	r4, [r5, #12]
 8004d08:	e7de      	b.n	8004cc8 <_puts_r+0x24>
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f000 f87f 	bl	8004e10 <__swsetup_r>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d0dd      	beq.n	8004cd2 <_puts_r+0x2e>
 8004d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	da04      	bge.n	8004d2a <_puts_r+0x86>
 8004d20:	69a2      	ldr	r2, [r4, #24]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	dc06      	bgt.n	8004d34 <_puts_r+0x90>
 8004d26:	290a      	cmp	r1, #10
 8004d28:	d004      	beq.n	8004d34 <_puts_r+0x90>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	6022      	str	r2, [r4, #0]
 8004d30:	7019      	strb	r1, [r3, #0]
 8004d32:	e7cf      	b.n	8004cd4 <_puts_r+0x30>
 8004d34:	4622      	mov	r2, r4
 8004d36:	4628      	mov	r0, r5
 8004d38:	f000 f818 	bl	8004d6c <__swbuf_r>
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d1c9      	bne.n	8004cd4 <_puts_r+0x30>
 8004d40:	e7e9      	b.n	8004d16 <_puts_r+0x72>
 8004d42:	200a      	movs	r0, #10
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	6022      	str	r2, [r4, #0]
 8004d4a:	7018      	strb	r0, [r3, #0]
 8004d4c:	e7e5      	b.n	8004d1a <_puts_r+0x76>
 8004d4e:	bf00      	nop
 8004d50:	080061d0 	.word	0x080061d0
 8004d54:	080061f0 	.word	0x080061f0
 8004d58:	080061b0 	.word	0x080061b0

08004d5c <puts>:
 8004d5c:	4b02      	ldr	r3, [pc, #8]	; (8004d68 <puts+0xc>)
 8004d5e:	4601      	mov	r1, r0
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	f7ff bf9f 	b.w	8004ca4 <_puts_r>
 8004d66:	bf00      	nop
 8004d68:	20000014 	.word	0x20000014

08004d6c <__swbuf_r>:
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	460e      	mov	r6, r1
 8004d70:	4614      	mov	r4, r2
 8004d72:	4605      	mov	r5, r0
 8004d74:	b118      	cbz	r0, 8004d7e <__swbuf_r+0x12>
 8004d76:	6983      	ldr	r3, [r0, #24]
 8004d78:	b90b      	cbnz	r3, 8004d7e <__swbuf_r+0x12>
 8004d7a:	f000 f9a7 	bl	80050cc <__sinit>
 8004d7e:	4b21      	ldr	r3, [pc, #132]	; (8004e04 <__swbuf_r+0x98>)
 8004d80:	429c      	cmp	r4, r3
 8004d82:	d12a      	bne.n	8004dda <__swbuf_r+0x6e>
 8004d84:	686c      	ldr	r4, [r5, #4]
 8004d86:	69a3      	ldr	r3, [r4, #24]
 8004d88:	60a3      	str	r3, [r4, #8]
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	071a      	lsls	r2, r3, #28
 8004d8e:	d52e      	bpl.n	8004dee <__swbuf_r+0x82>
 8004d90:	6923      	ldr	r3, [r4, #16]
 8004d92:	b363      	cbz	r3, 8004dee <__swbuf_r+0x82>
 8004d94:	6923      	ldr	r3, [r4, #16]
 8004d96:	6820      	ldr	r0, [r4, #0]
 8004d98:	b2f6      	uxtb	r6, r6
 8004d9a:	1ac0      	subs	r0, r0, r3
 8004d9c:	6963      	ldr	r3, [r4, #20]
 8004d9e:	4637      	mov	r7, r6
 8004da0:	4283      	cmp	r3, r0
 8004da2:	dc04      	bgt.n	8004dae <__swbuf_r+0x42>
 8004da4:	4621      	mov	r1, r4
 8004da6:	4628      	mov	r0, r5
 8004da8:	f000 f926 	bl	8004ff8 <_fflush_r>
 8004dac:	bb28      	cbnz	r0, 8004dfa <__swbuf_r+0x8e>
 8004dae:	68a3      	ldr	r3, [r4, #8]
 8004db0:	3001      	adds	r0, #1
 8004db2:	3b01      	subs	r3, #1
 8004db4:	60a3      	str	r3, [r4, #8]
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	6022      	str	r2, [r4, #0]
 8004dbc:	701e      	strb	r6, [r3, #0]
 8004dbe:	6963      	ldr	r3, [r4, #20]
 8004dc0:	4283      	cmp	r3, r0
 8004dc2:	d004      	beq.n	8004dce <__swbuf_r+0x62>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	07db      	lsls	r3, r3, #31
 8004dc8:	d519      	bpl.n	8004dfe <__swbuf_r+0x92>
 8004dca:	2e0a      	cmp	r6, #10
 8004dcc:	d117      	bne.n	8004dfe <__swbuf_r+0x92>
 8004dce:	4621      	mov	r1, r4
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f000 f911 	bl	8004ff8 <_fflush_r>
 8004dd6:	b190      	cbz	r0, 8004dfe <__swbuf_r+0x92>
 8004dd8:	e00f      	b.n	8004dfa <__swbuf_r+0x8e>
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <__swbuf_r+0x9c>)
 8004ddc:	429c      	cmp	r4, r3
 8004dde:	d101      	bne.n	8004de4 <__swbuf_r+0x78>
 8004de0:	68ac      	ldr	r4, [r5, #8]
 8004de2:	e7d0      	b.n	8004d86 <__swbuf_r+0x1a>
 8004de4:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <__swbuf_r+0xa0>)
 8004de6:	429c      	cmp	r4, r3
 8004de8:	bf08      	it	eq
 8004dea:	68ec      	ldreq	r4, [r5, #12]
 8004dec:	e7cb      	b.n	8004d86 <__swbuf_r+0x1a>
 8004dee:	4621      	mov	r1, r4
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 f80d 	bl	8004e10 <__swsetup_r>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d0cc      	beq.n	8004d94 <__swbuf_r+0x28>
 8004dfa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004dfe:	4638      	mov	r0, r7
 8004e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e02:	bf00      	nop
 8004e04:	080061d0 	.word	0x080061d0
 8004e08:	080061f0 	.word	0x080061f0
 8004e0c:	080061b0 	.word	0x080061b0

08004e10 <__swsetup_r>:
 8004e10:	4b32      	ldr	r3, [pc, #200]	; (8004edc <__swsetup_r+0xcc>)
 8004e12:	b570      	push	{r4, r5, r6, lr}
 8004e14:	681d      	ldr	r5, [r3, #0]
 8004e16:	4606      	mov	r6, r0
 8004e18:	460c      	mov	r4, r1
 8004e1a:	b125      	cbz	r5, 8004e26 <__swsetup_r+0x16>
 8004e1c:	69ab      	ldr	r3, [r5, #24]
 8004e1e:	b913      	cbnz	r3, 8004e26 <__swsetup_r+0x16>
 8004e20:	4628      	mov	r0, r5
 8004e22:	f000 f953 	bl	80050cc <__sinit>
 8004e26:	4b2e      	ldr	r3, [pc, #184]	; (8004ee0 <__swsetup_r+0xd0>)
 8004e28:	429c      	cmp	r4, r3
 8004e2a:	d10f      	bne.n	8004e4c <__swsetup_r+0x3c>
 8004e2c:	686c      	ldr	r4, [r5, #4]
 8004e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	0715      	lsls	r5, r2, #28
 8004e36:	d42c      	bmi.n	8004e92 <__swsetup_r+0x82>
 8004e38:	06d0      	lsls	r0, r2, #27
 8004e3a:	d411      	bmi.n	8004e60 <__swsetup_r+0x50>
 8004e3c:	2209      	movs	r2, #9
 8004e3e:	6032      	str	r2, [r6, #0]
 8004e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e44:	81a3      	strh	r3, [r4, #12]
 8004e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e4a:	e03e      	b.n	8004eca <__swsetup_r+0xba>
 8004e4c:	4b25      	ldr	r3, [pc, #148]	; (8004ee4 <__swsetup_r+0xd4>)
 8004e4e:	429c      	cmp	r4, r3
 8004e50:	d101      	bne.n	8004e56 <__swsetup_r+0x46>
 8004e52:	68ac      	ldr	r4, [r5, #8]
 8004e54:	e7eb      	b.n	8004e2e <__swsetup_r+0x1e>
 8004e56:	4b24      	ldr	r3, [pc, #144]	; (8004ee8 <__swsetup_r+0xd8>)
 8004e58:	429c      	cmp	r4, r3
 8004e5a:	bf08      	it	eq
 8004e5c:	68ec      	ldreq	r4, [r5, #12]
 8004e5e:	e7e6      	b.n	8004e2e <__swsetup_r+0x1e>
 8004e60:	0751      	lsls	r1, r2, #29
 8004e62:	d512      	bpl.n	8004e8a <__swsetup_r+0x7a>
 8004e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e66:	b141      	cbz	r1, 8004e7a <__swsetup_r+0x6a>
 8004e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e6c:	4299      	cmp	r1, r3
 8004e6e:	d002      	beq.n	8004e76 <__swsetup_r+0x66>
 8004e70:	4630      	mov	r0, r6
 8004e72:	f000 fa19 	bl	80052a8 <_free_r>
 8004e76:	2300      	movs	r3, #0
 8004e78:	6363      	str	r3, [r4, #52]	; 0x34
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e80:	81a3      	strh	r3, [r4, #12]
 8004e82:	2300      	movs	r3, #0
 8004e84:	6063      	str	r3, [r4, #4]
 8004e86:	6923      	ldr	r3, [r4, #16]
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	f043 0308 	orr.w	r3, r3, #8
 8004e90:	81a3      	strh	r3, [r4, #12]
 8004e92:	6923      	ldr	r3, [r4, #16]
 8004e94:	b94b      	cbnz	r3, 8004eaa <__swsetup_r+0x9a>
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea0:	d003      	beq.n	8004eaa <__swsetup_r+0x9a>
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	f000 f9bf 	bl	8005228 <__smakebuf_r>
 8004eaa:	89a2      	ldrh	r2, [r4, #12]
 8004eac:	f012 0301 	ands.w	r3, r2, #1
 8004eb0:	d00c      	beq.n	8004ecc <__swsetup_r+0xbc>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60a3      	str	r3, [r4, #8]
 8004eb6:	6963      	ldr	r3, [r4, #20]
 8004eb8:	425b      	negs	r3, r3
 8004eba:	61a3      	str	r3, [r4, #24]
 8004ebc:	6923      	ldr	r3, [r4, #16]
 8004ebe:	b953      	cbnz	r3, 8004ed6 <__swsetup_r+0xc6>
 8004ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ec4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004ec8:	d1ba      	bne.n	8004e40 <__swsetup_r+0x30>
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	0792      	lsls	r2, r2, #30
 8004ece:	bf58      	it	pl
 8004ed0:	6963      	ldrpl	r3, [r4, #20]
 8004ed2:	60a3      	str	r3, [r4, #8]
 8004ed4:	e7f2      	b.n	8004ebc <__swsetup_r+0xac>
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	e7f7      	b.n	8004eca <__swsetup_r+0xba>
 8004eda:	bf00      	nop
 8004edc:	20000014 	.word	0x20000014
 8004ee0:	080061d0 	.word	0x080061d0
 8004ee4:	080061f0 	.word	0x080061f0
 8004ee8:	080061b0 	.word	0x080061b0

08004eec <__sflush_r>:
 8004eec:	898a      	ldrh	r2, [r1, #12]
 8004eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	0710      	lsls	r0, r2, #28
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	d458      	bmi.n	8004fac <__sflush_r+0xc0>
 8004efa:	684b      	ldr	r3, [r1, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	dc05      	bgt.n	8004f0c <__sflush_r+0x20>
 8004f00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	dc02      	bgt.n	8004f0c <__sflush_r+0x20>
 8004f06:	2000      	movs	r0, #0
 8004f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f0e:	2e00      	cmp	r6, #0
 8004f10:	d0f9      	beq.n	8004f06 <__sflush_r+0x1a>
 8004f12:	2300      	movs	r3, #0
 8004f14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f18:	682f      	ldr	r7, [r5, #0]
 8004f1a:	6a21      	ldr	r1, [r4, #32]
 8004f1c:	602b      	str	r3, [r5, #0]
 8004f1e:	d032      	beq.n	8004f86 <__sflush_r+0x9a>
 8004f20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f22:	89a3      	ldrh	r3, [r4, #12]
 8004f24:	075a      	lsls	r2, r3, #29
 8004f26:	d505      	bpl.n	8004f34 <__sflush_r+0x48>
 8004f28:	6863      	ldr	r3, [r4, #4]
 8004f2a:	1ac0      	subs	r0, r0, r3
 8004f2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f2e:	b10b      	cbz	r3, 8004f34 <__sflush_r+0x48>
 8004f30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f32:	1ac0      	subs	r0, r0, r3
 8004f34:	2300      	movs	r3, #0
 8004f36:	4602      	mov	r2, r0
 8004f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f3a:	6a21      	ldr	r1, [r4, #32]
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	47b0      	blx	r6
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	d106      	bne.n	8004f54 <__sflush_r+0x68>
 8004f46:	6829      	ldr	r1, [r5, #0]
 8004f48:	291d      	cmp	r1, #29
 8004f4a:	d848      	bhi.n	8004fde <__sflush_r+0xf2>
 8004f4c:	4a29      	ldr	r2, [pc, #164]	; (8004ff4 <__sflush_r+0x108>)
 8004f4e:	40ca      	lsrs	r2, r1
 8004f50:	07d6      	lsls	r6, r2, #31
 8004f52:	d544      	bpl.n	8004fde <__sflush_r+0xf2>
 8004f54:	2200      	movs	r2, #0
 8004f56:	6062      	str	r2, [r4, #4]
 8004f58:	6922      	ldr	r2, [r4, #16]
 8004f5a:	04d9      	lsls	r1, r3, #19
 8004f5c:	6022      	str	r2, [r4, #0]
 8004f5e:	d504      	bpl.n	8004f6a <__sflush_r+0x7e>
 8004f60:	1c42      	adds	r2, r0, #1
 8004f62:	d101      	bne.n	8004f68 <__sflush_r+0x7c>
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	b903      	cbnz	r3, 8004f6a <__sflush_r+0x7e>
 8004f68:	6560      	str	r0, [r4, #84]	; 0x54
 8004f6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f6c:	602f      	str	r7, [r5, #0]
 8004f6e:	2900      	cmp	r1, #0
 8004f70:	d0c9      	beq.n	8004f06 <__sflush_r+0x1a>
 8004f72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f76:	4299      	cmp	r1, r3
 8004f78:	d002      	beq.n	8004f80 <__sflush_r+0x94>
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 f994 	bl	80052a8 <_free_r>
 8004f80:	2000      	movs	r0, #0
 8004f82:	6360      	str	r0, [r4, #52]	; 0x34
 8004f84:	e7c0      	b.n	8004f08 <__sflush_r+0x1c>
 8004f86:	2301      	movs	r3, #1
 8004f88:	4628      	mov	r0, r5
 8004f8a:	47b0      	blx	r6
 8004f8c:	1c41      	adds	r1, r0, #1
 8004f8e:	d1c8      	bne.n	8004f22 <__sflush_r+0x36>
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0c5      	beq.n	8004f22 <__sflush_r+0x36>
 8004f96:	2b1d      	cmp	r3, #29
 8004f98:	d001      	beq.n	8004f9e <__sflush_r+0xb2>
 8004f9a:	2b16      	cmp	r3, #22
 8004f9c:	d101      	bne.n	8004fa2 <__sflush_r+0xb6>
 8004f9e:	602f      	str	r7, [r5, #0]
 8004fa0:	e7b1      	b.n	8004f06 <__sflush_r+0x1a>
 8004fa2:	89a3      	ldrh	r3, [r4, #12]
 8004fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fa8:	81a3      	strh	r3, [r4, #12]
 8004faa:	e7ad      	b.n	8004f08 <__sflush_r+0x1c>
 8004fac:	690f      	ldr	r7, [r1, #16]
 8004fae:	2f00      	cmp	r7, #0
 8004fb0:	d0a9      	beq.n	8004f06 <__sflush_r+0x1a>
 8004fb2:	0793      	lsls	r3, r2, #30
 8004fb4:	bf18      	it	ne
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	680e      	ldr	r6, [r1, #0]
 8004fba:	bf08      	it	eq
 8004fbc:	694b      	ldreq	r3, [r1, #20]
 8004fbe:	eba6 0807 	sub.w	r8, r6, r7
 8004fc2:	600f      	str	r7, [r1, #0]
 8004fc4:	608b      	str	r3, [r1, #8]
 8004fc6:	f1b8 0f00 	cmp.w	r8, #0
 8004fca:	dd9c      	ble.n	8004f06 <__sflush_r+0x1a>
 8004fcc:	4643      	mov	r3, r8
 8004fce:	463a      	mov	r2, r7
 8004fd0:	6a21      	ldr	r1, [r4, #32]
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fd6:	47b0      	blx	r6
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	dc06      	bgt.n	8004fea <__sflush_r+0xfe>
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe2:	81a3      	strh	r3, [r4, #12]
 8004fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fe8:	e78e      	b.n	8004f08 <__sflush_r+0x1c>
 8004fea:	4407      	add	r7, r0
 8004fec:	eba8 0800 	sub.w	r8, r8, r0
 8004ff0:	e7e9      	b.n	8004fc6 <__sflush_r+0xda>
 8004ff2:	bf00      	nop
 8004ff4:	20400001 	.word	0x20400001

08004ff8 <_fflush_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	690b      	ldr	r3, [r1, #16]
 8004ffc:	4605      	mov	r5, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	b1db      	cbz	r3, 800503a <_fflush_r+0x42>
 8005002:	b118      	cbz	r0, 800500c <_fflush_r+0x14>
 8005004:	6983      	ldr	r3, [r0, #24]
 8005006:	b90b      	cbnz	r3, 800500c <_fflush_r+0x14>
 8005008:	f000 f860 	bl	80050cc <__sinit>
 800500c:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <_fflush_r+0x48>)
 800500e:	429c      	cmp	r4, r3
 8005010:	d109      	bne.n	8005026 <_fflush_r+0x2e>
 8005012:	686c      	ldr	r4, [r5, #4]
 8005014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005018:	b17b      	cbz	r3, 800503a <_fflush_r+0x42>
 800501a:	4621      	mov	r1, r4
 800501c:	4628      	mov	r0, r5
 800501e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005022:	f7ff bf63 	b.w	8004eec <__sflush_r>
 8005026:	4b07      	ldr	r3, [pc, #28]	; (8005044 <_fflush_r+0x4c>)
 8005028:	429c      	cmp	r4, r3
 800502a:	d101      	bne.n	8005030 <_fflush_r+0x38>
 800502c:	68ac      	ldr	r4, [r5, #8]
 800502e:	e7f1      	b.n	8005014 <_fflush_r+0x1c>
 8005030:	4b05      	ldr	r3, [pc, #20]	; (8005048 <_fflush_r+0x50>)
 8005032:	429c      	cmp	r4, r3
 8005034:	bf08      	it	eq
 8005036:	68ec      	ldreq	r4, [r5, #12]
 8005038:	e7ec      	b.n	8005014 <_fflush_r+0x1c>
 800503a:	2000      	movs	r0, #0
 800503c:	bd38      	pop	{r3, r4, r5, pc}
 800503e:	bf00      	nop
 8005040:	080061d0 	.word	0x080061d0
 8005044:	080061f0 	.word	0x080061f0
 8005048:	080061b0 	.word	0x080061b0

0800504c <std>:
 800504c:	2300      	movs	r3, #0
 800504e:	b510      	push	{r4, lr}
 8005050:	4604      	mov	r4, r0
 8005052:	e9c0 3300 	strd	r3, r3, [r0]
 8005056:	6083      	str	r3, [r0, #8]
 8005058:	8181      	strh	r1, [r0, #12]
 800505a:	6643      	str	r3, [r0, #100]	; 0x64
 800505c:	81c2      	strh	r2, [r0, #14]
 800505e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005062:	6183      	str	r3, [r0, #24]
 8005064:	4619      	mov	r1, r3
 8005066:	2208      	movs	r2, #8
 8005068:	305c      	adds	r0, #92	; 0x5c
 800506a:	f7ff fe13 	bl	8004c94 <memset>
 800506e:	4b05      	ldr	r3, [pc, #20]	; (8005084 <std+0x38>)
 8005070:	6224      	str	r4, [r4, #32]
 8005072:	6263      	str	r3, [r4, #36]	; 0x24
 8005074:	4b04      	ldr	r3, [pc, #16]	; (8005088 <std+0x3c>)
 8005076:	62a3      	str	r3, [r4, #40]	; 0x28
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <std+0x40>)
 800507a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800507c:	4b04      	ldr	r3, [pc, #16]	; (8005090 <std+0x44>)
 800507e:	6323      	str	r3, [r4, #48]	; 0x30
 8005080:	bd10      	pop	{r4, pc}
 8005082:	bf00      	nop
 8005084:	08005415 	.word	0x08005415
 8005088:	08005437 	.word	0x08005437
 800508c:	0800546f 	.word	0x0800546f
 8005090:	08005493 	.word	0x08005493

08005094 <_cleanup_r>:
 8005094:	4901      	ldr	r1, [pc, #4]	; (800509c <_cleanup_r+0x8>)
 8005096:	f000 b885 	b.w	80051a4 <_fwalk_reent>
 800509a:	bf00      	nop
 800509c:	08004ff9 	.word	0x08004ff9

080050a0 <__sfmoreglue>:
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	2568      	movs	r5, #104	; 0x68
 80050a4:	1e4a      	subs	r2, r1, #1
 80050a6:	4355      	muls	r5, r2
 80050a8:	460e      	mov	r6, r1
 80050aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050ae:	f000 f947 	bl	8005340 <_malloc_r>
 80050b2:	4604      	mov	r4, r0
 80050b4:	b140      	cbz	r0, 80050c8 <__sfmoreglue+0x28>
 80050b6:	2100      	movs	r1, #0
 80050b8:	e9c0 1600 	strd	r1, r6, [r0]
 80050bc:	300c      	adds	r0, #12
 80050be:	60a0      	str	r0, [r4, #8]
 80050c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050c4:	f7ff fde6 	bl	8004c94 <memset>
 80050c8:	4620      	mov	r0, r4
 80050ca:	bd70      	pop	{r4, r5, r6, pc}

080050cc <__sinit>:
 80050cc:	6983      	ldr	r3, [r0, #24]
 80050ce:	b510      	push	{r4, lr}
 80050d0:	4604      	mov	r4, r0
 80050d2:	bb33      	cbnz	r3, 8005122 <__sinit+0x56>
 80050d4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80050d8:	6503      	str	r3, [r0, #80]	; 0x50
 80050da:	4b12      	ldr	r3, [pc, #72]	; (8005124 <__sinit+0x58>)
 80050dc:	4a12      	ldr	r2, [pc, #72]	; (8005128 <__sinit+0x5c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6282      	str	r2, [r0, #40]	; 0x28
 80050e2:	4298      	cmp	r0, r3
 80050e4:	bf04      	itt	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	6183      	streq	r3, [r0, #24]
 80050ea:	f000 f81f 	bl	800512c <__sfp>
 80050ee:	6060      	str	r0, [r4, #4]
 80050f0:	4620      	mov	r0, r4
 80050f2:	f000 f81b 	bl	800512c <__sfp>
 80050f6:	60a0      	str	r0, [r4, #8]
 80050f8:	4620      	mov	r0, r4
 80050fa:	f000 f817 	bl	800512c <__sfp>
 80050fe:	2200      	movs	r2, #0
 8005100:	60e0      	str	r0, [r4, #12]
 8005102:	2104      	movs	r1, #4
 8005104:	6860      	ldr	r0, [r4, #4]
 8005106:	f7ff ffa1 	bl	800504c <std>
 800510a:	2201      	movs	r2, #1
 800510c:	2109      	movs	r1, #9
 800510e:	68a0      	ldr	r0, [r4, #8]
 8005110:	f7ff ff9c 	bl	800504c <std>
 8005114:	2202      	movs	r2, #2
 8005116:	2112      	movs	r1, #18
 8005118:	68e0      	ldr	r0, [r4, #12]
 800511a:	f7ff ff97 	bl	800504c <std>
 800511e:	2301      	movs	r3, #1
 8005120:	61a3      	str	r3, [r4, #24]
 8005122:	bd10      	pop	{r4, pc}
 8005124:	080061ac 	.word	0x080061ac
 8005128:	08005095 	.word	0x08005095

0800512c <__sfp>:
 800512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800512e:	4b1b      	ldr	r3, [pc, #108]	; (800519c <__sfp+0x70>)
 8005130:	4607      	mov	r7, r0
 8005132:	681e      	ldr	r6, [r3, #0]
 8005134:	69b3      	ldr	r3, [r6, #24]
 8005136:	b913      	cbnz	r3, 800513e <__sfp+0x12>
 8005138:	4630      	mov	r0, r6
 800513a:	f7ff ffc7 	bl	80050cc <__sinit>
 800513e:	3648      	adds	r6, #72	; 0x48
 8005140:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005144:	3b01      	subs	r3, #1
 8005146:	d503      	bpl.n	8005150 <__sfp+0x24>
 8005148:	6833      	ldr	r3, [r6, #0]
 800514a:	b133      	cbz	r3, 800515a <__sfp+0x2e>
 800514c:	6836      	ldr	r6, [r6, #0]
 800514e:	e7f7      	b.n	8005140 <__sfp+0x14>
 8005150:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005154:	b16d      	cbz	r5, 8005172 <__sfp+0x46>
 8005156:	3468      	adds	r4, #104	; 0x68
 8005158:	e7f4      	b.n	8005144 <__sfp+0x18>
 800515a:	2104      	movs	r1, #4
 800515c:	4638      	mov	r0, r7
 800515e:	f7ff ff9f 	bl	80050a0 <__sfmoreglue>
 8005162:	6030      	str	r0, [r6, #0]
 8005164:	2800      	cmp	r0, #0
 8005166:	d1f1      	bne.n	800514c <__sfp+0x20>
 8005168:	230c      	movs	r3, #12
 800516a:	4604      	mov	r4, r0
 800516c:	603b      	str	r3, [r7, #0]
 800516e:	4620      	mov	r0, r4
 8005170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005172:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <__sfp+0x74>)
 8005174:	6665      	str	r5, [r4, #100]	; 0x64
 8005176:	e9c4 5500 	strd	r5, r5, [r4]
 800517a:	60a5      	str	r5, [r4, #8]
 800517c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005180:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005184:	2208      	movs	r2, #8
 8005186:	4629      	mov	r1, r5
 8005188:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800518c:	f7ff fd82 	bl	8004c94 <memset>
 8005190:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005194:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005198:	e7e9      	b.n	800516e <__sfp+0x42>
 800519a:	bf00      	nop
 800519c:	080061ac 	.word	0x080061ac
 80051a0:	ffff0001 	.word	0xffff0001

080051a4 <_fwalk_reent>:
 80051a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a8:	4680      	mov	r8, r0
 80051aa:	4689      	mov	r9, r1
 80051ac:	2600      	movs	r6, #0
 80051ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80051b2:	b914      	cbnz	r4, 80051ba <_fwalk_reent+0x16>
 80051b4:	4630      	mov	r0, r6
 80051b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80051be:	3f01      	subs	r7, #1
 80051c0:	d501      	bpl.n	80051c6 <_fwalk_reent+0x22>
 80051c2:	6824      	ldr	r4, [r4, #0]
 80051c4:	e7f5      	b.n	80051b2 <_fwalk_reent+0xe>
 80051c6:	89ab      	ldrh	r3, [r5, #12]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d907      	bls.n	80051dc <_fwalk_reent+0x38>
 80051cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051d0:	3301      	adds	r3, #1
 80051d2:	d003      	beq.n	80051dc <_fwalk_reent+0x38>
 80051d4:	4629      	mov	r1, r5
 80051d6:	4640      	mov	r0, r8
 80051d8:	47c8      	blx	r9
 80051da:	4306      	orrs	r6, r0
 80051dc:	3568      	adds	r5, #104	; 0x68
 80051de:	e7ee      	b.n	80051be <_fwalk_reent+0x1a>

080051e0 <__swhatbuf_r>:
 80051e0:	b570      	push	{r4, r5, r6, lr}
 80051e2:	460e      	mov	r6, r1
 80051e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e8:	b096      	sub	sp, #88	; 0x58
 80051ea:	2900      	cmp	r1, #0
 80051ec:	4614      	mov	r4, r2
 80051ee:	461d      	mov	r5, r3
 80051f0:	da07      	bge.n	8005202 <__swhatbuf_r+0x22>
 80051f2:	2300      	movs	r3, #0
 80051f4:	602b      	str	r3, [r5, #0]
 80051f6:	89b3      	ldrh	r3, [r6, #12]
 80051f8:	061a      	lsls	r2, r3, #24
 80051fa:	d410      	bmi.n	800521e <__swhatbuf_r+0x3e>
 80051fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005200:	e00e      	b.n	8005220 <__swhatbuf_r+0x40>
 8005202:	466a      	mov	r2, sp
 8005204:	f000 f96c 	bl	80054e0 <_fstat_r>
 8005208:	2800      	cmp	r0, #0
 800520a:	dbf2      	blt.n	80051f2 <__swhatbuf_r+0x12>
 800520c:	9a01      	ldr	r2, [sp, #4]
 800520e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005212:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005216:	425a      	negs	r2, r3
 8005218:	415a      	adcs	r2, r3
 800521a:	602a      	str	r2, [r5, #0]
 800521c:	e7ee      	b.n	80051fc <__swhatbuf_r+0x1c>
 800521e:	2340      	movs	r3, #64	; 0x40
 8005220:	2000      	movs	r0, #0
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	b016      	add	sp, #88	; 0x58
 8005226:	bd70      	pop	{r4, r5, r6, pc}

08005228 <__smakebuf_r>:
 8005228:	898b      	ldrh	r3, [r1, #12]
 800522a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800522c:	079d      	lsls	r5, r3, #30
 800522e:	4606      	mov	r6, r0
 8005230:	460c      	mov	r4, r1
 8005232:	d507      	bpl.n	8005244 <__smakebuf_r+0x1c>
 8005234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	6123      	str	r3, [r4, #16]
 800523c:	2301      	movs	r3, #1
 800523e:	6163      	str	r3, [r4, #20]
 8005240:	b002      	add	sp, #8
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	ab01      	add	r3, sp, #4
 8005246:	466a      	mov	r2, sp
 8005248:	f7ff ffca 	bl	80051e0 <__swhatbuf_r>
 800524c:	9900      	ldr	r1, [sp, #0]
 800524e:	4605      	mov	r5, r0
 8005250:	4630      	mov	r0, r6
 8005252:	f000 f875 	bl	8005340 <_malloc_r>
 8005256:	b948      	cbnz	r0, 800526c <__smakebuf_r+0x44>
 8005258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800525c:	059a      	lsls	r2, r3, #22
 800525e:	d4ef      	bmi.n	8005240 <__smakebuf_r+0x18>
 8005260:	f023 0303 	bic.w	r3, r3, #3
 8005264:	f043 0302 	orr.w	r3, r3, #2
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	e7e3      	b.n	8005234 <__smakebuf_r+0xc>
 800526c:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <__smakebuf_r+0x7c>)
 800526e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	6020      	str	r0, [r4, #0]
 8005274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005278:	81a3      	strh	r3, [r4, #12]
 800527a:	9b00      	ldr	r3, [sp, #0]
 800527c:	6120      	str	r0, [r4, #16]
 800527e:	6163      	str	r3, [r4, #20]
 8005280:	9b01      	ldr	r3, [sp, #4]
 8005282:	b15b      	cbz	r3, 800529c <__smakebuf_r+0x74>
 8005284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005288:	4630      	mov	r0, r6
 800528a:	f000 f93b 	bl	8005504 <_isatty_r>
 800528e:	b128      	cbz	r0, 800529c <__smakebuf_r+0x74>
 8005290:	89a3      	ldrh	r3, [r4, #12]
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	81a3      	strh	r3, [r4, #12]
 800529c:	89a3      	ldrh	r3, [r4, #12]
 800529e:	431d      	orrs	r5, r3
 80052a0:	81a5      	strh	r5, [r4, #12]
 80052a2:	e7cd      	b.n	8005240 <__smakebuf_r+0x18>
 80052a4:	08005095 	.word	0x08005095

080052a8 <_free_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4605      	mov	r5, r0
 80052ac:	2900      	cmp	r1, #0
 80052ae:	d043      	beq.n	8005338 <_free_r+0x90>
 80052b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052b4:	1f0c      	subs	r4, r1, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bfb8      	it	lt
 80052ba:	18e4      	addlt	r4, r4, r3
 80052bc:	f000 f944 	bl	8005548 <__malloc_lock>
 80052c0:	4a1e      	ldr	r2, [pc, #120]	; (800533c <_free_r+0x94>)
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	4610      	mov	r0, r2
 80052c6:	b933      	cbnz	r3, 80052d6 <_free_r+0x2e>
 80052c8:	6063      	str	r3, [r4, #4]
 80052ca:	6014      	str	r4, [r2, #0]
 80052cc:	4628      	mov	r0, r5
 80052ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052d2:	f000 b93a 	b.w	800554a <__malloc_unlock>
 80052d6:	42a3      	cmp	r3, r4
 80052d8:	d90b      	bls.n	80052f2 <_free_r+0x4a>
 80052da:	6821      	ldr	r1, [r4, #0]
 80052dc:	1862      	adds	r2, r4, r1
 80052de:	4293      	cmp	r3, r2
 80052e0:	bf01      	itttt	eq
 80052e2:	681a      	ldreq	r2, [r3, #0]
 80052e4:	685b      	ldreq	r3, [r3, #4]
 80052e6:	1852      	addeq	r2, r2, r1
 80052e8:	6022      	streq	r2, [r4, #0]
 80052ea:	6063      	str	r3, [r4, #4]
 80052ec:	6004      	str	r4, [r0, #0]
 80052ee:	e7ed      	b.n	80052cc <_free_r+0x24>
 80052f0:	4613      	mov	r3, r2
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	b10a      	cbz	r2, 80052fa <_free_r+0x52>
 80052f6:	42a2      	cmp	r2, r4
 80052f8:	d9fa      	bls.n	80052f0 <_free_r+0x48>
 80052fa:	6819      	ldr	r1, [r3, #0]
 80052fc:	1858      	adds	r0, r3, r1
 80052fe:	42a0      	cmp	r0, r4
 8005300:	d10b      	bne.n	800531a <_free_r+0x72>
 8005302:	6820      	ldr	r0, [r4, #0]
 8005304:	4401      	add	r1, r0
 8005306:	1858      	adds	r0, r3, r1
 8005308:	4282      	cmp	r2, r0
 800530a:	6019      	str	r1, [r3, #0]
 800530c:	d1de      	bne.n	80052cc <_free_r+0x24>
 800530e:	6810      	ldr	r0, [r2, #0]
 8005310:	6852      	ldr	r2, [r2, #4]
 8005312:	4401      	add	r1, r0
 8005314:	6019      	str	r1, [r3, #0]
 8005316:	605a      	str	r2, [r3, #4]
 8005318:	e7d8      	b.n	80052cc <_free_r+0x24>
 800531a:	d902      	bls.n	8005322 <_free_r+0x7a>
 800531c:	230c      	movs	r3, #12
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	e7d4      	b.n	80052cc <_free_r+0x24>
 8005322:	6820      	ldr	r0, [r4, #0]
 8005324:	1821      	adds	r1, r4, r0
 8005326:	428a      	cmp	r2, r1
 8005328:	bf01      	itttt	eq
 800532a:	6811      	ldreq	r1, [r2, #0]
 800532c:	6852      	ldreq	r2, [r2, #4]
 800532e:	1809      	addeq	r1, r1, r0
 8005330:	6021      	streq	r1, [r4, #0]
 8005332:	6062      	str	r2, [r4, #4]
 8005334:	605c      	str	r4, [r3, #4]
 8005336:	e7c9      	b.n	80052cc <_free_r+0x24>
 8005338:	bd38      	pop	{r3, r4, r5, pc}
 800533a:	bf00      	nop
 800533c:	200000ac 	.word	0x200000ac

08005340 <_malloc_r>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	1ccd      	adds	r5, r1, #3
 8005344:	f025 0503 	bic.w	r5, r5, #3
 8005348:	3508      	adds	r5, #8
 800534a:	2d0c      	cmp	r5, #12
 800534c:	bf38      	it	cc
 800534e:	250c      	movcc	r5, #12
 8005350:	2d00      	cmp	r5, #0
 8005352:	4606      	mov	r6, r0
 8005354:	db01      	blt.n	800535a <_malloc_r+0x1a>
 8005356:	42a9      	cmp	r1, r5
 8005358:	d903      	bls.n	8005362 <_malloc_r+0x22>
 800535a:	230c      	movs	r3, #12
 800535c:	6033      	str	r3, [r6, #0]
 800535e:	2000      	movs	r0, #0
 8005360:	bd70      	pop	{r4, r5, r6, pc}
 8005362:	f000 f8f1 	bl	8005548 <__malloc_lock>
 8005366:	4a21      	ldr	r2, [pc, #132]	; (80053ec <_malloc_r+0xac>)
 8005368:	6814      	ldr	r4, [r2, #0]
 800536a:	4621      	mov	r1, r4
 800536c:	b991      	cbnz	r1, 8005394 <_malloc_r+0x54>
 800536e:	4c20      	ldr	r4, [pc, #128]	; (80053f0 <_malloc_r+0xb0>)
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	b91b      	cbnz	r3, 800537c <_malloc_r+0x3c>
 8005374:	4630      	mov	r0, r6
 8005376:	f000 f83d 	bl	80053f4 <_sbrk_r>
 800537a:	6020      	str	r0, [r4, #0]
 800537c:	4629      	mov	r1, r5
 800537e:	4630      	mov	r0, r6
 8005380:	f000 f838 	bl	80053f4 <_sbrk_r>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d124      	bne.n	80053d2 <_malloc_r+0x92>
 8005388:	230c      	movs	r3, #12
 800538a:	4630      	mov	r0, r6
 800538c:	6033      	str	r3, [r6, #0]
 800538e:	f000 f8dc 	bl	800554a <__malloc_unlock>
 8005392:	e7e4      	b.n	800535e <_malloc_r+0x1e>
 8005394:	680b      	ldr	r3, [r1, #0]
 8005396:	1b5b      	subs	r3, r3, r5
 8005398:	d418      	bmi.n	80053cc <_malloc_r+0x8c>
 800539a:	2b0b      	cmp	r3, #11
 800539c:	d90f      	bls.n	80053be <_malloc_r+0x7e>
 800539e:	600b      	str	r3, [r1, #0]
 80053a0:	18cc      	adds	r4, r1, r3
 80053a2:	50cd      	str	r5, [r1, r3]
 80053a4:	4630      	mov	r0, r6
 80053a6:	f000 f8d0 	bl	800554a <__malloc_unlock>
 80053aa:	f104 000b 	add.w	r0, r4, #11
 80053ae:	1d23      	adds	r3, r4, #4
 80053b0:	f020 0007 	bic.w	r0, r0, #7
 80053b4:	1ac3      	subs	r3, r0, r3
 80053b6:	d0d3      	beq.n	8005360 <_malloc_r+0x20>
 80053b8:	425a      	negs	r2, r3
 80053ba:	50e2      	str	r2, [r4, r3]
 80053bc:	e7d0      	b.n	8005360 <_malloc_r+0x20>
 80053be:	684b      	ldr	r3, [r1, #4]
 80053c0:	428c      	cmp	r4, r1
 80053c2:	bf16      	itet	ne
 80053c4:	6063      	strne	r3, [r4, #4]
 80053c6:	6013      	streq	r3, [r2, #0]
 80053c8:	460c      	movne	r4, r1
 80053ca:	e7eb      	b.n	80053a4 <_malloc_r+0x64>
 80053cc:	460c      	mov	r4, r1
 80053ce:	6849      	ldr	r1, [r1, #4]
 80053d0:	e7cc      	b.n	800536c <_malloc_r+0x2c>
 80053d2:	1cc4      	adds	r4, r0, #3
 80053d4:	f024 0403 	bic.w	r4, r4, #3
 80053d8:	42a0      	cmp	r0, r4
 80053da:	d005      	beq.n	80053e8 <_malloc_r+0xa8>
 80053dc:	1a21      	subs	r1, r4, r0
 80053de:	4630      	mov	r0, r6
 80053e0:	f000 f808 	bl	80053f4 <_sbrk_r>
 80053e4:	3001      	adds	r0, #1
 80053e6:	d0cf      	beq.n	8005388 <_malloc_r+0x48>
 80053e8:	6025      	str	r5, [r4, #0]
 80053ea:	e7db      	b.n	80053a4 <_malloc_r+0x64>
 80053ec:	200000ac 	.word	0x200000ac
 80053f0:	200000b0 	.word	0x200000b0

080053f4 <_sbrk_r>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	2300      	movs	r3, #0
 80053f8:	4c05      	ldr	r4, [pc, #20]	; (8005410 <_sbrk_r+0x1c>)
 80053fa:	4605      	mov	r5, r0
 80053fc:	4608      	mov	r0, r1
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	f7fc fb44 	bl	8001a8c <_sbrk>
 8005404:	1c43      	adds	r3, r0, #1
 8005406:	d102      	bne.n	800540e <_sbrk_r+0x1a>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	b103      	cbz	r3, 800540e <_sbrk_r+0x1a>
 800540c:	602b      	str	r3, [r5, #0]
 800540e:	bd38      	pop	{r3, r4, r5, pc}
 8005410:	2000017c 	.word	0x2000017c

08005414 <__sread>:
 8005414:	b510      	push	{r4, lr}
 8005416:	460c      	mov	r4, r1
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	f000 f896 	bl	800554c <_read_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	bfab      	itete	ge
 8005424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005426:	89a3      	ldrhlt	r3, [r4, #12]
 8005428:	181b      	addge	r3, r3, r0
 800542a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800542e:	bfac      	ite	ge
 8005430:	6563      	strge	r3, [r4, #84]	; 0x54
 8005432:	81a3      	strhlt	r3, [r4, #12]
 8005434:	bd10      	pop	{r4, pc}

08005436 <__swrite>:
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	461f      	mov	r7, r3
 800543c:	898b      	ldrh	r3, [r1, #12]
 800543e:	4605      	mov	r5, r0
 8005440:	05db      	lsls	r3, r3, #23
 8005442:	460c      	mov	r4, r1
 8005444:	4616      	mov	r6, r2
 8005446:	d505      	bpl.n	8005454 <__swrite+0x1e>
 8005448:	2302      	movs	r3, #2
 800544a:	2200      	movs	r2, #0
 800544c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005450:	f000 f868 	bl	8005524 <_lseek_r>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	4632      	mov	r2, r6
 8005458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005462:	463b      	mov	r3, r7
 8005464:	4628      	mov	r0, r5
 8005466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800546a:	f000 b817 	b.w	800549c <_write_r>

0800546e <__sseek>:
 800546e:	b510      	push	{r4, lr}
 8005470:	460c      	mov	r4, r1
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 f855 	bl	8005524 <_lseek_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	bf15      	itete	ne
 8005480:	6560      	strne	r0, [r4, #84]	; 0x54
 8005482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800548a:	81a3      	strheq	r3, [r4, #12]
 800548c:	bf18      	it	ne
 800548e:	81a3      	strhne	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__sclose>:
 8005492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005496:	f000 b813 	b.w	80054c0 <_close_r>
	...

0800549c <_write_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4605      	mov	r5, r0
 80054a0:	4608      	mov	r0, r1
 80054a2:	4611      	mov	r1, r2
 80054a4:	2200      	movs	r2, #0
 80054a6:	4c05      	ldr	r4, [pc, #20]	; (80054bc <_write_r+0x20>)
 80054a8:	6022      	str	r2, [r4, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f7fb fd8e 	bl	8000fcc <_write>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_write_r+0x1e>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_write_r+0x1e>
 80054b8:	602b      	str	r3, [r5, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	2000017c 	.word	0x2000017c

080054c0 <_close_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	2300      	movs	r3, #0
 80054c4:	4c05      	ldr	r4, [pc, #20]	; (80054dc <_close_r+0x1c>)
 80054c6:	4605      	mov	r5, r0
 80054c8:	4608      	mov	r0, r1
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	f7fc fb0a 	bl	8001ae4 <_close>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_close_r+0x1a>
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	b103      	cbz	r3, 80054da <_close_r+0x1a>
 80054d8:	602b      	str	r3, [r5, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	2000017c 	.word	0x2000017c

080054e0 <_fstat_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	2300      	movs	r3, #0
 80054e4:	4c06      	ldr	r4, [pc, #24]	; (8005500 <_fstat_r+0x20>)
 80054e6:	4605      	mov	r5, r0
 80054e8:	4608      	mov	r0, r1
 80054ea:	4611      	mov	r1, r2
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	f7fc fb04 	bl	8001afa <_fstat>
 80054f2:	1c43      	adds	r3, r0, #1
 80054f4:	d102      	bne.n	80054fc <_fstat_r+0x1c>
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	b103      	cbz	r3, 80054fc <_fstat_r+0x1c>
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	bd38      	pop	{r3, r4, r5, pc}
 80054fe:	bf00      	nop
 8005500:	2000017c 	.word	0x2000017c

08005504 <_isatty_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	2300      	movs	r3, #0
 8005508:	4c05      	ldr	r4, [pc, #20]	; (8005520 <_isatty_r+0x1c>)
 800550a:	4605      	mov	r5, r0
 800550c:	4608      	mov	r0, r1
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	f7fc fb02 	bl	8001b18 <_isatty>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d102      	bne.n	800551e <_isatty_r+0x1a>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	b103      	cbz	r3, 800551e <_isatty_r+0x1a>
 800551c:	602b      	str	r3, [r5, #0]
 800551e:	bd38      	pop	{r3, r4, r5, pc}
 8005520:	2000017c 	.word	0x2000017c

08005524 <_lseek_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4605      	mov	r5, r0
 8005528:	4608      	mov	r0, r1
 800552a:	4611      	mov	r1, r2
 800552c:	2200      	movs	r2, #0
 800552e:	4c05      	ldr	r4, [pc, #20]	; (8005544 <_lseek_r+0x20>)
 8005530:	6022      	str	r2, [r4, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	f7fc fafa 	bl	8001b2c <_lseek>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d102      	bne.n	8005542 <_lseek_r+0x1e>
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	b103      	cbz	r3, 8005542 <_lseek_r+0x1e>
 8005540:	602b      	str	r3, [r5, #0]
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	2000017c 	.word	0x2000017c

08005548 <__malloc_lock>:
 8005548:	4770      	bx	lr

0800554a <__malloc_unlock>:
 800554a:	4770      	bx	lr

0800554c <_read_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4605      	mov	r5, r0
 8005550:	4608      	mov	r0, r1
 8005552:	4611      	mov	r1, r2
 8005554:	2200      	movs	r2, #0
 8005556:	4c05      	ldr	r4, [pc, #20]	; (800556c <_read_r+0x20>)
 8005558:	6022      	str	r2, [r4, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	f7fc fa78 	bl	8001a50 <_read>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_read_r+0x1e>
 8005564:	6823      	ldr	r3, [r4, #0]
 8005566:	b103      	cbz	r3, 800556a <_read_r+0x1e>
 8005568:	602b      	str	r3, [r5, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	2000017c 	.word	0x2000017c

08005570 <cosf>:
 8005570:	b507      	push	{r0, r1, r2, lr}
 8005572:	4a18      	ldr	r2, [pc, #96]	; (80055d4 <cosf+0x64>)
 8005574:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005578:	4293      	cmp	r3, r2
 800557a:	4601      	mov	r1, r0
 800557c:	dc03      	bgt.n	8005586 <cosf+0x16>
 800557e:	2100      	movs	r1, #0
 8005580:	f000 f9f8 	bl	8005974 <__kernel_cosf>
 8005584:	e004      	b.n	8005590 <cosf+0x20>
 8005586:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800558a:	db04      	blt.n	8005596 <cosf+0x26>
 800558c:	f7fb fa02 	bl	8000994 <__aeabi_fsub>
 8005590:	b003      	add	sp, #12
 8005592:	f85d fb04 	ldr.w	pc, [sp], #4
 8005596:	4669      	mov	r1, sp
 8005598:	f000 f894 	bl	80056c4 <__ieee754_rem_pio2f>
 800559c:	f000 0203 	and.w	r2, r0, #3
 80055a0:	2a01      	cmp	r2, #1
 80055a2:	d005      	beq.n	80055b0 <cosf+0x40>
 80055a4:	2a02      	cmp	r2, #2
 80055a6:	d00a      	beq.n	80055be <cosf+0x4e>
 80055a8:	b972      	cbnz	r2, 80055c8 <cosf+0x58>
 80055aa:	9901      	ldr	r1, [sp, #4]
 80055ac:	9800      	ldr	r0, [sp, #0]
 80055ae:	e7e7      	b.n	8005580 <cosf+0x10>
 80055b0:	9901      	ldr	r1, [sp, #4]
 80055b2:	9800      	ldr	r0, [sp, #0]
 80055b4:	f000 fcfc 	bl	8005fb0 <__kernel_sinf>
 80055b8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80055bc:	e7e8      	b.n	8005590 <cosf+0x20>
 80055be:	9901      	ldr	r1, [sp, #4]
 80055c0:	9800      	ldr	r0, [sp, #0]
 80055c2:	f000 f9d7 	bl	8005974 <__kernel_cosf>
 80055c6:	e7f7      	b.n	80055b8 <cosf+0x48>
 80055c8:	2201      	movs	r2, #1
 80055ca:	9901      	ldr	r1, [sp, #4]
 80055cc:	9800      	ldr	r0, [sp, #0]
 80055ce:	f000 fcef 	bl	8005fb0 <__kernel_sinf>
 80055d2:	e7dd      	b.n	8005590 <cosf+0x20>
 80055d4:	3f490fd8 	.word	0x3f490fd8

080055d8 <floorf>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80055de:	0df5      	lsrs	r5, r6, #23
 80055e0:	3d7f      	subs	r5, #127	; 0x7f
 80055e2:	2d16      	cmp	r5, #22
 80055e4:	4601      	mov	r1, r0
 80055e6:	4604      	mov	r4, r0
 80055e8:	dc26      	bgt.n	8005638 <floorf+0x60>
 80055ea:	2d00      	cmp	r5, #0
 80055ec:	da0e      	bge.n	800560c <floorf+0x34>
 80055ee:	4917      	ldr	r1, [pc, #92]	; (800564c <floorf+0x74>)
 80055f0:	f7fb f9d2 	bl	8000998 <__addsf3>
 80055f4:	2100      	movs	r1, #0
 80055f6:	f7fb fc93 	bl	8000f20 <__aeabi_fcmpgt>
 80055fa:	b128      	cbz	r0, 8005608 <floorf+0x30>
 80055fc:	2c00      	cmp	r4, #0
 80055fe:	da23      	bge.n	8005648 <floorf+0x70>
 8005600:	4b13      	ldr	r3, [pc, #76]	; (8005650 <floorf+0x78>)
 8005602:	2e00      	cmp	r6, #0
 8005604:	bf18      	it	ne
 8005606:	461c      	movne	r4, r3
 8005608:	4621      	mov	r1, r4
 800560a:	e01b      	b.n	8005644 <floorf+0x6c>
 800560c:	4e11      	ldr	r6, [pc, #68]	; (8005654 <floorf+0x7c>)
 800560e:	412e      	asrs	r6, r5
 8005610:	4230      	tst	r0, r6
 8005612:	d017      	beq.n	8005644 <floorf+0x6c>
 8005614:	490d      	ldr	r1, [pc, #52]	; (800564c <floorf+0x74>)
 8005616:	f7fb f9bf 	bl	8000998 <__addsf3>
 800561a:	2100      	movs	r1, #0
 800561c:	f7fb fc80 	bl	8000f20 <__aeabi_fcmpgt>
 8005620:	2800      	cmp	r0, #0
 8005622:	d0f1      	beq.n	8005608 <floorf+0x30>
 8005624:	2c00      	cmp	r4, #0
 8005626:	bfbe      	ittt	lt
 8005628:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800562c:	fa43 f505 	asrlt.w	r5, r3, r5
 8005630:	1964      	addlt	r4, r4, r5
 8005632:	ea24 0406 	bic.w	r4, r4, r6
 8005636:	e7e7      	b.n	8005608 <floorf+0x30>
 8005638:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800563c:	d302      	bcc.n	8005644 <floorf+0x6c>
 800563e:	f7fb f9ab 	bl	8000998 <__addsf3>
 8005642:	4601      	mov	r1, r0
 8005644:	4608      	mov	r0, r1
 8005646:	bd70      	pop	{r4, r5, r6, pc}
 8005648:	2400      	movs	r4, #0
 800564a:	e7dd      	b.n	8005608 <floorf+0x30>
 800564c:	7149f2ca 	.word	0x7149f2ca
 8005650:	bf800000 	.word	0xbf800000
 8005654:	007fffff 	.word	0x007fffff

08005658 <sinf>:
 8005658:	b507      	push	{r0, r1, r2, lr}
 800565a:	4a19      	ldr	r2, [pc, #100]	; (80056c0 <sinf+0x68>)
 800565c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005660:	4293      	cmp	r3, r2
 8005662:	4601      	mov	r1, r0
 8005664:	dc04      	bgt.n	8005670 <sinf+0x18>
 8005666:	2200      	movs	r2, #0
 8005668:	2100      	movs	r1, #0
 800566a:	f000 fca1 	bl	8005fb0 <__kernel_sinf>
 800566e:	e004      	b.n	800567a <sinf+0x22>
 8005670:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005674:	db04      	blt.n	8005680 <sinf+0x28>
 8005676:	f7fb f98d 	bl	8000994 <__aeabi_fsub>
 800567a:	b003      	add	sp, #12
 800567c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005680:	4669      	mov	r1, sp
 8005682:	f000 f81f 	bl	80056c4 <__ieee754_rem_pio2f>
 8005686:	f000 0003 	and.w	r0, r0, #3
 800568a:	2801      	cmp	r0, #1
 800568c:	d006      	beq.n	800569c <sinf+0x44>
 800568e:	2802      	cmp	r0, #2
 8005690:	d009      	beq.n	80056a6 <sinf+0x4e>
 8005692:	b980      	cbnz	r0, 80056b6 <sinf+0x5e>
 8005694:	2201      	movs	r2, #1
 8005696:	9901      	ldr	r1, [sp, #4]
 8005698:	9800      	ldr	r0, [sp, #0]
 800569a:	e7e6      	b.n	800566a <sinf+0x12>
 800569c:	9901      	ldr	r1, [sp, #4]
 800569e:	9800      	ldr	r0, [sp, #0]
 80056a0:	f000 f968 	bl	8005974 <__kernel_cosf>
 80056a4:	e7e9      	b.n	800567a <sinf+0x22>
 80056a6:	2201      	movs	r2, #1
 80056a8:	9901      	ldr	r1, [sp, #4]
 80056aa:	9800      	ldr	r0, [sp, #0]
 80056ac:	f000 fc80 	bl	8005fb0 <__kernel_sinf>
 80056b0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80056b4:	e7e1      	b.n	800567a <sinf+0x22>
 80056b6:	9901      	ldr	r1, [sp, #4]
 80056b8:	9800      	ldr	r0, [sp, #0]
 80056ba:	f000 f95b 	bl	8005974 <__kernel_cosf>
 80056be:	e7f7      	b.n	80056b0 <sinf+0x58>
 80056c0:	3f490fd8 	.word	0x3f490fd8

080056c4 <__ieee754_rem_pio2f>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	4a9d      	ldr	r2, [pc, #628]	; (8005940 <__ieee754_rem_pio2f+0x27c>)
 80056ca:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80056ce:	4295      	cmp	r5, r2
 80056d0:	b087      	sub	sp, #28
 80056d2:	460c      	mov	r4, r1
 80056d4:	4607      	mov	r7, r0
 80056d6:	dc04      	bgt.n	80056e2 <__ieee754_rem_pio2f+0x1e>
 80056d8:	2300      	movs	r3, #0
 80056da:	6020      	str	r0, [r4, #0]
 80056dc:	604b      	str	r3, [r1, #4]
 80056de:	2600      	movs	r6, #0
 80056e0:	e01a      	b.n	8005718 <__ieee754_rem_pio2f+0x54>
 80056e2:	4a98      	ldr	r2, [pc, #608]	; (8005944 <__ieee754_rem_pio2f+0x280>)
 80056e4:	4295      	cmp	r5, r2
 80056e6:	dc4b      	bgt.n	8005780 <__ieee754_rem_pio2f+0xbc>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	f025 050f 	bic.w	r5, r5, #15
 80056ee:	4996      	ldr	r1, [pc, #600]	; (8005948 <__ieee754_rem_pio2f+0x284>)
 80056f0:	4e96      	ldr	r6, [pc, #600]	; (800594c <__ieee754_rem_pio2f+0x288>)
 80056f2:	dd23      	ble.n	800573c <__ieee754_rem_pio2f+0x78>
 80056f4:	f7fb f94e 	bl	8000994 <__aeabi_fsub>
 80056f8:	42b5      	cmp	r5, r6
 80056fa:	4607      	mov	r7, r0
 80056fc:	d010      	beq.n	8005720 <__ieee754_rem_pio2f+0x5c>
 80056fe:	4994      	ldr	r1, [pc, #592]	; (8005950 <__ieee754_rem_pio2f+0x28c>)
 8005700:	f7fb f948 	bl	8000994 <__aeabi_fsub>
 8005704:	4601      	mov	r1, r0
 8005706:	6020      	str	r0, [r4, #0]
 8005708:	4638      	mov	r0, r7
 800570a:	f7fb f943 	bl	8000994 <__aeabi_fsub>
 800570e:	4990      	ldr	r1, [pc, #576]	; (8005950 <__ieee754_rem_pio2f+0x28c>)
 8005710:	f7fb f940 	bl	8000994 <__aeabi_fsub>
 8005714:	2601      	movs	r6, #1
 8005716:	6060      	str	r0, [r4, #4]
 8005718:	4630      	mov	r0, r6
 800571a:	b007      	add	sp, #28
 800571c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005720:	498c      	ldr	r1, [pc, #560]	; (8005954 <__ieee754_rem_pio2f+0x290>)
 8005722:	f7fb f937 	bl	8000994 <__aeabi_fsub>
 8005726:	498c      	ldr	r1, [pc, #560]	; (8005958 <__ieee754_rem_pio2f+0x294>)
 8005728:	4605      	mov	r5, r0
 800572a:	f7fb f933 	bl	8000994 <__aeabi_fsub>
 800572e:	4601      	mov	r1, r0
 8005730:	6020      	str	r0, [r4, #0]
 8005732:	4628      	mov	r0, r5
 8005734:	f7fb f92e 	bl	8000994 <__aeabi_fsub>
 8005738:	4987      	ldr	r1, [pc, #540]	; (8005958 <__ieee754_rem_pio2f+0x294>)
 800573a:	e7e9      	b.n	8005710 <__ieee754_rem_pio2f+0x4c>
 800573c:	f7fb f92c 	bl	8000998 <__addsf3>
 8005740:	42b5      	cmp	r5, r6
 8005742:	4607      	mov	r7, r0
 8005744:	d00e      	beq.n	8005764 <__ieee754_rem_pio2f+0xa0>
 8005746:	4982      	ldr	r1, [pc, #520]	; (8005950 <__ieee754_rem_pio2f+0x28c>)
 8005748:	f7fb f926 	bl	8000998 <__addsf3>
 800574c:	4601      	mov	r1, r0
 800574e:	6020      	str	r0, [r4, #0]
 8005750:	4638      	mov	r0, r7
 8005752:	f7fb f91f 	bl	8000994 <__aeabi_fsub>
 8005756:	497e      	ldr	r1, [pc, #504]	; (8005950 <__ieee754_rem_pio2f+0x28c>)
 8005758:	f7fb f91e 	bl	8000998 <__addsf3>
 800575c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005760:	6060      	str	r0, [r4, #4]
 8005762:	e7d9      	b.n	8005718 <__ieee754_rem_pio2f+0x54>
 8005764:	497b      	ldr	r1, [pc, #492]	; (8005954 <__ieee754_rem_pio2f+0x290>)
 8005766:	f7fb f917 	bl	8000998 <__addsf3>
 800576a:	497b      	ldr	r1, [pc, #492]	; (8005958 <__ieee754_rem_pio2f+0x294>)
 800576c:	4605      	mov	r5, r0
 800576e:	f7fb f913 	bl	8000998 <__addsf3>
 8005772:	4601      	mov	r1, r0
 8005774:	6020      	str	r0, [r4, #0]
 8005776:	4628      	mov	r0, r5
 8005778:	f7fb f90c 	bl	8000994 <__aeabi_fsub>
 800577c:	4976      	ldr	r1, [pc, #472]	; (8005958 <__ieee754_rem_pio2f+0x294>)
 800577e:	e7eb      	b.n	8005758 <__ieee754_rem_pio2f+0x94>
 8005780:	4a76      	ldr	r2, [pc, #472]	; (800595c <__ieee754_rem_pio2f+0x298>)
 8005782:	4295      	cmp	r5, r2
 8005784:	f300 808c 	bgt.w	80058a0 <__ieee754_rem_pio2f+0x1dc>
 8005788:	f000 fc88 	bl	800609c <fabsf>
 800578c:	4974      	ldr	r1, [pc, #464]	; (8005960 <__ieee754_rem_pio2f+0x29c>)
 800578e:	4680      	mov	r8, r0
 8005790:	f7fb fa0a 	bl	8000ba8 <__aeabi_fmul>
 8005794:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005798:	f7fb f8fe 	bl	8000998 <__addsf3>
 800579c:	f7fb fbca 	bl	8000f34 <__aeabi_f2iz>
 80057a0:	4606      	mov	r6, r0
 80057a2:	f7fb f9ad 	bl	8000b00 <__aeabi_i2f>
 80057a6:	4968      	ldr	r1, [pc, #416]	; (8005948 <__ieee754_rem_pio2f+0x284>)
 80057a8:	4682      	mov	sl, r0
 80057aa:	f7fb f9fd 	bl	8000ba8 <__aeabi_fmul>
 80057ae:	4601      	mov	r1, r0
 80057b0:	4640      	mov	r0, r8
 80057b2:	f7fb f8ef 	bl	8000994 <__aeabi_fsub>
 80057b6:	4966      	ldr	r1, [pc, #408]	; (8005950 <__ieee754_rem_pio2f+0x28c>)
 80057b8:	4680      	mov	r8, r0
 80057ba:	4650      	mov	r0, sl
 80057bc:	f7fb f9f4 	bl	8000ba8 <__aeabi_fmul>
 80057c0:	2e1f      	cmp	r6, #31
 80057c2:	4681      	mov	r9, r0
 80057c4:	dc0c      	bgt.n	80057e0 <__ieee754_rem_pio2f+0x11c>
 80057c6:	4a67      	ldr	r2, [pc, #412]	; (8005964 <__ieee754_rem_pio2f+0x2a0>)
 80057c8:	1e71      	subs	r1, r6, #1
 80057ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80057ce:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d004      	beq.n	80057e0 <__ieee754_rem_pio2f+0x11c>
 80057d6:	4649      	mov	r1, r9
 80057d8:	4640      	mov	r0, r8
 80057da:	f7fb f8db 	bl	8000994 <__aeabi_fsub>
 80057de:	e009      	b.n	80057f4 <__ieee754_rem_pio2f+0x130>
 80057e0:	4649      	mov	r1, r9
 80057e2:	4640      	mov	r0, r8
 80057e4:	f7fb f8d6 	bl	8000994 <__aeabi_fsub>
 80057e8:	15ed      	asrs	r5, r5, #23
 80057ea:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80057ee:	1aeb      	subs	r3, r5, r3
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	dc01      	bgt.n	80057f8 <__ieee754_rem_pio2f+0x134>
 80057f4:	6020      	str	r0, [r4, #0]
 80057f6:	e024      	b.n	8005842 <__ieee754_rem_pio2f+0x17e>
 80057f8:	4956      	ldr	r1, [pc, #344]	; (8005954 <__ieee754_rem_pio2f+0x290>)
 80057fa:	4650      	mov	r0, sl
 80057fc:	f7fb f9d4 	bl	8000ba8 <__aeabi_fmul>
 8005800:	4681      	mov	r9, r0
 8005802:	4601      	mov	r1, r0
 8005804:	4640      	mov	r0, r8
 8005806:	f7fb f8c5 	bl	8000994 <__aeabi_fsub>
 800580a:	4601      	mov	r1, r0
 800580c:	4683      	mov	fp, r0
 800580e:	4640      	mov	r0, r8
 8005810:	f7fb f8c0 	bl	8000994 <__aeabi_fsub>
 8005814:	4649      	mov	r1, r9
 8005816:	f7fb f8bd 	bl	8000994 <__aeabi_fsub>
 800581a:	4680      	mov	r8, r0
 800581c:	494e      	ldr	r1, [pc, #312]	; (8005958 <__ieee754_rem_pio2f+0x294>)
 800581e:	4650      	mov	r0, sl
 8005820:	f7fb f9c2 	bl	8000ba8 <__aeabi_fmul>
 8005824:	4641      	mov	r1, r8
 8005826:	f7fb f8b5 	bl	8000994 <__aeabi_fsub>
 800582a:	4601      	mov	r1, r0
 800582c:	4681      	mov	r9, r0
 800582e:	4658      	mov	r0, fp
 8005830:	f7fb f8b0 	bl	8000994 <__aeabi_fsub>
 8005834:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005838:	1aed      	subs	r5, r5, r3
 800583a:	2d19      	cmp	r5, #25
 800583c:	dc15      	bgt.n	800586a <__ieee754_rem_pio2f+0x1a6>
 800583e:	46d8      	mov	r8, fp
 8005840:	6020      	str	r0, [r4, #0]
 8005842:	6825      	ldr	r5, [r4, #0]
 8005844:	4640      	mov	r0, r8
 8005846:	4629      	mov	r1, r5
 8005848:	f7fb f8a4 	bl	8000994 <__aeabi_fsub>
 800584c:	4649      	mov	r1, r9
 800584e:	f7fb f8a1 	bl	8000994 <__aeabi_fsub>
 8005852:	2f00      	cmp	r7, #0
 8005854:	6060      	str	r0, [r4, #4]
 8005856:	f6bf af5f 	bge.w	8005718 <__ieee754_rem_pio2f+0x54>
 800585a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800585e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005862:	6025      	str	r5, [r4, #0]
 8005864:	6060      	str	r0, [r4, #4]
 8005866:	4276      	negs	r6, r6
 8005868:	e756      	b.n	8005718 <__ieee754_rem_pio2f+0x54>
 800586a:	493f      	ldr	r1, [pc, #252]	; (8005968 <__ieee754_rem_pio2f+0x2a4>)
 800586c:	4650      	mov	r0, sl
 800586e:	f7fb f99b 	bl	8000ba8 <__aeabi_fmul>
 8005872:	4605      	mov	r5, r0
 8005874:	4601      	mov	r1, r0
 8005876:	4658      	mov	r0, fp
 8005878:	f7fb f88c 	bl	8000994 <__aeabi_fsub>
 800587c:	4601      	mov	r1, r0
 800587e:	4680      	mov	r8, r0
 8005880:	4658      	mov	r0, fp
 8005882:	f7fb f887 	bl	8000994 <__aeabi_fsub>
 8005886:	4629      	mov	r1, r5
 8005888:	f7fb f884 	bl	8000994 <__aeabi_fsub>
 800588c:	4605      	mov	r5, r0
 800588e:	4937      	ldr	r1, [pc, #220]	; (800596c <__ieee754_rem_pio2f+0x2a8>)
 8005890:	4650      	mov	r0, sl
 8005892:	f7fb f989 	bl	8000ba8 <__aeabi_fmul>
 8005896:	4629      	mov	r1, r5
 8005898:	f7fb f87c 	bl	8000994 <__aeabi_fsub>
 800589c:	4681      	mov	r9, r0
 800589e:	e79a      	b.n	80057d6 <__ieee754_rem_pio2f+0x112>
 80058a0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80058a4:	db05      	blt.n	80058b2 <__ieee754_rem_pio2f+0x1ee>
 80058a6:	4601      	mov	r1, r0
 80058a8:	f7fb f874 	bl	8000994 <__aeabi_fsub>
 80058ac:	6060      	str	r0, [r4, #4]
 80058ae:	6020      	str	r0, [r4, #0]
 80058b0:	e715      	b.n	80056de <__ieee754_rem_pio2f+0x1a>
 80058b2:	15ee      	asrs	r6, r5, #23
 80058b4:	3e86      	subs	r6, #134	; 0x86
 80058b6:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 80058ba:	4628      	mov	r0, r5
 80058bc:	f7fb fb3a 	bl	8000f34 <__aeabi_f2iz>
 80058c0:	f7fb f91e 	bl	8000b00 <__aeabi_i2f>
 80058c4:	4601      	mov	r1, r0
 80058c6:	9003      	str	r0, [sp, #12]
 80058c8:	4628      	mov	r0, r5
 80058ca:	f7fb f863 	bl	8000994 <__aeabi_fsub>
 80058ce:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80058d2:	f7fb f969 	bl	8000ba8 <__aeabi_fmul>
 80058d6:	4680      	mov	r8, r0
 80058d8:	f7fb fb2c 	bl	8000f34 <__aeabi_f2iz>
 80058dc:	f7fb f910 	bl	8000b00 <__aeabi_i2f>
 80058e0:	4601      	mov	r1, r0
 80058e2:	9004      	str	r0, [sp, #16]
 80058e4:	4605      	mov	r5, r0
 80058e6:	4640      	mov	r0, r8
 80058e8:	f7fb f854 	bl	8000994 <__aeabi_fsub>
 80058ec:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80058f0:	f7fb f95a 	bl	8000ba8 <__aeabi_fmul>
 80058f4:	2100      	movs	r1, #0
 80058f6:	9005      	str	r0, [sp, #20]
 80058f8:	f7fb faea 	bl	8000ed0 <__aeabi_fcmpeq>
 80058fc:	b1e8      	cbz	r0, 800593a <__ieee754_rem_pio2f+0x276>
 80058fe:	2100      	movs	r1, #0
 8005900:	4628      	mov	r0, r5
 8005902:	f7fb fae5 	bl	8000ed0 <__aeabi_fcmpeq>
 8005906:	2800      	cmp	r0, #0
 8005908:	bf14      	ite	ne
 800590a:	2301      	movne	r3, #1
 800590c:	2302      	moveq	r3, #2
 800590e:	4a18      	ldr	r2, [pc, #96]	; (8005970 <__ieee754_rem_pio2f+0x2ac>)
 8005910:	4621      	mov	r1, r4
 8005912:	9201      	str	r2, [sp, #4]
 8005914:	2202      	movs	r2, #2
 8005916:	a803      	add	r0, sp, #12
 8005918:	9200      	str	r2, [sp, #0]
 800591a:	4632      	mov	r2, r6
 800591c:	f000 f8aa 	bl	8005a74 <__kernel_rem_pio2f>
 8005920:	2f00      	cmp	r7, #0
 8005922:	4606      	mov	r6, r0
 8005924:	f6bf aef8 	bge.w	8005718 <__ieee754_rem_pio2f+0x54>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	6863      	ldr	r3, [r4, #4]
 8005932:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005936:	6063      	str	r3, [r4, #4]
 8005938:	e795      	b.n	8005866 <__ieee754_rem_pio2f+0x1a2>
 800593a:	2303      	movs	r3, #3
 800593c:	e7e7      	b.n	800590e <__ieee754_rem_pio2f+0x24a>
 800593e:	bf00      	nop
 8005940:	3f490fd8 	.word	0x3f490fd8
 8005944:	4016cbe3 	.word	0x4016cbe3
 8005948:	3fc90f80 	.word	0x3fc90f80
 800594c:	3fc90fd0 	.word	0x3fc90fd0
 8005950:	37354443 	.word	0x37354443
 8005954:	37354400 	.word	0x37354400
 8005958:	2e85a308 	.word	0x2e85a308
 800595c:	43490f80 	.word	0x43490f80
 8005960:	3f22f984 	.word	0x3f22f984
 8005964:	08006210 	.word	0x08006210
 8005968:	2e85a300 	.word	0x2e85a300
 800596c:	248d3132 	.word	0x248d3132
 8005970:	08006290 	.word	0x08006290

08005974 <__kernel_cosf>:
 8005974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005978:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800597c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8005980:	4606      	mov	r6, r0
 8005982:	4688      	mov	r8, r1
 8005984:	da03      	bge.n	800598e <__kernel_cosf+0x1a>
 8005986:	f7fb fad5 	bl	8000f34 <__aeabi_f2iz>
 800598a:	2800      	cmp	r0, #0
 800598c:	d05c      	beq.n	8005a48 <__kernel_cosf+0xd4>
 800598e:	4631      	mov	r1, r6
 8005990:	4630      	mov	r0, r6
 8005992:	f7fb f909 	bl	8000ba8 <__aeabi_fmul>
 8005996:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800599a:	4605      	mov	r5, r0
 800599c:	f7fb f904 	bl	8000ba8 <__aeabi_fmul>
 80059a0:	492b      	ldr	r1, [pc, #172]	; (8005a50 <__kernel_cosf+0xdc>)
 80059a2:	4607      	mov	r7, r0
 80059a4:	4628      	mov	r0, r5
 80059a6:	f7fb f8ff 	bl	8000ba8 <__aeabi_fmul>
 80059aa:	492a      	ldr	r1, [pc, #168]	; (8005a54 <__kernel_cosf+0xe0>)
 80059ac:	f7fa fff4 	bl	8000998 <__addsf3>
 80059b0:	4629      	mov	r1, r5
 80059b2:	f7fb f8f9 	bl	8000ba8 <__aeabi_fmul>
 80059b6:	4928      	ldr	r1, [pc, #160]	; (8005a58 <__kernel_cosf+0xe4>)
 80059b8:	f7fa ffec 	bl	8000994 <__aeabi_fsub>
 80059bc:	4629      	mov	r1, r5
 80059be:	f7fb f8f3 	bl	8000ba8 <__aeabi_fmul>
 80059c2:	4926      	ldr	r1, [pc, #152]	; (8005a5c <__kernel_cosf+0xe8>)
 80059c4:	f7fa ffe8 	bl	8000998 <__addsf3>
 80059c8:	4629      	mov	r1, r5
 80059ca:	f7fb f8ed 	bl	8000ba8 <__aeabi_fmul>
 80059ce:	4924      	ldr	r1, [pc, #144]	; (8005a60 <__kernel_cosf+0xec>)
 80059d0:	f7fa ffe0 	bl	8000994 <__aeabi_fsub>
 80059d4:	4629      	mov	r1, r5
 80059d6:	f7fb f8e7 	bl	8000ba8 <__aeabi_fmul>
 80059da:	4922      	ldr	r1, [pc, #136]	; (8005a64 <__kernel_cosf+0xf0>)
 80059dc:	f7fa ffdc 	bl	8000998 <__addsf3>
 80059e0:	4629      	mov	r1, r5
 80059e2:	f7fb f8e1 	bl	8000ba8 <__aeabi_fmul>
 80059e6:	4629      	mov	r1, r5
 80059e8:	f7fb f8de 	bl	8000ba8 <__aeabi_fmul>
 80059ec:	4641      	mov	r1, r8
 80059ee:	4605      	mov	r5, r0
 80059f0:	4630      	mov	r0, r6
 80059f2:	f7fb f8d9 	bl	8000ba8 <__aeabi_fmul>
 80059f6:	4601      	mov	r1, r0
 80059f8:	4628      	mov	r0, r5
 80059fa:	f7fa ffcb 	bl	8000994 <__aeabi_fsub>
 80059fe:	4b1a      	ldr	r3, [pc, #104]	; (8005a68 <__kernel_cosf+0xf4>)
 8005a00:	4605      	mov	r5, r0
 8005a02:	429c      	cmp	r4, r3
 8005a04:	dc0a      	bgt.n	8005a1c <__kernel_cosf+0xa8>
 8005a06:	4601      	mov	r1, r0
 8005a08:	4638      	mov	r0, r7
 8005a0a:	f7fa ffc3 	bl	8000994 <__aeabi_fsub>
 8005a0e:	4601      	mov	r1, r0
 8005a10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a14:	f7fa ffbe 	bl	8000994 <__aeabi_fsub>
 8005a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a1c:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <__kernel_cosf+0xf8>)
 8005a1e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a22:	429c      	cmp	r4, r3
 8005a24:	bfcc      	ite	gt
 8005a26:	4c12      	ldrgt	r4, [pc, #72]	; (8005a70 <__kernel_cosf+0xfc>)
 8005a28:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	f7fa ffb1 	bl	8000994 <__aeabi_fsub>
 8005a32:	4621      	mov	r1, r4
 8005a34:	4606      	mov	r6, r0
 8005a36:	4638      	mov	r0, r7
 8005a38:	f7fa ffac 	bl	8000994 <__aeabi_fsub>
 8005a3c:	4629      	mov	r1, r5
 8005a3e:	f7fa ffa9 	bl	8000994 <__aeabi_fsub>
 8005a42:	4601      	mov	r1, r0
 8005a44:	4630      	mov	r0, r6
 8005a46:	e7e5      	b.n	8005a14 <__kernel_cosf+0xa0>
 8005a48:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a4c:	e7e4      	b.n	8005a18 <__kernel_cosf+0xa4>
 8005a4e:	bf00      	nop
 8005a50:	ad47d74e 	.word	0xad47d74e
 8005a54:	310f74f6 	.word	0x310f74f6
 8005a58:	3493f27c 	.word	0x3493f27c
 8005a5c:	37d00d01 	.word	0x37d00d01
 8005a60:	3ab60b61 	.word	0x3ab60b61
 8005a64:	3d2aaaab 	.word	0x3d2aaaab
 8005a68:	3e999999 	.word	0x3e999999
 8005a6c:	3f480000 	.word	0x3f480000
 8005a70:	3e900000 	.word	0x3e900000

08005a74 <__kernel_rem_pio2f>:
 8005a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a78:	b0d9      	sub	sp, #356	; 0x164
 8005a7a:	9304      	str	r3, [sp, #16]
 8005a7c:	9101      	str	r1, [sp, #4]
 8005a7e:	4bc3      	ldr	r3, [pc, #780]	; (8005d8c <__kernel_rem_pio2f+0x318>)
 8005a80:	9962      	ldr	r1, [sp, #392]	; 0x188
 8005a82:	1ed4      	subs	r4, r2, #3
 8005a84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a88:	2500      	movs	r5, #0
 8005a8a:	9302      	str	r3, [sp, #8]
 8005a8c:	9b04      	ldr	r3, [sp, #16]
 8005a8e:	f04f 0a00 	mov.w	sl, #0
 8005a92:	3b01      	subs	r3, #1
 8005a94:	9303      	str	r3, [sp, #12]
 8005a96:	2308      	movs	r3, #8
 8005a98:	fb94 f4f3 	sdiv	r4, r4, r3
 8005a9c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005aa0:	1c66      	adds	r6, r4, #1
 8005aa2:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8005aa6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005aaa:	eb03 0802 	add.w	r8, r3, r2
 8005aae:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8005ab0:	1aa7      	subs	r7, r4, r2
 8005ab2:	9005      	str	r0, [sp, #20]
 8005ab4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005ab8:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8005abc:	4545      	cmp	r5, r8
 8005abe:	dd7f      	ble.n	8005bc0 <__kernel_rem_pio2f+0x14c>
 8005ac0:	f04f 0800 	mov.w	r8, #0
 8005ac4:	f04f 0a00 	mov.w	sl, #0
 8005ac8:	f06f 0b03 	mvn.w	fp, #3
 8005acc:	9b04      	ldr	r3, [sp, #16]
 8005ace:	aa1c      	add	r2, sp, #112	; 0x70
 8005ad0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005ad4:	ab44      	add	r3, sp, #272	; 0x110
 8005ad6:	9a02      	ldr	r2, [sp, #8]
 8005ad8:	4590      	cmp	r8, r2
 8005ada:	f340 8097 	ble.w	8005c0c <__kernel_rem_pio2f+0x198>
 8005ade:	4613      	mov	r3, r2
 8005ae0:	aa08      	add	r2, sp, #32
 8005ae2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005ae6:	9307      	str	r3, [sp, #28]
 8005ae8:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8005aea:	9f02      	ldr	r7, [sp, #8]
 8005aec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005af0:	9306      	str	r3, [sp, #24]
 8005af2:	46ba      	mov	sl, r7
 8005af4:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8005af8:	ab58      	add	r3, sp, #352	; 0x160
 8005afa:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8005afe:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8005b02:	ad07      	add	r5, sp, #28
 8005b04:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8005b08:	f1ba 0f00 	cmp.w	sl, #0
 8005b0c:	f300 8081 	bgt.w	8005c12 <__kernel_rem_pio2f+0x19e>
 8005b10:	4631      	mov	r1, r6
 8005b12:	4620      	mov	r0, r4
 8005b14:	f000 fac6 	bl	80060a4 <scalbnf>
 8005b18:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	f7fb f843 	bl	8000ba8 <__aeabi_fmul>
 8005b22:	f7ff fd59 	bl	80055d8 <floorf>
 8005b26:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8005b2a:	f7fb f83d 	bl	8000ba8 <__aeabi_fmul>
 8005b2e:	4601      	mov	r1, r0
 8005b30:	4620      	mov	r0, r4
 8005b32:	f7fa ff2f 	bl	8000994 <__aeabi_fsub>
 8005b36:	4604      	mov	r4, r0
 8005b38:	f7fb f9fc 	bl	8000f34 <__aeabi_f2iz>
 8005b3c:	4681      	mov	r9, r0
 8005b3e:	f7fa ffdf 	bl	8000b00 <__aeabi_i2f>
 8005b42:	4601      	mov	r1, r0
 8005b44:	4620      	mov	r0, r4
 8005b46:	f7fa ff25 	bl	8000994 <__aeabi_fsub>
 8005b4a:	2e00      	cmp	r6, #0
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	dd7e      	ble.n	8005c4e <__kernel_rem_pio2f+0x1da>
 8005b50:	1e7b      	subs	r3, r7, #1
 8005b52:	aa08      	add	r2, sp, #32
 8005b54:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8005b58:	f1c6 0208 	rsb	r2, r6, #8
 8005b5c:	fa45 f002 	asr.w	r0, r5, r2
 8005b60:	4481      	add	r9, r0
 8005b62:	4090      	lsls	r0, r2
 8005b64:	1a2d      	subs	r5, r5, r0
 8005b66:	aa08      	add	r2, sp, #32
 8005b68:	f1c6 0007 	rsb	r0, r6, #7
 8005b6c:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8005b70:	4105      	asrs	r5, r0
 8005b72:	2d00      	cmp	r5, #0
 8005b74:	dd79      	ble.n	8005c6a <__kernel_rem_pio2f+0x1f6>
 8005b76:	2200      	movs	r2, #0
 8005b78:	4690      	mov	r8, r2
 8005b7a:	f109 0901 	add.w	r9, r9, #1
 8005b7e:	4297      	cmp	r7, r2
 8005b80:	f300 80ae 	bgt.w	8005ce0 <__kernel_rem_pio2f+0x26c>
 8005b84:	2e00      	cmp	r6, #0
 8005b86:	dd05      	ble.n	8005b94 <__kernel_rem_pio2f+0x120>
 8005b88:	2e01      	cmp	r6, #1
 8005b8a:	f000 80c0 	beq.w	8005d0e <__kernel_rem_pio2f+0x29a>
 8005b8e:	2e02      	cmp	r6, #2
 8005b90:	f000 80c7 	beq.w	8005d22 <__kernel_rem_pio2f+0x2ae>
 8005b94:	2d02      	cmp	r5, #2
 8005b96:	d168      	bne.n	8005c6a <__kernel_rem_pio2f+0x1f6>
 8005b98:	4621      	mov	r1, r4
 8005b9a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005b9e:	f7fa fef9 	bl	8000994 <__aeabi_fsub>
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	f1b8 0f00 	cmp.w	r8, #0
 8005ba8:	d05f      	beq.n	8005c6a <__kernel_rem_pio2f+0x1f6>
 8005baa:	4631      	mov	r1, r6
 8005bac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005bb0:	f000 fa78 	bl	80060a4 <scalbnf>
 8005bb4:	4601      	mov	r1, r0
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f7fa feec 	bl	8000994 <__aeabi_fsub>
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	e054      	b.n	8005c6a <__kernel_rem_pio2f+0x1f6>
 8005bc0:	42ef      	cmn	r7, r5
 8005bc2:	d407      	bmi.n	8005bd4 <__kernel_rem_pio2f+0x160>
 8005bc4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005bc8:	f7fa ff9a 	bl	8000b00 <__aeabi_i2f>
 8005bcc:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8005bd0:	3501      	adds	r5, #1
 8005bd2:	e773      	b.n	8005abc <__kernel_rem_pio2f+0x48>
 8005bd4:	4650      	mov	r0, sl
 8005bd6:	e7f9      	b.n	8005bcc <__kernel_rem_pio2f+0x158>
 8005bd8:	fb0b 5207 	mla	r2, fp, r7, r5
 8005bdc:	9306      	str	r3, [sp, #24]
 8005bde:	9b05      	ldr	r3, [sp, #20]
 8005be0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8005be4:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8005be8:	f7fa ffde 	bl	8000ba8 <__aeabi_fmul>
 8005bec:	4601      	mov	r1, r0
 8005bee:	4648      	mov	r0, r9
 8005bf0:	f7fa fed2 	bl	8000998 <__addsf3>
 8005bf4:	4681      	mov	r9, r0
 8005bf6:	9b06      	ldr	r3, [sp, #24]
 8005bf8:	3701      	adds	r7, #1
 8005bfa:	9a03      	ldr	r2, [sp, #12]
 8005bfc:	4297      	cmp	r7, r2
 8005bfe:	ddeb      	ble.n	8005bd8 <__kernel_rem_pio2f+0x164>
 8005c00:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 8005c04:	3504      	adds	r5, #4
 8005c06:	f108 0801 	add.w	r8, r8, #1
 8005c0a:	e764      	b.n	8005ad6 <__kernel_rem_pio2f+0x62>
 8005c0c:	46d1      	mov	r9, sl
 8005c0e:	2700      	movs	r7, #0
 8005c10:	e7f3      	b.n	8005bfa <__kernel_rem_pio2f+0x186>
 8005c12:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005c16:	4620      	mov	r0, r4
 8005c18:	f7fa ffc6 	bl	8000ba8 <__aeabi_fmul>
 8005c1c:	f7fb f98a 	bl	8000f34 <__aeabi_f2iz>
 8005c20:	f7fa ff6e 	bl	8000b00 <__aeabi_i2f>
 8005c24:	4641      	mov	r1, r8
 8005c26:	4683      	mov	fp, r0
 8005c28:	f7fa ffbe 	bl	8000ba8 <__aeabi_fmul>
 8005c2c:	4601      	mov	r1, r0
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f7fa feb0 	bl	8000994 <__aeabi_fsub>
 8005c34:	f7fb f97e 	bl	8000f34 <__aeabi_f2iz>
 8005c38:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c3c:	f845 0f04 	str.w	r0, [r5, #4]!
 8005c40:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8005c44:	4658      	mov	r0, fp
 8005c46:	f7fa fea7 	bl	8000998 <__addsf3>
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	e75c      	b.n	8005b08 <__kernel_rem_pio2f+0x94>
 8005c4e:	d105      	bne.n	8005c5c <__kernel_rem_pio2f+0x1e8>
 8005c50:	1e7b      	subs	r3, r7, #1
 8005c52:	aa08      	add	r2, sp, #32
 8005c54:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8005c58:	122d      	asrs	r5, r5, #8
 8005c5a:	e78a      	b.n	8005b72 <__kernel_rem_pio2f+0xfe>
 8005c5c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005c60:	f7fb f954 	bl	8000f0c <__aeabi_fcmpge>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d139      	bne.n	8005cdc <__kernel_rem_pio2f+0x268>
 8005c68:	4605      	mov	r5, r0
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f7fb f92f 	bl	8000ed0 <__aeabi_fcmpeq>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	f000 80a0 	beq.w	8005db8 <__kernel_rem_pio2f+0x344>
 8005c78:	1e7c      	subs	r4, r7, #1
 8005c7a:	4623      	mov	r3, r4
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	9902      	ldr	r1, [sp, #8]
 8005c80:	428b      	cmp	r3, r1
 8005c82:	da55      	bge.n	8005d30 <__kernel_rem_pio2f+0x2bc>
 8005c84:	2a00      	cmp	r2, #0
 8005c86:	d07e      	beq.n	8005d86 <__kernel_rem_pio2f+0x312>
 8005c88:	ab08      	add	r3, sp, #32
 8005c8a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005c8e:	3e08      	subs	r6, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 808f 	beq.w	8005db4 <__kernel_rem_pio2f+0x340>
 8005c96:	4631      	mov	r1, r6
 8005c98:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005c9c:	f000 fa02 	bl	80060a4 <scalbnf>
 8005ca0:	46a0      	mov	r8, r4
 8005ca2:	4682      	mov	sl, r0
 8005ca4:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 8005ca8:	af44      	add	r7, sp, #272	; 0x110
 8005caa:	f1b8 0f00 	cmp.w	r8, #0
 8005cae:	f280 80b5 	bge.w	8005e1c <__kernel_rem_pio2f+0x3a8>
 8005cb2:	f04f 0a00 	mov.w	sl, #0
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	00a6      	lsls	r6, r4, #2
 8005cba:	4a35      	ldr	r2, [pc, #212]	; (8005d90 <__kernel_rem_pio2f+0x31c>)
 8005cbc:	4437      	add	r7, r6
 8005cbe:	eba4 010a 	sub.w	r1, r4, sl
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	f280 80db 	bge.w	8005e7e <__kernel_rem_pio2f+0x40a>
 8005cc8:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	f200 80ff 	bhi.w	8005ece <__kernel_rem_pio2f+0x45a>
 8005cd0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005cd4:	01200102 	.word	0x01200102
 8005cd8:	00d90120 	.word	0x00d90120
 8005cdc:	2502      	movs	r5, #2
 8005cde:	e74a      	b.n	8005b76 <__kernel_rem_pio2f+0x102>
 8005ce0:	ab08      	add	r3, sp, #32
 8005ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce6:	f1b8 0f00 	cmp.w	r8, #0
 8005cea:	d109      	bne.n	8005d00 <__kernel_rem_pio2f+0x28c>
 8005cec:	b12b      	cbz	r3, 8005cfa <__kernel_rem_pio2f+0x286>
 8005cee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005cf2:	a908      	add	r1, sp, #32
 8005cf4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	3201      	adds	r2, #1
 8005cfc:	4698      	mov	r8, r3
 8005cfe:	e73e      	b.n	8005b7e <__kernel_rem_pio2f+0x10a>
 8005d00:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005d04:	a908      	add	r1, sp, #32
 8005d06:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005d0a:	4643      	mov	r3, r8
 8005d0c:	e7f5      	b.n	8005cfa <__kernel_rem_pio2f+0x286>
 8005d0e:	1e7a      	subs	r2, r7, #1
 8005d10:	ab08      	add	r3, sp, #32
 8005d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d1a:	a908      	add	r1, sp, #32
 8005d1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005d20:	e738      	b.n	8005b94 <__kernel_rem_pio2f+0x120>
 8005d22:	1e7a      	subs	r2, r7, #1
 8005d24:	ab08      	add	r3, sp, #32
 8005d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d2e:	e7f4      	b.n	8005d1a <__kernel_rem_pio2f+0x2a6>
 8005d30:	a908      	add	r1, sp, #32
 8005d32:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	e7a0      	b.n	8005c7e <__kernel_rem_pio2f+0x20a>
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005d42:	2900      	cmp	r1, #0
 8005d44:	d0fa      	beq.n	8005d3c <__kernel_rem_pio2f+0x2c8>
 8005d46:	f06f 0803 	mvn.w	r8, #3
 8005d4a:	9a04      	ldr	r2, [sp, #16]
 8005d4c:	1c7d      	adds	r5, r7, #1
 8005d4e:	18bc      	adds	r4, r7, r2
 8005d50:	aa1c      	add	r2, sp, #112	; 0x70
 8005d52:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005d56:	441f      	add	r7, r3
 8005d58:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8005d5c:	42af      	cmp	r7, r5
 8005d5e:	f6ff aec8 	blt.w	8005af2 <__kernel_rem_pio2f+0x7e>
 8005d62:	9b06      	ldr	r3, [sp, #24]
 8005d64:	f04f 0a00 	mov.w	sl, #0
 8005d68:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d6c:	f7fa fec8 	bl	8000b00 <__aeabi_i2f>
 8005d70:	f04f 0b00 	mov.w	fp, #0
 8005d74:	6020      	str	r0, [r4, #0]
 8005d76:	9b03      	ldr	r3, [sp, #12]
 8005d78:	459a      	cmp	sl, r3
 8005d7a:	dd0b      	ble.n	8005d94 <__kernel_rem_pio2f+0x320>
 8005d7c:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8005d80:	3404      	adds	r4, #4
 8005d82:	3501      	adds	r5, #1
 8005d84:	e7ea      	b.n	8005d5c <__kernel_rem_pio2f+0x2e8>
 8005d86:	9a07      	ldr	r2, [sp, #28]
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e7d8      	b.n	8005d3e <__kernel_rem_pio2f+0x2ca>
 8005d8c:	080065d4 	.word	0x080065d4
 8005d90:	080065a8 	.word	0x080065a8
 8005d94:	fb08 f30a 	mul.w	r3, r8, sl
 8005d98:	9a05      	ldr	r2, [sp, #20]
 8005d9a:	58e0      	ldr	r0, [r4, r3]
 8005d9c:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8005da0:	f7fa ff02 	bl	8000ba8 <__aeabi_fmul>
 8005da4:	4601      	mov	r1, r0
 8005da6:	4658      	mov	r0, fp
 8005da8:	f7fa fdf6 	bl	8000998 <__addsf3>
 8005dac:	f10a 0a01 	add.w	sl, sl, #1
 8005db0:	4683      	mov	fp, r0
 8005db2:	e7e0      	b.n	8005d76 <__kernel_rem_pio2f+0x302>
 8005db4:	3c01      	subs	r4, #1
 8005db6:	e767      	b.n	8005c88 <__kernel_rem_pio2f+0x214>
 8005db8:	4271      	negs	r1, r6
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 f972 	bl	80060a4 <scalbnf>
 8005dc0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	f7fb f8a1 	bl	8000f0c <__aeabi_fcmpge>
 8005dca:	b1f8      	cbz	r0, 8005e0c <__kernel_rem_pio2f+0x398>
 8005dcc:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f7fa fee9 	bl	8000ba8 <__aeabi_fmul>
 8005dd6:	f7fb f8ad 	bl	8000f34 <__aeabi_f2iz>
 8005dda:	f7fa fe91 	bl	8000b00 <__aeabi_i2f>
 8005dde:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005de2:	4680      	mov	r8, r0
 8005de4:	f7fa fee0 	bl	8000ba8 <__aeabi_fmul>
 8005de8:	4601      	mov	r1, r0
 8005dea:	4620      	mov	r0, r4
 8005dec:	f7fa fdd2 	bl	8000994 <__aeabi_fsub>
 8005df0:	f7fb f8a0 	bl	8000f34 <__aeabi_f2iz>
 8005df4:	ab08      	add	r3, sp, #32
 8005df6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005dfa:	4640      	mov	r0, r8
 8005dfc:	f7fb f89a 	bl	8000f34 <__aeabi_f2iz>
 8005e00:	1c7c      	adds	r4, r7, #1
 8005e02:	ab08      	add	r3, sp, #32
 8005e04:	3608      	adds	r6, #8
 8005e06:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005e0a:	e744      	b.n	8005c96 <__kernel_rem_pio2f+0x222>
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f7fb f891 	bl	8000f34 <__aeabi_f2iz>
 8005e12:	ab08      	add	r3, sp, #32
 8005e14:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005e18:	463c      	mov	r4, r7
 8005e1a:	e73c      	b.n	8005c96 <__kernel_rem_pio2f+0x222>
 8005e1c:	ab08      	add	r3, sp, #32
 8005e1e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005e22:	f7fa fe6d 	bl	8000b00 <__aeabi_i2f>
 8005e26:	4651      	mov	r1, sl
 8005e28:	f7fa febe 	bl	8000ba8 <__aeabi_fmul>
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 8005e32:	4650      	mov	r0, sl
 8005e34:	f7fa feb8 	bl	8000ba8 <__aeabi_fmul>
 8005e38:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005e3c:	4682      	mov	sl, r0
 8005e3e:	e734      	b.n	8005caa <__kernel_rem_pio2f+0x236>
 8005e40:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8005e44:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	9203      	str	r2, [sp, #12]
 8005e4c:	f7fa feac 	bl	8000ba8 <__aeabi_fmul>
 8005e50:	4601      	mov	r1, r0
 8005e52:	4658      	mov	r0, fp
 8005e54:	f7fa fda0 	bl	8000998 <__addsf3>
 8005e58:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8005e5c:	4683      	mov	fp, r0
 8005e5e:	f108 0801 	add.w	r8, r8, #1
 8005e62:	9902      	ldr	r1, [sp, #8]
 8005e64:	4588      	cmp	r8, r1
 8005e66:	dc01      	bgt.n	8005e6c <__kernel_rem_pio2f+0x3f8>
 8005e68:	45c2      	cmp	sl, r8
 8005e6a:	dae9      	bge.n	8005e40 <__kernel_rem_pio2f+0x3cc>
 8005e6c:	a958      	add	r1, sp, #352	; 0x160
 8005e6e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e72:	f841 bca0 	str.w	fp, [r1, #-160]
 8005e76:	f10a 0a01 	add.w	sl, sl, #1
 8005e7a:	3f04      	subs	r7, #4
 8005e7c:	e71f      	b.n	8005cbe <__kernel_rem_pio2f+0x24a>
 8005e7e:	469b      	mov	fp, r3
 8005e80:	f04f 0800 	mov.w	r8, #0
 8005e84:	e7ed      	b.n	8005e62 <__kernel_rem_pio2f+0x3ee>
 8005e86:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 8005e8a:	4456      	add	r6, sl
 8005e8c:	4637      	mov	r7, r6
 8005e8e:	46a0      	mov	r8, r4
 8005e90:	f1b8 0f00 	cmp.w	r8, #0
 8005e94:	dc4a      	bgt.n	8005f2c <__kernel_rem_pio2f+0x4b8>
 8005e96:	4627      	mov	r7, r4
 8005e98:	2f01      	cmp	r7, #1
 8005e9a:	dc60      	bgt.n	8005f5e <__kernel_rem_pio2f+0x4ea>
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	2c01      	cmp	r4, #1
 8005ea0:	dc74      	bgt.n	8005f8c <__kernel_rem_pio2f+0x518>
 8005ea2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8005ea4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8005ea6:	2d00      	cmp	r5, #0
 8005ea8:	d176      	bne.n	8005f98 <__kernel_rem_pio2f+0x524>
 8005eaa:	9901      	ldr	r1, [sp, #4]
 8005eac:	600a      	str	r2, [r1, #0]
 8005eae:	460a      	mov	r2, r1
 8005eb0:	604b      	str	r3, [r1, #4]
 8005eb2:	6090      	str	r0, [r2, #8]
 8005eb4:	e00b      	b.n	8005ece <__kernel_rem_pio2f+0x45a>
 8005eb6:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8005eba:	f7fa fd6d 	bl	8000998 <__addsf3>
 8005ebe:	3c01      	subs	r4, #1
 8005ec0:	2c00      	cmp	r4, #0
 8005ec2:	daf8      	bge.n	8005eb6 <__kernel_rem_pio2f+0x442>
 8005ec4:	b10d      	cbz	r5, 8005eca <__kernel_rem_pio2f+0x456>
 8005ec6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005eca:	9b01      	ldr	r3, [sp, #4]
 8005ecc:	6018      	str	r0, [r3, #0]
 8005ece:	f009 0007 	and.w	r0, r9, #7
 8005ed2:	b059      	add	sp, #356	; 0x164
 8005ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed8:	2000      	movs	r0, #0
 8005eda:	ae30      	add	r6, sp, #192	; 0xc0
 8005edc:	e7f0      	b.n	8005ec0 <__kernel_rem_pio2f+0x44c>
 8005ede:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8005ee2:	f7fa fd59 	bl	8000998 <__addsf3>
 8005ee6:	3e01      	subs	r6, #1
 8005ee8:	2e00      	cmp	r6, #0
 8005eea:	daf8      	bge.n	8005ede <__kernel_rem_pio2f+0x46a>
 8005eec:	b1b5      	cbz	r5, 8005f1c <__kernel_rem_pio2f+0x4a8>
 8005eee:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8005ef2:	9a01      	ldr	r2, [sp, #4]
 8005ef4:	af58      	add	r7, sp, #352	; 0x160
 8005ef6:	4601      	mov	r1, r0
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8005efe:	f7fa fd49 	bl	8000994 <__aeabi_fsub>
 8005f02:	2601      	movs	r6, #1
 8005f04:	42b4      	cmp	r4, r6
 8005f06:	da0b      	bge.n	8005f20 <__kernel_rem_pio2f+0x4ac>
 8005f08:	b10d      	cbz	r5, 8005f0e <__kernel_rem_pio2f+0x49a>
 8005f0a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	6058      	str	r0, [r3, #4]
 8005f12:	e7dc      	b.n	8005ece <__kernel_rem_pio2f+0x45a>
 8005f14:	4626      	mov	r6, r4
 8005f16:	2000      	movs	r0, #0
 8005f18:	af30      	add	r7, sp, #192	; 0xc0
 8005f1a:	e7e5      	b.n	8005ee8 <__kernel_rem_pio2f+0x474>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	e7e8      	b.n	8005ef2 <__kernel_rem_pio2f+0x47e>
 8005f20:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8005f24:	f7fa fd38 	bl	8000998 <__addsf3>
 8005f28:	3601      	adds	r6, #1
 8005f2a:	e7eb      	b.n	8005f04 <__kernel_rem_pio2f+0x490>
 8005f2c:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8005f30:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4610      	mov	r0, r2
 8005f38:	4619      	mov	r1, r3
 8005f3a:	9303      	str	r3, [sp, #12]
 8005f3c:	9202      	str	r2, [sp, #8]
 8005f3e:	f7fa fd2b 	bl	8000998 <__addsf3>
 8005f42:	9a02      	ldr	r2, [sp, #8]
 8005f44:	4601      	mov	r1, r0
 8005f46:	4683      	mov	fp, r0
 8005f48:	4610      	mov	r0, r2
 8005f4a:	f7fa fd23 	bl	8000994 <__aeabi_fsub>
 8005f4e:	9b03      	ldr	r3, [sp, #12]
 8005f50:	4619      	mov	r1, r3
 8005f52:	f7fa fd21 	bl	8000998 <__addsf3>
 8005f56:	f8c7 b000 	str.w	fp, [r7]
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	e798      	b.n	8005e90 <__kernel_rem_pio2f+0x41c>
 8005f5e:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8005f62:	3f01      	subs	r7, #1
 8005f64:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	4659      	mov	r1, fp
 8005f6c:	9302      	str	r3, [sp, #8]
 8005f6e:	f7fa fd13 	bl	8000998 <__addsf3>
 8005f72:	9b02      	ldr	r3, [sp, #8]
 8005f74:	4601      	mov	r1, r0
 8005f76:	4680      	mov	r8, r0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fa fd0b 	bl	8000994 <__aeabi_fsub>
 8005f7e:	4659      	mov	r1, fp
 8005f80:	f7fa fd0a 	bl	8000998 <__addsf3>
 8005f84:	f8c6 8000 	str.w	r8, [r6]
 8005f88:	6070      	str	r0, [r6, #4]
 8005f8a:	e785      	b.n	8005e98 <__kernel_rem_pio2f+0x424>
 8005f8c:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8005f90:	f7fa fd02 	bl	8000998 <__addsf3>
 8005f94:	3c01      	subs	r4, #1
 8005f96:	e782      	b.n	8005e9e <__kernel_rem_pio2f+0x42a>
 8005f98:	9901      	ldr	r1, [sp, #4]
 8005f9a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8005f9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005fa2:	600a      	str	r2, [r1, #0]
 8005fa4:	604b      	str	r3, [r1, #4]
 8005fa6:	460a      	mov	r2, r1
 8005fa8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005fac:	e781      	b.n	8005eb2 <__kernel_rem_pio2f+0x43e>
 8005fae:	bf00      	nop

08005fb0 <__kernel_sinf>:
 8005fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005fb8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	460f      	mov	r7, r1
 8005fc0:	4691      	mov	r9, r2
 8005fc2:	da03      	bge.n	8005fcc <__kernel_sinf+0x1c>
 8005fc4:	f7fa ffb6 	bl	8000f34 <__aeabi_f2iz>
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d035      	beq.n	8006038 <__kernel_sinf+0x88>
 8005fcc:	4621      	mov	r1, r4
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f7fa fdea 	bl	8000ba8 <__aeabi_fmul>
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	4601      	mov	r1, r0
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f7fa fde5 	bl	8000ba8 <__aeabi_fmul>
 8005fde:	4929      	ldr	r1, [pc, #164]	; (8006084 <__kernel_sinf+0xd4>)
 8005fe0:	4606      	mov	r6, r0
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	f7fa fde0 	bl	8000ba8 <__aeabi_fmul>
 8005fe8:	4927      	ldr	r1, [pc, #156]	; (8006088 <__kernel_sinf+0xd8>)
 8005fea:	f7fa fcd3 	bl	8000994 <__aeabi_fsub>
 8005fee:	4629      	mov	r1, r5
 8005ff0:	f7fa fdda 	bl	8000ba8 <__aeabi_fmul>
 8005ff4:	4925      	ldr	r1, [pc, #148]	; (800608c <__kernel_sinf+0xdc>)
 8005ff6:	f7fa fccf 	bl	8000998 <__addsf3>
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	f7fa fdd4 	bl	8000ba8 <__aeabi_fmul>
 8006000:	4923      	ldr	r1, [pc, #140]	; (8006090 <__kernel_sinf+0xe0>)
 8006002:	f7fa fcc7 	bl	8000994 <__aeabi_fsub>
 8006006:	4629      	mov	r1, r5
 8006008:	f7fa fdce 	bl	8000ba8 <__aeabi_fmul>
 800600c:	4921      	ldr	r1, [pc, #132]	; (8006094 <__kernel_sinf+0xe4>)
 800600e:	f7fa fcc3 	bl	8000998 <__addsf3>
 8006012:	4680      	mov	r8, r0
 8006014:	f1b9 0f00 	cmp.w	r9, #0
 8006018:	d111      	bne.n	800603e <__kernel_sinf+0x8e>
 800601a:	4601      	mov	r1, r0
 800601c:	4628      	mov	r0, r5
 800601e:	f7fa fdc3 	bl	8000ba8 <__aeabi_fmul>
 8006022:	491d      	ldr	r1, [pc, #116]	; (8006098 <__kernel_sinf+0xe8>)
 8006024:	f7fa fcb6 	bl	8000994 <__aeabi_fsub>
 8006028:	4631      	mov	r1, r6
 800602a:	f7fa fdbd 	bl	8000ba8 <__aeabi_fmul>
 800602e:	4601      	mov	r1, r0
 8006030:	4620      	mov	r0, r4
 8006032:	f7fa fcb1 	bl	8000998 <__addsf3>
 8006036:	4604      	mov	r4, r0
 8006038:	4620      	mov	r0, r4
 800603a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800603e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006042:	4638      	mov	r0, r7
 8006044:	f7fa fdb0 	bl	8000ba8 <__aeabi_fmul>
 8006048:	4641      	mov	r1, r8
 800604a:	4681      	mov	r9, r0
 800604c:	4630      	mov	r0, r6
 800604e:	f7fa fdab 	bl	8000ba8 <__aeabi_fmul>
 8006052:	4601      	mov	r1, r0
 8006054:	4648      	mov	r0, r9
 8006056:	f7fa fc9d 	bl	8000994 <__aeabi_fsub>
 800605a:	4629      	mov	r1, r5
 800605c:	f7fa fda4 	bl	8000ba8 <__aeabi_fmul>
 8006060:	4639      	mov	r1, r7
 8006062:	f7fa fc97 	bl	8000994 <__aeabi_fsub>
 8006066:	490c      	ldr	r1, [pc, #48]	; (8006098 <__kernel_sinf+0xe8>)
 8006068:	4605      	mov	r5, r0
 800606a:	4630      	mov	r0, r6
 800606c:	f7fa fd9c 	bl	8000ba8 <__aeabi_fmul>
 8006070:	4601      	mov	r1, r0
 8006072:	4628      	mov	r0, r5
 8006074:	f7fa fc90 	bl	8000998 <__addsf3>
 8006078:	4601      	mov	r1, r0
 800607a:	4620      	mov	r0, r4
 800607c:	f7fa fc8a 	bl	8000994 <__aeabi_fsub>
 8006080:	e7d9      	b.n	8006036 <__kernel_sinf+0x86>
 8006082:	bf00      	nop
 8006084:	2f2ec9d3 	.word	0x2f2ec9d3
 8006088:	32d72f34 	.word	0x32d72f34
 800608c:	3638ef1b 	.word	0x3638ef1b
 8006090:	39500d01 	.word	0x39500d01
 8006094:	3c088889 	.word	0x3c088889
 8006098:	3e2aaaab 	.word	0x3e2aaaab

0800609c <fabsf>:
 800609c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80060a0:	4770      	bx	lr
	...

080060a4 <scalbnf>:
 80060a4:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 80060a8:	b510      	push	{r4, lr}
 80060aa:	4602      	mov	r2, r0
 80060ac:	460c      	mov	r4, r1
 80060ae:	4601      	mov	r1, r0
 80060b0:	d027      	beq.n	8006102 <scalbnf+0x5e>
 80060b2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80060b6:	d303      	bcc.n	80060c0 <scalbnf+0x1c>
 80060b8:	f7fa fc6e 	bl	8000998 <__addsf3>
 80060bc:	4602      	mov	r2, r0
 80060be:	e020      	b.n	8006102 <scalbnf+0x5e>
 80060c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060c4:	d215      	bcs.n	80060f2 <scalbnf+0x4e>
 80060c6:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80060ca:	f7fa fd6d 	bl	8000ba8 <__aeabi_fmul>
 80060ce:	4b18      	ldr	r3, [pc, #96]	; (8006130 <scalbnf+0x8c>)
 80060d0:	4602      	mov	r2, r0
 80060d2:	429c      	cmp	r4, r3
 80060d4:	db22      	blt.n	800611c <scalbnf+0x78>
 80060d6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80060da:	3b19      	subs	r3, #25
 80060dc:	4423      	add	r3, r4
 80060de:	2bfe      	cmp	r3, #254	; 0xfe
 80060e0:	dd09      	ble.n	80060f6 <scalbnf+0x52>
 80060e2:	4611      	mov	r1, r2
 80060e4:	4813      	ldr	r0, [pc, #76]	; (8006134 <scalbnf+0x90>)
 80060e6:	f000 f829 	bl	800613c <copysignf>
 80060ea:	4912      	ldr	r1, [pc, #72]	; (8006134 <scalbnf+0x90>)
 80060ec:	f7fa fd5c 	bl	8000ba8 <__aeabi_fmul>
 80060f0:	e7e4      	b.n	80060bc <scalbnf+0x18>
 80060f2:	0ddb      	lsrs	r3, r3, #23
 80060f4:	e7f2      	b.n	80060dc <scalbnf+0x38>
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	dd05      	ble.n	8006106 <scalbnf+0x62>
 80060fa:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 80060fe:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8006102:	4610      	mov	r0, r2
 8006104:	bd10      	pop	{r4, pc}
 8006106:	f113 0f16 	cmn.w	r3, #22
 800610a:	da09      	bge.n	8006120 <scalbnf+0x7c>
 800610c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006110:	429c      	cmp	r4, r3
 8006112:	4611      	mov	r1, r2
 8006114:	dce6      	bgt.n	80060e4 <scalbnf+0x40>
 8006116:	4808      	ldr	r0, [pc, #32]	; (8006138 <scalbnf+0x94>)
 8006118:	f000 f810 	bl	800613c <copysignf>
 800611c:	4906      	ldr	r1, [pc, #24]	; (8006138 <scalbnf+0x94>)
 800611e:	e7e5      	b.n	80060ec <scalbnf+0x48>
 8006120:	3319      	adds	r3, #25
 8006122:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8006126:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800612a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800612e:	e7dd      	b.n	80060ec <scalbnf+0x48>
 8006130:	ffff3cb0 	.word	0xffff3cb0
 8006134:	7149f2ca 	.word	0x7149f2ca
 8006138:	0da24260 	.word	0x0da24260

0800613c <copysignf>:
 800613c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006140:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006144:	4308      	orrs	r0, r1
 8006146:	4770      	bx	lr

08006148 <_init>:
 8006148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614a:	bf00      	nop
 800614c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800614e:	bc08      	pop	{r3}
 8006150:	469e      	mov	lr, r3
 8006152:	4770      	bx	lr

08006154 <_fini>:
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006156:	bf00      	nop
 8006158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615a:	bc08      	pop	{r3}
 800615c:	469e      	mov	lr, r3
 800615e:	4770      	bx	lr
