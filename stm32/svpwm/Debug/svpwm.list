
svpwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006498  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a48  08006a48  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08006a48  08006a48  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a48  08006a48  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a4c  08006a4c  00016a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000007c  08006acc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08006acc  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d30f  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ccb  00000000  00000000  0002d3b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db0  00000000  00000000  0002f080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf0  00000000  00000000  0002fe30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015a06  00000000  00000000  00030b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098db  00000000  00000000  00046526  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007872b  00000000  00000000  0004fe01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c852c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043bc  00000000  00000000  000c85a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006590 	.word	0x08006590

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08006590 	.word	0x08006590

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a48:	f1a2 0201 	sub.w	r2, r2, #1
 8000a4c:	d1ed      	bne.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f8c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d013      	beq.n	8000fc0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f9c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fa0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00b      	beq.n	8000fc0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fa8:	e000      	b.n	8000fac <ITM_SendChar+0x2c>
    {
      __NOP();
 8000faa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f9      	beq.n	8000faa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fb6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fc0:	687b      	ldr	r3, [r7, #4]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
	for(i=0; i < len; i++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e009      	b.n	8000ff6 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1c5a      	adds	r2, r3, #1
 8000fe6:	60ba      	str	r2, [r7, #8]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffc8 	bl	8000f80 <ITM_SendChar>
	for(i=0; i < len; i++) {
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	dbf1      	blt.n	8000fe2 <_write+0x16>
	}
	return len;
 8000ffe:	687b      	ldr	r3, [r7, #4]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_TIM_PeriodElapsedCallback>:

unsigned int electricOffset = 10;
unsigned int electricRange = 585;
unsigned int electricAngle = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1_1) {
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b08d      	sub	sp, #52	; 0x34
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	float third_sector = floorf(theta / S_2_PI_3);
 8001010:	4b5f      	ldr	r3, [pc, #380]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a5f      	ldr	r2, [pc, #380]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe79 	bl	8000d10 <__aeabi_fdiv>
 800101e:	4603      	mov	r3, r0
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fcfd 	bl	8005a20 <floorf>
 8001026:	62f8      	str	r0, [r7, #44]	; 0x2c
	float third_sector_theta = theta - third_sector * S_2_PI_3;
 8001028:	4b59      	ldr	r3, [pc, #356]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800102a:	681c      	ldr	r4, [r3, #0]
 800102c:	4b59      	ldr	r3, [pc, #356]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800102e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fdb9 	bl	8000ba8 <__aeabi_fmul>
 8001036:	4603      	mov	r3, r0
 8001038:	4619      	mov	r1, r3
 800103a:	4620      	mov	r0, r4
 800103c:	f7ff fcaa 	bl	8000994 <__aeabi_fsub>
 8001040:	4603      	mov	r3, r0
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28

	float x = cosf(third_sector_theta);
 8001044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001046:	f004 fcb7 	bl	80059b8 <cosf>
 800104a:	6278      	str	r0, [r7, #36]	; 0x24
	float y = sinf(third_sector_theta);
 800104c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800104e:	f004 fd27 	bl	8005aa0 <sinf>
 8001052:	6238      	str	r0, [r7, #32]

	float a = SCALE_TO_ONE * (S_1_SQRT3 * y + x);
 8001054:	4b50      	ldr	r3, [pc, #320]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001056:	6a39      	ldr	r1, [r7, #32]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fda5 	bl	8000ba8 <__aeabi_fmul>
 800105e:	4603      	mov	r3, r0
 8001060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fc98 	bl	8000998 <__addsf3>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b4b      	ldr	r3, [pc, #300]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800106e:	4619      	mov	r1, r3
 8001070:	4610      	mov	r0, r2
 8001072:	f7ff fd99 	bl	8000ba8 <__aeabi_fmul>
 8001076:	4603      	mov	r3, r0
 8001078:	61fb      	str	r3, [r7, #28]
	float b = SCALE_TO_ONE * (S_2_SQRT3 * y);
 800107a:	4b49      	ldr	r3, [pc, #292]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800107c:	6a39      	ldr	r1, [r7, #32]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fd92 	bl	8000ba8 <__aeabi_fmul>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	4b44      	ldr	r3, [pc, #272]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800108a:	4619      	mov	r1, r3
 800108c:	4610      	mov	r0, r2
 800108e:	f7ff fd8b 	bl	8000ba8 <__aeabi_fmul>
 8001092:	4603      	mov	r3, r0
 8001094:	61bb      	str	r3, [r7, #24]

	float multiplyBy = 200.0f * (1.0f + 12.5f * thetaAdd);
 8001096:	4b43      	ldr	r3, [pc, #268]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4943      	ldr	r1, [pc, #268]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fd83 	bl	8000ba8 <__aeabi_fmul>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fc75 	bl	8000998 <__addsf3>
 80010ae:	4603      	mov	r3, r0
 80010b0:	493e      	ldr	r1, [pc, #248]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fd78 	bl	8000ba8 <__aeabi_fmul>
 80010b8:	4603      	mov	r3, r0
 80010ba:	617b      	str	r3, [r7, #20]
	int addTo = (5000.0f - multiplyBy) / 2.0f;
 80010bc:	6979      	ldr	r1, [r7, #20]
 80010be:	483c      	ldr	r0, [pc, #240]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80010c0:	f7ff fc68 	bl	8000994 <__aeabi_fsub>
 80010c4:	4603      	mov	r3, r0
 80010c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fe20 	bl	8000d10 <__aeabi_fdiv>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff2e 	bl	8000f34 <__aeabi_f2iz>
 80010d8:	4603      	mov	r3, r0
 80010da:	613b      	str	r3, [r7, #16]

	int a_time = a * multiplyBy;
 80010dc:	6979      	ldr	r1, [r7, #20]
 80010de:	69f8      	ldr	r0, [r7, #28]
 80010e0:	f7ff fd62 	bl	8000ba8 <__aeabi_fmul>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff24 	bl	8000f34 <__aeabi_f2iz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	60fb      	str	r3, [r7, #12]
	int b_time = b * multiplyBy;
 80010f0:	6979      	ldr	r1, [r7, #20]
 80010f2:	69b8      	ldr	r0, [r7, #24]
 80010f4:	f7ff fd58 	bl	8000ba8 <__aeabi_fmul>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff1a 	bl	8000f34 <__aeabi_f2iz>
 8001100:	4603      	mov	r3, r0
 8001102:	60bb      	str	r3, [r7, #8]

	if (third_sector == 0) {
 8001104:	f04f 0100 	mov.w	r1, #0
 8001108:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800110a:	f7ff fee1 	bl	8000ed0 <__aeabi_fcmpeq>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d010      	beq.n	8001136 <HAL_TIM_PeriodElapsedCallback+0x12e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, a_time + addTo);
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	441a      	add	r2, r3
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, b_time + addTo);
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	441a      	add	r2, r3
 8001126:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, addTo);
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	63da      	str	r2, [r3, #60]	; 0x3c
//	thetaAdd += 0.0000002f;
//
//	if (theta >= 2.0f * M_PI) {
//		theta -= 2.0f * M_PI;
//	}
}
 8001134:	e028      	b.n	8001188 <HAL_TIM_PeriodElapsedCallback+0x180>
	} else if (third_sector == 1) {
 8001136:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800113a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800113c:	f7ff fec8 	bl	8000ed0 <__aeabi_fcmpeq>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d010      	beq.n	8001168 <HAL_TIM_PeriodElapsedCallback+0x160>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, addTo);
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, a_time + addTo);
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	441a      	add	r2, r3
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b_time + addTo);
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	441a      	add	r2, r3
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001166:	e00f      	b.n	8001188 <HAL_TIM_PeriodElapsedCallback+0x180>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, b_time + addTo);
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	441a      	add	r2, r3
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, addTo);
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, a_time + addTo);
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	441a      	add	r2, r3
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001188:	bf00      	nop
 800118a:	3734      	adds	r7, #52	; 0x34
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	20000098 	.word	0x20000098
 8001194:	40060a92 	.word	0x40060a92
 8001198:	3f13cd3a 	.word	0x3f13cd3a
 800119c:	3f5db3d8 	.word	0x3f5db3d8
 80011a0:	3f93cd3a 	.word	0x3f93cd3a
 80011a4:	2000009c 	.word	0x2000009c
 80011a8:	41480000 	.word	0x41480000
 80011ac:	43480000 	.word	0x43480000
 80011b0:	459c4000 	.word	0x459c4000
 80011b4:	20000134 	.word	0x20000134

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011be:	f000 fcbf 	bl	8001b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c2:	f000 f8b7 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c6:	f000 fa39 	bl	800163c <MX_GPIO_Init>
  MX_TIM1_Init();
 80011ca:	f000 f979 	bl	80014c0 <MX_TIM1_Init>
  MX_ADC1_Init();
 80011ce:	f000 f90b 	bl	80013e8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011d2:	f000 f947 	bl	8001464 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80011d6:	484c      	ldr	r0, [pc, #304]	; (8001308 <main+0x150>)
 80011d8:	f000 fe0e 	bl	8001df8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80011dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011e0:	4849      	ldr	r0, [pc, #292]	; (8001308 <main+0x150>)
 80011e2:	f000 fee3 	bl	8001fac <HAL_ADC_PollForConversion>
	  analogRead = HAL_ADC_GetValue(&hadc1);
 80011e6:	4848      	ldr	r0, [pc, #288]	; (8001308 <main+0x150>)
 80011e8:	f000 ffda 	bl	80021a0 <HAL_ADC_GetValue>
 80011ec:	4602      	mov	r2, r0
 80011ee:	4b47      	ldr	r3, [pc, #284]	; (800130c <main+0x154>)
 80011f0:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80011f2:	4845      	ldr	r0, [pc, #276]	; (8001308 <main+0x150>)
 80011f4:	f000 feae 	bl	8001f54 <HAL_ADC_Stop>

	  if (electricOffset > analogRead) {
 80011f8:	4b45      	ldr	r3, [pc, #276]	; (8001310 <main+0x158>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b43      	ldr	r3, [pc, #268]	; (800130c <main+0x154>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d90a      	bls.n	800121a <main+0x62>
		  electricAngle = electricRange - electricOffset + analogRead;
 8001204:	4b43      	ldr	r3, [pc, #268]	; (8001314 <main+0x15c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b41      	ldr	r3, [pc, #260]	; (8001310 <main+0x158>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	1ad2      	subs	r2, r2, r3
 800120e:	4b3f      	ldr	r3, [pc, #252]	; (800130c <main+0x154>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a40      	ldr	r2, [pc, #256]	; (8001318 <main+0x160>)
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e00d      	b.n	8001236 <main+0x7e>
	  } else {
		  electricAngle = (analogRead - electricOffset) % electricRange;
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <main+0x154>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b3c      	ldr	r3, [pc, #240]	; (8001310 <main+0x158>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	4a3b      	ldr	r2, [pc, #236]	; (8001314 <main+0x15c>)
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	fbb3 f1f2 	udiv	r1, r3, r2
 800122c:	fb02 f201 	mul.w	r2, r2, r1
 8001230:	1a9b      	subs	r3, r3, r2
 8001232:	4a39      	ldr	r2, [pc, #228]	; (8001318 <main+0x160>)
 8001234:	6013      	str	r3, [r2, #0]
	  }

	  theta = 2.0f * M_PI * ((electricAngle + 200) % electricRange) / (1.0f * electricRange);
 8001236:	4b38      	ldr	r3, [pc, #224]	; (8001318 <main+0x160>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	33c8      	adds	r3, #200	; 0xc8
 800123c:	4a35      	ldr	r2, [pc, #212]	; (8001314 <main+0x15c>)
 800123e:	6812      	ldr	r2, [r2, #0]
 8001240:	fbb3 f1f2 	udiv	r1, r3, r2
 8001244:	fb02 f201 	mul.w	r2, r2, r1
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f8c2 	bl	80003d4 <__aeabi_ui2d>
 8001250:	a32b      	add	r3, pc, #172	; (adr r3, 8001300 <main+0x148>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff f937 	bl	80004c8 <__aeabi_dmul>
 800125a:	4603      	mov	r3, r0
 800125c:	460c      	mov	r4, r1
 800125e:	4625      	mov	r5, r4
 8001260:	461c      	mov	r4, r3
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <main+0x15c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fc46 	bl	8000af8 <__aeabi_ui2f>
 800126c:	4603      	mov	r3, r0
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f8d2 	bl	8000418 <__aeabi_f2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff fa4e 	bl	800071c <__aeabi_ddiv>
 8001280:	4603      	mov	r3, r0
 8001282:	460c      	mov	r4, r1
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f7ff fb30 	bl	80008ec <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	4b23      	ldr	r3, [pc, #140]	; (800131c <main+0x164>)
 8001290:	601a      	str	r2, [r3, #0]

	  buf[0] = RAW_ANGLE_REG;
 8001292:	230c      	movs	r3, #12
 8001294:	703b      	strb	r3, [r7, #0]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, AS5600_ADDR, buf, 1, 1000);
 8001296:	236c      	movs	r3, #108	; 0x6c
 8001298:	b299      	uxth	r1, r3
 800129a:	463a      	mov	r2, r7
 800129c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	481e      	ldr	r0, [pc, #120]	; (8001320 <main+0x168>)
 80012a6:	f001 fcab 	bl	8002c00 <HAL_I2C_Master_Transmit>
 80012aa:	4603      	mov	r3, r0
 80012ac:	73fb      	strb	r3, [r7, #15]
	  if (ret == HAL_BUSY) {
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d103      	bne.n	80012bc <main+0x104>
		  printf("Busy Tx\n");
 80012b4:	481b      	ldr	r0, [pc, #108]	; (8001324 <main+0x16c>)
 80012b6:	f003 ff75 	bl	80051a4 <puts>
 80012ba:	e01c      	b.n	80012f6 <main+0x13e>
	  } else if (ret == HAL_ERROR) {
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d103      	bne.n	80012ca <main+0x112>
		  printf("Error Tx\n");
 80012c2:	4819      	ldr	r0, [pc, #100]	; (8001328 <main+0x170>)
 80012c4:	f003 ff6e 	bl	80051a4 <puts>
 80012c8:	e015      	b.n	80012f6 <main+0x13e>
	  } else {
		  // Read 2 bytes from the temperature register
		  ret = HAL_I2C_Master_Receive(&hi2c1, AS5600_ADDR, buf, 2, 1000);
 80012ca:	236c      	movs	r3, #108	; 0x6c
 80012cc:	b299      	uxth	r1, r3
 80012ce:	463a      	mov	r2, r7
 80012d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2302      	movs	r3, #2
 80012d8:	4811      	ldr	r0, [pc, #68]	; (8001320 <main+0x168>)
 80012da:	f001 fd8f 	bl	8002dfc <HAL_I2C_Master_Receive>
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
		  if (ret != HAL_OK) {
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <main+0x138>
			  printf("Error Rx\n");
 80012e8:	4810      	ldr	r0, [pc, #64]	; (800132c <main+0x174>)
 80012ea:	f003 ff5b 	bl	80051a4 <puts>
 80012ee:	e002      	b.n	80012f6 <main+0x13e>
		  } else {
			  printf("Read I2C\n");
 80012f0:	480f      	ldr	r0, [pc, #60]	; (8001330 <main+0x178>)
 80012f2:	f003 ff57 	bl	80051a4 <puts>
		  }
	  }

	  HAL_Delay(250);
 80012f6:	20fa      	movs	r0, #250	; 0xfa
 80012f8:	f000 fc84 	bl	8001c04 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80012fc:	e76b      	b.n	80011d6 <main+0x1e>
 80012fe:	bf00      	nop
 8001300:	54442d18 	.word	0x54442d18
 8001304:	401921fb 	.word	0x401921fb
 8001308:	20000104 	.word	0x20000104
 800130c:	20000000 	.word	0x20000000
 8001310:	20000004 	.word	0x20000004
 8001314:	20000008 	.word	0x20000008
 8001318:	200000a0 	.word	0x200000a0
 800131c:	20000098 	.word	0x20000098
 8001320:	200000b0 	.word	0x200000b0
 8001324:	080065a8 	.word	0x080065a8
 8001328:	080065b0 	.word	0x080065b0
 800132c:	080065bc 	.word	0x080065bc
 8001330:	080065c8 	.word	0x080065c8

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b094      	sub	sp, #80	; 0x50
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133e:	2228      	movs	r2, #40	; 0x28
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f003 feca 	bl	80050dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001364:	2301      	movs	r3, #1
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001372:	2301      	movs	r3, #1
 8001374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001376:	2302      	movs	r3, #2
 8001378:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001380:	2300      	movs	r3, #0
 8001382:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001384:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fabd 	bl	8003908 <HAL_RCC_OscConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001394:	f000 f980 	bl	8001698 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001398:	230f      	movs	r3, #15
 800139a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139c:	2302      	movs	r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 fd27 	bl	8003e08 <HAL_RCC_ClockConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80013c0:	f000 f96a 	bl	8001698 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013c4:	2302      	movs	r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 feb6 	bl	8004140 <HAL_RCCEx_PeriphCLKConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80013da:	f000 f95d 	bl	8001698 <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	; 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_ADC1_Init+0x74>)
 80013fa:	4a19      	ldr	r2, [pc, #100]	; (8001460 <MX_ADC1_Init+0x78>)
 80013fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_ADC1_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_ADC1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_ADC1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_ADC1_Init+0x74>)
 8001412:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001416:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_ADC1_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_ADC1_Init+0x74>)
 8001420:	2201      	movs	r2, #1
 8001422:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001424:	480d      	ldr	r0, [pc, #52]	; (800145c <MX_ADC1_Init+0x74>)
 8001426:	f000 fc0f 	bl	8001c48 <HAL_ADC_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001430:	f000 f932 	bl	8001698 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001434:	2301      	movs	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001438:	2301      	movs	r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_ADC1_Init+0x74>)
 8001446:	f000 feb7 	bl	80021b8 <HAL_ADC_ConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001450:	f000 f922 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000104 	.word	0x20000104
 8001460:	40012400 	.word	0x40012400

08001464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_I2C1_Init+0x50>)
 800146a:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <MX_I2C1_Init+0x54>)
 800146c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001470:	4a12      	ldr	r2, [pc, #72]	; (80014bc <MX_I2C1_Init+0x58>)
 8001472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_I2C1_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001486:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <MX_I2C1_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MX_I2C1_Init+0x50>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_I2C1_Init+0x50>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_I2C1_Init+0x50>)
 80014a2:	f001 fa75 	bl	8002990 <HAL_I2C_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014ac:	f000 f8f4 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200000b0 	.word	0x200000b0
 80014b8:	40005400 	.word	0x40005400
 80014bc:	000186a0 	.word	0x000186a0

080014c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b096      	sub	sp, #88	; 0x58
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2220      	movs	r2, #32
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 fdef 	bl	80050dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014fe:	4b4d      	ldr	r3, [pc, #308]	; (8001634 <MX_TIM1_Init+0x174>)
 8001500:	4a4d      	ldr	r2, [pc, #308]	; (8001638 <MX_TIM1_Init+0x178>)
 8001502:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001504:	4b4b      	ldr	r3, [pc, #300]	; (8001634 <MX_TIM1_Init+0x174>)
 8001506:	2200      	movs	r2, #0
 8001508:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150a:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <MX_TIM1_Init+0x174>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001510:	4b48      	ldr	r3, [pc, #288]	; (8001634 <MX_TIM1_Init+0x174>)
 8001512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001516:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001518:	4b46      	ldr	r3, [pc, #280]	; (8001634 <MX_TIM1_Init+0x174>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800151e:	4b45      	ldr	r3, [pc, #276]	; (8001634 <MX_TIM1_Init+0x174>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001524:	4b43      	ldr	r3, [pc, #268]	; (8001634 <MX_TIM1_Init+0x174>)
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800152a:	4842      	ldr	r0, [pc, #264]	; (8001634 <MX_TIM1_Init+0x174>)
 800152c:	f002 ff7a 	bl	8004424 <HAL_TIM_Base_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001536:	f000 f8af 	bl	8001698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001540:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001544:	4619      	mov	r1, r3
 8001546:	483b      	ldr	r0, [pc, #236]	; (8001634 <MX_TIM1_Init+0x174>)
 8001548:	f003 f99a 	bl	8004880 <HAL_TIM_ConfigClockSource>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001552:	f000 f8a1 	bl	8001698 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001556:	4837      	ldr	r0, [pc, #220]	; (8001634 <MX_TIM1_Init+0x174>)
 8001558:	f002 ff8f 	bl	800447a <HAL_TIM_PWM_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001562:	f000 f899 	bl	8001698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800156e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001572:	4619      	mov	r1, r3
 8001574:	482f      	ldr	r0, [pc, #188]	; (8001634 <MX_TIM1_Init+0x174>)
 8001576:	f003 fcdf 	bl	8004f38 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001580:	f000 f88a 	bl	8001698 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001584:	2360      	movs	r3, #96	; 0x60
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001588:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4822      	ldr	r0, [pc, #136]	; (8001634 <MX_TIM1_Init+0x174>)
 80015ac:	f003 f8a2 	bl	80046f4 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80015b6:	f000 f86f 	bl	8001698 <Error_Handler>
  }
  sConfigOC.Pulse = 250;
 80015ba:	23fa      	movs	r3, #250	; 0xfa
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	2204      	movs	r2, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	481b      	ldr	r0, [pc, #108]	; (8001634 <MX_TIM1_Init+0x174>)
 80015c8:	f003 f894 	bl	80046f4 <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80015d2:	f000 f861 	bl	8001698 <Error_Handler>
  }
  sConfigOC.Pulse = 750;
 80015d6:	f240 23ee 	movw	r3, #750	; 0x2ee
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	2208      	movs	r2, #8
 80015e2:	4619      	mov	r1, r3
 80015e4:	4813      	ldr	r0, [pc, #76]	; (8001634 <MX_TIM1_Init+0x174>)
 80015e6:	f003 f885 	bl	80046f4 <HAL_TIM_PWM_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80015f0:	f000 f852 	bl	8001698 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	4807      	ldr	r0, [pc, #28]	; (8001634 <MX_TIM1_Init+0x174>)
 8001618:	f003 fcd2 	bl	8004fc0 <HAL_TIMEx_ConfigBreakDeadTime>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 8001622:	f000 f839 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <MX_TIM1_Init+0x174>)
 8001628:	f000 f916 	bl	8001858 <HAL_TIM_MspPostInit>

}
 800162c:	bf00      	nop
 800162e:	3758      	adds	r7, #88	; 0x58
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000134 	.word	0x20000134
 8001638:	40012c00 	.word	0x40012c00

0800163c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_GPIO_Init+0x58>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	4a13      	ldr	r2, [pc, #76]	; (8001694 <MX_GPIO_Init+0x58>)
 8001648:	f043 0320 	orr.w	r3, r3, #32
 800164c:	6193      	str	r3, [r2, #24]
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_GPIO_Init+0x58>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f003 0320 	and.w	r3, r3, #32
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_GPIO_Init+0x58>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <MX_GPIO_Init+0x58>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6193      	str	r3, [r2, #24]
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_GPIO_Init+0x58>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_GPIO_Init+0x58>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	4a07      	ldr	r2, [pc, #28]	; (8001694 <MX_GPIO_Init+0x58>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	6193      	str	r3, [r2, #24]
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <MX_GPIO_Init+0x58>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]

}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_MspInit+0x5c>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <HAL_MspInit+0x5c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6193      	str	r3, [r2, #24]
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_MspInit+0x5c>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x5c>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_MspInit+0x5c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_MspInit+0x5c>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_MspInit+0x60>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_MspInit+0x60>)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000

08001708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a14      	ldr	r2, [pc, #80]	; (8001774 <HAL_ADC_MspInit+0x6c>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d121      	bne.n	800176c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_ADC_MspInit+0x70>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a12      	ldr	r2, [pc, #72]	; (8001778 <HAL_ADC_MspInit+0x70>)
 800172e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_ADC_MspInit+0x70>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_ADC_MspInit+0x70>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <HAL_ADC_MspInit+0x70>)
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	6193      	str	r3, [r2, #24]
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_ADC_MspInit+0x70>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001758:	2302      	movs	r3, #2
 800175a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175c:	2303      	movs	r3, #3
 800175e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <HAL_ADC_MspInit+0x74>)
 8001768:	f000 ffb8 	bl	80026dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40012400 	.word	0x40012400
 8001778:	40021000 	.word	0x40021000
 800177c:	40010800 	.word	0x40010800

08001780 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a15      	ldr	r2, [pc, #84]	; (80017f0 <HAL_I2C_MspInit+0x70>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d123      	bne.n	80017e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_I2C_MspInit+0x74>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <HAL_I2C_MspInit+0x74>)
 80017a6:	f043 0308 	orr.w	r3, r3, #8
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_I2C_MspInit+0x74>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017b8:	23c0      	movs	r3, #192	; 0xc0
 80017ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017bc:	2312      	movs	r3, #18
 80017be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	4619      	mov	r1, r3
 80017ca:	480b      	ldr	r0, [pc, #44]	; (80017f8 <HAL_I2C_MspInit+0x78>)
 80017cc:	f000 ff86 	bl	80026dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_I2C_MspInit+0x74>)
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_I2C_MspInit+0x74>)
 80017d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017da:	61d3      	str	r3, [r2, #28]
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_I2C_MspInit+0x74>)
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017e8:	bf00      	nop
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40005400 	.word	0x40005400
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010c00 	.word	0x40010c00

080017fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a11      	ldr	r2, [pc, #68]	; (8001850 <HAL_TIM_Base_MspInit+0x54>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d11b      	bne.n	8001846 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_TIM_Base_MspInit+0x58>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	4a10      	ldr	r2, [pc, #64]	; (8001854 <HAL_TIM_Base_MspInit+0x58>)
 8001814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001818:	6193      	str	r3, [r2, #24]
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_TIM_Base_MspInit+0x58>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2018      	movs	r0, #24
 800182c:	f000 ff1f 	bl	800266e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001830:	2018      	movs	r0, #24
 8001832:	f000 ff38 	bl	80026a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	2019      	movs	r0, #25
 800183c:	f000 ff17 	bl	800266e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001840:	2019      	movs	r0, #25
 8001842:	f000 ff30 	bl	80026a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40012c00 	.word	0x40012c00
 8001854:	40021000 	.word	0x40021000

08001858 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a25      	ldr	r2, [pc, #148]	; (8001908 <HAL_TIM_MspPostInit+0xb0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d142      	bne.n	80018fe <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4b24      	ldr	r3, [pc, #144]	; (800190c <HAL_TIM_MspPostInit+0xb4>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a23      	ldr	r2, [pc, #140]	; (800190c <HAL_TIM_MspPostInit+0xb4>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <HAL_TIM_MspPostInit+0xb4>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_TIM_MspPostInit+0xb4>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a1d      	ldr	r2, [pc, #116]	; (800190c <HAL_TIM_MspPostInit+0xb4>)
 8001896:	f043 0308 	orr.w	r3, r3, #8
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_TIM_MspPostInit+0xb4>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0308 	and.w	r3, r3, #8
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80018a8:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80018ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2302      	movs	r3, #2
 80018b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4814      	ldr	r0, [pc, #80]	; (8001910 <HAL_TIM_MspPostInit+0xb8>)
 80018be:	f000 ff0d 	bl	80026dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018c2:	2303      	movs	r3, #3
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2302      	movs	r3, #2
 80018cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	480f      	ldr	r0, [pc, #60]	; (8001914 <HAL_TIM_MspPostInit+0xbc>)
 80018d6:	f000 ff01 	bl	80026dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_TIM_MspPostInit+0xc0>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_TIM_MspPostInit+0xc0>)
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018fe:	bf00      	nop
 8001900:	3728      	adds	r7, #40	; 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40021000 	.word	0x40021000
 8001910:	40010800 	.word	0x40010800
 8001914:	40010c00 	.word	0x40010c00
 8001918:	40010000 	.word	0x40010000

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <HardFault_Handler+0x4>

0800192e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <MemManage_Handler+0x4>

08001934 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <BusFault_Handler+0x4>

0800193a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <UsageFault_Handler+0x4>

08001940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001968:	f000 f930 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM1_BRK_IRQHandler+0x10>)
 8001976:	f002 fdb4 	bl	80044e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000134 	.word	0x20000134

08001984 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <TIM1_UP_IRQHandler+0x10>)
 800198a:	f002 fdaa 	bl	80044e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000134 	.word	0x20000134

08001998 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e00a      	b.n	80019c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019aa:	f3af 8000 	nop.w
 80019ae:	4601      	mov	r1, r0
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	b2ca      	uxtb	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbf0      	blt.n	80019aa <_read+0x12>
	}

return len;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <_sbrk+0x50>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x16>
		heap_end = &end;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <_sbrk+0x50>)
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <_sbrk+0x54>)
 80019e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <_sbrk+0x50>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <_sbrk+0x50>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4413      	add	r3, r2
 80019f8:	466a      	mov	r2, sp
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d907      	bls.n	8001a0e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80019fe:	f003 fb43 	bl	8005088 <__errno>
 8001a02:	4602      	mov	r2, r0
 8001a04:	230c      	movs	r3, #12
 8001a06:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a0c:	e006      	b.n	8001a1c <_sbrk+0x48>
	}

	heap_end += incr;
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <_sbrk+0x50>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a03      	ldr	r2, [pc, #12]	; (8001a24 <_sbrk+0x50>)
 8001a18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200000a4 	.word	0x200000a4
 8001a28:	20000180 	.word	0x20000180

08001a2c <_close>:

int _close(int file)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	return -1;
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a52:	605a      	str	r2, [r3, #4]
	return 0;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <_isatty>:

int _isatty(int file)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	return 1;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <SystemInit+0x5c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <SystemInit+0x5c>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <SystemInit+0x5c>)
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4911      	ldr	r1, [pc, #68]	; (8001ae8 <SystemInit+0x5c>)
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <SystemInit+0x60>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <SystemInit+0x5c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <SystemInit+0x5c>)
 8001aae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <SystemInit+0x5c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SystemInit+0x5c>)
 8001abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <SystemInit+0x5c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <SystemInit+0x5c>)
 8001aca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001ace:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SystemInit+0x5c>)
 8001ad2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001ad6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <SystemInit+0x64>)
 8001ada:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ade:	609a      	str	r2, [r3, #8]
#endif 
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	f8ff0000 	.word	0xf8ff0000
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001af4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001af6:	e003      	b.n	8001b00 <LoopCopyDataInit>

08001af8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001afa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001afc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001afe:	3104      	adds	r1, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b00:	480a      	ldr	r0, [pc, #40]	; (8001b2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b08:	d3f6      	bcc.n	8001af8 <CopyDataInit>
  ldr r2, =_sbss
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b0c:	e002      	b.n	8001b14 <LoopFillZerobss>

08001b0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b10:	f842 3b04 	str.w	r3, [r2], #4

08001b14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b18:	d3f9      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b1a:	f7ff ffb7 	bl	8001a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1e:	f003 fab9 	bl	8005094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b22:	f7ff fb49 	bl	80011b8 <main>
  bx lr
 8001b26:	4770      	bx	lr
  ldr r3, =_sidata
 8001b28:	08006a50 	.word	0x08006a50
  ldr r0, =_sdata
 8001b2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b30:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8001b34:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8001b38:	2000017c 	.word	0x2000017c

08001b3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC1_2_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_Init+0x28>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <HAL_Init+0x28>)
 8001b4a:	f043 0310 	orr.w	r3, r3, #16
 8001b4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b50:	2003      	movs	r0, #3
 8001b52:	f000 fd81 	bl	8002658 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b56:	2000      	movs	r0, #0
 8001b58:	f000 f808 	bl	8001b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b5c:	f7ff fda2 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40022000 	.word	0x40022000

08001b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_InitTick+0x54>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_InitTick+0x58>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fd99 	bl	80026c2 <HAL_SYSTICK_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00e      	b.n	8001bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b0f      	cmp	r3, #15
 8001b9e:	d80a      	bhi.n	8001bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ba8:	f000 fd61 	bl	800266e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bac:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <HAL_InitTick+0x5c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	2000000c 	.word	0x2000000c
 8001bc4:	20000014 	.word	0x20000014
 8001bc8:	20000010 	.word	0x20000010

08001bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_IncTick+0x1c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x20>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a03      	ldr	r2, [pc, #12]	; (8001bec <HAL_IncTick+0x20>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	20000014 	.word	0x20000014
 8001bec:	20000174 	.word	0x20000174

08001bf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <HAL_GetTick+0x10>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	20000174 	.word	0x20000174

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff fff0 	bl	8001bf0 <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c1c:	d005      	beq.n	8001c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_Delay+0x40>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffe0 	bl	8001bf0 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f7      	bhi.n	8001c2c <HAL_Delay+0x28>
  {
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000014 	.word	0x20000014

08001c48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0be      	b.n	8001de8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fd3e 	bl	8001708 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fbdd 	bl	800244c <ADC_ConversionStop_Disable>
 8001c92:	4603      	mov	r3, r0
 8001c94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 8099 	bne.w	8001dd6 <HAL_ADC_Init+0x18e>
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 8095 	bne.w	8001dd6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cb4:	f023 0302 	bic.w	r3, r3, #2
 8001cb8:	f043 0202 	orr.w	r2, r3, #2
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7b1b      	ldrb	r3, [r3, #12]
 8001cce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ce0:	d003      	beq.n	8001cea <HAL_ADC_Init+0xa2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d102      	bne.n	8001cf0 <HAL_ADC_Init+0xa8>
 8001cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cee:	e000      	b.n	8001cf2 <HAL_ADC_Init+0xaa>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7d1b      	ldrb	r3, [r3, #20]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d119      	bne.n	8001d34 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7b1b      	ldrb	r3, [r3, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	035a      	lsls	r2, r3, #13
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	e00b      	b.n	8001d34 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	f043 0220 	orr.w	r2, r3, #32
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	f043 0201 	orr.w	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	4b28      	ldr	r3, [pc, #160]	; (8001df0 <HAL_ADC_Init+0x1a8>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d64:	d003      	beq.n	8001d6e <HAL_ADC_Init+0x126>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d104      	bne.n	8001d78 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	051b      	lsls	r3, r3, #20
 8001d76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_ADC_Init+0x1ac>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d10b      	bne.n	8001db4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	f043 0201 	orr.w	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001db2:	e018      	b.n	8001de6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db8:	f023 0312 	bic.w	r3, r3, #18
 8001dbc:	f043 0210 	orr.w	r2, r3, #16
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dd4:	e007      	b.n	8001de6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	f043 0210 	orr.w	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	ffe1f7fd 	.word	0xffe1f7fd
 8001df4:	ff1f0efe 	.word	0xff1f0efe

08001df8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_Start+0x1a>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e098      	b.n	8001f44 <HAL_ADC_Start+0x14c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fac4 	bl	80023a8 <ADC_Enable>
 8001e20:	4603      	mov	r3, r0
 8001e22:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f040 8087 	bne.w	8001f3a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a41      	ldr	r2, [pc, #260]	; (8001f4c <HAL_ADC_Start+0x154>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d105      	bne.n	8001e56 <HAL_ADC_Start+0x5e>
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_ADC_Start+0x158>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d115      	bne.n	8001e82 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d026      	beq.n	8001ebe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e80:	e01d      	b.n	8001ebe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a2f      	ldr	r2, [pc, #188]	; (8001f50 <HAL_ADC_Start+0x158>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d004      	beq.n	8001ea2 <HAL_ADC_Start+0xaa>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2b      	ldr	r2, [pc, #172]	; (8001f4c <HAL_ADC_Start+0x154>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d10d      	bne.n	8001ebe <HAL_ADC_Start+0xc6>
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <HAL_ADC_Start+0x158>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eb6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	f023 0206 	bic.w	r2, r3, #6
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ed6:	e002      	b.n	8001ede <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f06f 0202 	mvn.w	r2, #2
 8001eee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001efa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001efe:	d113      	bne.n	8001f28 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f04:	4a11      	ldr	r2, [pc, #68]	; (8001f4c <HAL_ADC_Start+0x154>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d105      	bne.n	8001f16 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_ADC_Start+0x158>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d108      	bne.n	8001f28 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	e00c      	b.n	8001f42 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e003      	b.n	8001f42 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40012800 	.word	0x40012800
 8001f50:	40012400 	.word	0x40012400

08001f54 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_ADC_Stop+0x1a>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e01a      	b.n	8001fa4 <HAL_ADC_Stop+0x50>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fa68 	bl	800244c <ADC_ConversionStop_Disable>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d109      	bne.n	8001f9a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001fc2:	f7ff fe15 	bl	8001bf0 <HAL_GetTick>
 8001fc6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00b      	beq.n	8001fee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fda:	f043 0220 	orr.w	r2, r3, #32
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0c8      	b.n	8002180 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d12a      	bne.n	8002052 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002006:	2b00      	cmp	r3, #0
 8002008:	d123      	bne.n	8002052 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800200a:	e01a      	b.n	8002042 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002012:	d016      	beq.n	8002042 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_ADC_PollForConversion+0x7e>
 800201a:	f7ff fde9 	bl	8001bf0 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d20b      	bcs.n	8002042 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	f043 0204 	orr.w	r2, r3, #4
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e09e      	b.n	8002180 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0dd      	beq.n	800200c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002050:	e06c      	b.n	800212c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002052:	4b4d      	ldr	r3, [pc, #308]	; (8002188 <HAL_ADC_PollForConversion+0x1dc>)
 8002054:	681c      	ldr	r4, [r3, #0]
 8002056:	2002      	movs	r0, #2
 8002058:	f002 f928 	bl	80042ac <HAL_RCCEx_GetPeriphCLKFreq>
 800205c:	4603      	mov	r3, r0
 800205e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6919      	ldr	r1, [r3, #16]
 8002068:	4b48      	ldr	r3, [pc, #288]	; (800218c <HAL_ADC_PollForConversion+0x1e0>)
 800206a:	400b      	ands	r3, r1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d118      	bne.n	80020a2 <HAL_ADC_PollForConversion+0xf6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68d9      	ldr	r1, [r3, #12]
 8002076:	4b46      	ldr	r3, [pc, #280]	; (8002190 <HAL_ADC_PollForConversion+0x1e4>)
 8002078:	400b      	ands	r3, r1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d111      	bne.n	80020a2 <HAL_ADC_PollForConversion+0xf6>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6919      	ldr	r1, [r3, #16]
 8002084:	4b43      	ldr	r3, [pc, #268]	; (8002194 <HAL_ADC_PollForConversion+0x1e8>)
 8002086:	400b      	ands	r3, r1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d108      	bne.n	800209e <HAL_ADC_PollForConversion+0xf2>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68d9      	ldr	r1, [r3, #12]
 8002092:	4b41      	ldr	r3, [pc, #260]	; (8002198 <HAL_ADC_PollForConversion+0x1ec>)
 8002094:	400b      	ands	r3, r1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_PollForConversion+0xf2>
 800209a:	2314      	movs	r3, #20
 800209c:	e020      	b.n	80020e0 <HAL_ADC_PollForConversion+0x134>
 800209e:	2329      	movs	r3, #41	; 0x29
 80020a0:	e01e      	b.n	80020e0 <HAL_ADC_PollForConversion+0x134>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6919      	ldr	r1, [r3, #16]
 80020a8:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <HAL_ADC_PollForConversion+0x1e8>)
 80020aa:	400b      	ands	r3, r1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d106      	bne.n	80020be <HAL_ADC_PollForConversion+0x112>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68d9      	ldr	r1, [r3, #12]
 80020b6:	4b38      	ldr	r3, [pc, #224]	; (8002198 <HAL_ADC_PollForConversion+0x1ec>)
 80020b8:	400b      	ands	r3, r1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00d      	beq.n	80020da <HAL_ADC_PollForConversion+0x12e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6919      	ldr	r1, [r3, #16]
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <HAL_ADC_PollForConversion+0x1f0>)
 80020c6:	400b      	ands	r3, r1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d108      	bne.n	80020de <HAL_ADC_PollForConversion+0x132>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68d9      	ldr	r1, [r3, #12]
 80020d2:	4b32      	ldr	r3, [pc, #200]	; (800219c <HAL_ADC_PollForConversion+0x1f0>)
 80020d4:	400b      	ands	r3, r1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_PollForConversion+0x132>
 80020da:	2354      	movs	r3, #84	; 0x54
 80020dc:	e000      	b.n	80020e0 <HAL_ADC_PollForConversion+0x134>
 80020de:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80020e0:	fb02 f303 	mul.w	r3, r2, r3
 80020e4:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020e6:	e01d      	b.n	8002124 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ee:	d016      	beq.n	800211e <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_ADC_PollForConversion+0x15a>
 80020f6:	f7ff fd7b 	bl	8001bf0 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d20b      	bcs.n	800211e <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	f043 0204 	orr.w	r2, r3, #4
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e030      	b.n	8002180 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3301      	adds	r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d8dd      	bhi.n	80020e8 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0212 	mvn.w	r2, #18
 8002134:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800214c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002150:	d115      	bne.n	800217e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002156:	2b00      	cmp	r3, #0
 8002158:	d111      	bne.n	800217e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}
 8002188:	2000000c 	.word	0x2000000c
 800218c:	24924924 	.word	0x24924924
 8002190:	00924924 	.word	0x00924924
 8002194:	12492492 	.word	0x12492492
 8002198:	00492492 	.word	0x00492492
 800219c:	00249249 	.word	0x00249249

080021a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x20>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e0dc      	b.n	8002392 <HAL_ADC_ConfigChannel+0x1da>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b06      	cmp	r3, #6
 80021e6:	d81c      	bhi.n	8002222 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	3b05      	subs	r3, #5
 80021fa:	221f      	movs	r2, #31
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	4019      	ands	r1, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	3b05      	subs	r3, #5
 8002214:	fa00 f203 	lsl.w	r2, r0, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	635a      	str	r2, [r3, #52]	; 0x34
 8002220:	e03c      	b.n	800229c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d81c      	bhi.n	8002264 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	3b23      	subs	r3, #35	; 0x23
 800223c:	221f      	movs	r2, #31
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	4019      	ands	r1, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3b23      	subs	r3, #35	; 0x23
 8002256:	fa00 f203 	lsl.w	r2, r0, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	631a      	str	r2, [r3, #48]	; 0x30
 8002262:	e01b      	b.n	800229c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b41      	subs	r3, #65	; 0x41
 8002276:	221f      	movs	r2, #31
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	4019      	ands	r1, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	3b41      	subs	r3, #65	; 0x41
 8002290:	fa00 f203 	lsl.w	r2, r0, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b09      	cmp	r3, #9
 80022a2:	d91c      	bls.n	80022de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68d9      	ldr	r1, [r3, #12]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	3b1e      	subs	r3, #30
 80022b6:	2207      	movs	r2, #7
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	4019      	ands	r1, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6898      	ldr	r0, [r3, #8]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	3b1e      	subs	r3, #30
 80022d0:	fa00 f203 	lsl.w	r2, r0, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	e019      	b.n	8002312 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6919      	ldr	r1, [r3, #16]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	2207      	movs	r2, #7
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4019      	ands	r1, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6898      	ldr	r0, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	fa00 f203 	lsl.w	r2, r0, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b10      	cmp	r3, #16
 8002318:	d003      	beq.n	8002322 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800231e:	2b11      	cmp	r3, #17
 8002320:	d132      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a1d      	ldr	r2, [pc, #116]	; (800239c <HAL_ADC_ConfigChannel+0x1e4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d125      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d126      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002348:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b10      	cmp	r3, #16
 8002350:	d11a      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	0c9a      	lsrs	r2, r3, #18
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002368:	e002      	b.n	8002370 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	3b01      	subs	r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f9      	bne.n	800236a <HAL_ADC_ConfigChannel+0x1b2>
 8002376:	e007      	b.n	8002388 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	f043 0220 	orr.w	r2, r3, #32
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40012400 	.word	0x40012400
 80023a0:	2000000c 	.word	0x2000000c
 80023a4:	431bde83 	.word	0x431bde83

080023a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d039      	beq.n	800243a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <ADC_Enable+0x9c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <ADC_Enable+0xa0>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	0c9b      	lsrs	r3, r3, #18
 80023e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023e4:	e002      	b.n	80023ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f9      	bne.n	80023e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023f2:	f7ff fbfd 	bl	8001bf0 <HAL_GetTick>
 80023f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023f8:	e018      	b.n	800242c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023fa:	f7ff fbf9 	bl	8001bf0 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d911      	bls.n	800242c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	f043 0210 	orr.w	r2, r3, #16
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e007      	b.n	800243c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b01      	cmp	r3, #1
 8002438:	d1df      	bne.n	80023fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	2000000c 	.word	0x2000000c
 8002448:	431bde83 	.word	0x431bde83

0800244c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d127      	bne.n	80024b6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002476:	f7ff fbbb 	bl	8001bf0 <HAL_GetTick>
 800247a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800247c:	e014      	b.n	80024a8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800247e:	f7ff fbb7 	bl	8001bf0 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d90d      	bls.n	80024a8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	f043 0210 	orr.w	r2, r3, #16
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e007      	b.n	80024b8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d0e3      	beq.n	800247e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <__NVIC_SetPriorityGrouping>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024dc:	4013      	ands	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f2:	4a04      	ldr	r2, [pc, #16]	; (8002504 <__NVIC_SetPriorityGrouping+0x44>)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60d3      	str	r3, [r2, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <__NVIC_GetPriorityGrouping>:
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <__NVIC_GetPriorityGrouping+0x18>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	f003 0307 	and.w	r3, r3, #7
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_EnableIRQ>:
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db0b      	blt.n	800254e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	4906      	ldr	r1, [pc, #24]	; (8002558 <__NVIC_EnableIRQ+0x34>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2001      	movs	r0, #1
 8002546:	fa00 f202 	lsl.w	r2, r0, r2
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100

0800255c <__NVIC_SetPriority>:
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	6039      	str	r1, [r7, #0]
 8002566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256c:	2b00      	cmp	r3, #0
 800256e:	db0a      	blt.n	8002586 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	b2da      	uxtb	r2, r3
 8002574:	490c      	ldr	r1, [pc, #48]	; (80025a8 <__NVIC_SetPriority+0x4c>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	0112      	lsls	r2, r2, #4
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	440b      	add	r3, r1
 8002580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002584:	e00a      	b.n	800259c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	4908      	ldr	r1, [pc, #32]	; (80025ac <__NVIC_SetPriority+0x50>)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	3b04      	subs	r3, #4
 8002594:	0112      	lsls	r2, r2, #4
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	440b      	add	r3, r1
 800259a:	761a      	strb	r2, [r3, #24]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000e100 	.word	0xe000e100
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <NVIC_EncodePriority>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	b089      	sub	sp, #36	; 0x24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f1c3 0307 	rsb	r3, r3, #7
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	bf28      	it	cs
 80025ce:	2304      	movcs	r3, #4
 80025d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2b06      	cmp	r3, #6
 80025d8:	d902      	bls.n	80025e0 <NVIC_EncodePriority+0x30>
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3b03      	subs	r3, #3
 80025de:	e000      	b.n	80025e2 <NVIC_EncodePriority+0x32>
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	401a      	ands	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43d9      	mvns	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	4313      	orrs	r3, r2
}
 800260a:	4618      	mov	r0, r3
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <SysTick_Config>:
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002624:	d301      	bcc.n	800262a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002626:	2301      	movs	r3, #1
 8002628:	e00f      	b.n	800264a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262a:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <SysTick_Config+0x40>)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002632:	210f      	movs	r1, #15
 8002634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002638:	f7ff ff90 	bl	800255c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <SysTick_Config+0x40>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002642:	4b04      	ldr	r3, [pc, #16]	; (8002654 <SysTick_Config+0x40>)
 8002644:	2207      	movs	r2, #7
 8002646:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	e000e010 	.word	0xe000e010

08002658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff2d 	bl	80024c0 <__NVIC_SetPriorityGrouping>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002680:	f7ff ff42 	bl	8002508 <__NVIC_GetPriorityGrouping>
 8002684:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	6978      	ldr	r0, [r7, #20]
 800268c:	f7ff ff90 	bl	80025b0 <NVIC_EncodePriority>
 8002690:	4602      	mov	r2, r0
 8002692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff5f 	bl	800255c <__NVIC_SetPriority>
}
 800269e:	bf00      	nop
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff35 	bl	8002524 <__NVIC_EnableIRQ>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ffa2 	bl	8002614 <SysTick_Config>
 80026d0:	4603      	mov	r3, r0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026dc:	b480      	push	{r7}
 80026de:	b08b      	sub	sp, #44	; 0x2c
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ee:	e127      	b.n	8002940 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026f0:	2201      	movs	r2, #1
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	429a      	cmp	r2, r3
 800270a:	f040 8116 	bne.w	800293a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b12      	cmp	r3, #18
 8002714:	d034      	beq.n	8002780 <HAL_GPIO_Init+0xa4>
 8002716:	2b12      	cmp	r3, #18
 8002718:	d80d      	bhi.n	8002736 <HAL_GPIO_Init+0x5a>
 800271a:	2b02      	cmp	r3, #2
 800271c:	d02b      	beq.n	8002776 <HAL_GPIO_Init+0x9a>
 800271e:	2b02      	cmp	r3, #2
 8002720:	d804      	bhi.n	800272c <HAL_GPIO_Init+0x50>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d031      	beq.n	800278a <HAL_GPIO_Init+0xae>
 8002726:	2b01      	cmp	r3, #1
 8002728:	d01c      	beq.n	8002764 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800272a:	e048      	b.n	80027be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800272c:	2b03      	cmp	r3, #3
 800272e:	d043      	beq.n	80027b8 <HAL_GPIO_Init+0xdc>
 8002730:	2b11      	cmp	r3, #17
 8002732:	d01b      	beq.n	800276c <HAL_GPIO_Init+0x90>
          break;
 8002734:	e043      	b.n	80027be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002736:	4a89      	ldr	r2, [pc, #548]	; (800295c <HAL_GPIO_Init+0x280>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d026      	beq.n	800278a <HAL_GPIO_Init+0xae>
 800273c:	4a87      	ldr	r2, [pc, #540]	; (800295c <HAL_GPIO_Init+0x280>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d806      	bhi.n	8002750 <HAL_GPIO_Init+0x74>
 8002742:	4a87      	ldr	r2, [pc, #540]	; (8002960 <HAL_GPIO_Init+0x284>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d020      	beq.n	800278a <HAL_GPIO_Init+0xae>
 8002748:	4a86      	ldr	r2, [pc, #536]	; (8002964 <HAL_GPIO_Init+0x288>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01d      	beq.n	800278a <HAL_GPIO_Init+0xae>
          break;
 800274e:	e036      	b.n	80027be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002750:	4a85      	ldr	r2, [pc, #532]	; (8002968 <HAL_GPIO_Init+0x28c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d019      	beq.n	800278a <HAL_GPIO_Init+0xae>
 8002756:	4a85      	ldr	r2, [pc, #532]	; (800296c <HAL_GPIO_Init+0x290>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d016      	beq.n	800278a <HAL_GPIO_Init+0xae>
 800275c:	4a84      	ldr	r2, [pc, #528]	; (8002970 <HAL_GPIO_Init+0x294>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0xae>
          break;
 8002762:	e02c      	b.n	80027be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	623b      	str	r3, [r7, #32]
          break;
 800276a:	e028      	b.n	80027be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	3304      	adds	r3, #4
 8002772:	623b      	str	r3, [r7, #32]
          break;
 8002774:	e023      	b.n	80027be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	3308      	adds	r3, #8
 800277c:	623b      	str	r3, [r7, #32]
          break;
 800277e:	e01e      	b.n	80027be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	330c      	adds	r3, #12
 8002786:	623b      	str	r3, [r7, #32]
          break;
 8002788:	e019      	b.n	80027be <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002792:	2304      	movs	r3, #4
 8002794:	623b      	str	r3, [r7, #32]
          break;
 8002796:	e012      	b.n	80027be <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a0:	2308      	movs	r3, #8
 80027a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	611a      	str	r2, [r3, #16]
          break;
 80027aa:	e008      	b.n	80027be <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ac:	2308      	movs	r3, #8
 80027ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	615a      	str	r2, [r3, #20]
          break;
 80027b6:	e002      	b.n	80027be <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
          break;
 80027bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	2bff      	cmp	r3, #255	; 0xff
 80027c2:	d801      	bhi.n	80027c8 <HAL_GPIO_Init+0xec>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	e001      	b.n	80027cc <HAL_GPIO_Init+0xf0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2bff      	cmp	r3, #255	; 0xff
 80027d2:	d802      	bhi.n	80027da <HAL_GPIO_Init+0xfe>
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	e002      	b.n	80027e0 <HAL_GPIO_Init+0x104>
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	3b08      	subs	r3, #8
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	210f      	movs	r1, #15
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	401a      	ands	r2, r3
 80027f2:	6a39      	ldr	r1, [r7, #32]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	fa01 f303 	lsl.w	r3, r1, r3
 80027fa:	431a      	orrs	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8096 	beq.w	800293a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800280e:	4b59      	ldr	r3, [pc, #356]	; (8002974 <HAL_GPIO_Init+0x298>)
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	4a58      	ldr	r2, [pc, #352]	; (8002974 <HAL_GPIO_Init+0x298>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6193      	str	r3, [r2, #24]
 800281a:	4b56      	ldr	r3, [pc, #344]	; (8002974 <HAL_GPIO_Init+0x298>)
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002826:	4a54      	ldr	r2, [pc, #336]	; (8002978 <HAL_GPIO_Init+0x29c>)
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002832:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	220f      	movs	r2, #15
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4013      	ands	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4b      	ldr	r2, [pc, #300]	; (800297c <HAL_GPIO_Init+0x2a0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d013      	beq.n	800287a <HAL_GPIO_Init+0x19e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4a      	ldr	r2, [pc, #296]	; (8002980 <HAL_GPIO_Init+0x2a4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00d      	beq.n	8002876 <HAL_GPIO_Init+0x19a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a49      	ldr	r2, [pc, #292]	; (8002984 <HAL_GPIO_Init+0x2a8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <HAL_GPIO_Init+0x196>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a48      	ldr	r2, [pc, #288]	; (8002988 <HAL_GPIO_Init+0x2ac>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d101      	bne.n	800286e <HAL_GPIO_Init+0x192>
 800286a:	2303      	movs	r3, #3
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x1a0>
 800286e:	2304      	movs	r3, #4
 8002870:	e004      	b.n	800287c <HAL_GPIO_Init+0x1a0>
 8002872:	2302      	movs	r3, #2
 8002874:	e002      	b.n	800287c <HAL_GPIO_Init+0x1a0>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_GPIO_Init+0x1a0>
 800287a:	2300      	movs	r3, #0
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	f002 0203 	and.w	r2, r2, #3
 8002882:	0092      	lsls	r2, r2, #2
 8002884:	4093      	lsls	r3, r2
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800288c:	493a      	ldr	r1, [pc, #232]	; (8002978 <HAL_GPIO_Init+0x29c>)
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	3302      	adds	r3, #2
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028a6:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_GPIO_Init+0x2b0>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4938      	ldr	r1, [pc, #224]	; (800298c <HAL_GPIO_Init+0x2b0>)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	600b      	str	r3, [r1, #0]
 80028b2:	e006      	b.n	80028c2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <HAL_GPIO_Init+0x2b0>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	4933      	ldr	r1, [pc, #204]	; (800298c <HAL_GPIO_Init+0x2b0>)
 80028be:	4013      	ands	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028ce:	4b2f      	ldr	r3, [pc, #188]	; (800298c <HAL_GPIO_Init+0x2b0>)
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	492e      	ldr	r1, [pc, #184]	; (800298c <HAL_GPIO_Init+0x2b0>)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
 80028da:	e006      	b.n	80028ea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028dc:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_GPIO_Init+0x2b0>)
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	4929      	ldr	r1, [pc, #164]	; (800298c <HAL_GPIO_Init+0x2b0>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028f6:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_GPIO_Init+0x2b0>)
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	4924      	ldr	r1, [pc, #144]	; (800298c <HAL_GPIO_Init+0x2b0>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
 8002902:	e006      	b.n	8002912 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002904:	4b21      	ldr	r3, [pc, #132]	; (800298c <HAL_GPIO_Init+0x2b0>)
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	43db      	mvns	r3, r3
 800290c:	491f      	ldr	r1, [pc, #124]	; (800298c <HAL_GPIO_Init+0x2b0>)
 800290e:	4013      	ands	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d006      	beq.n	800292c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_GPIO_Init+0x2b0>)
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	491a      	ldr	r1, [pc, #104]	; (800298c <HAL_GPIO_Init+0x2b0>)
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	60cb      	str	r3, [r1, #12]
 800292a:	e006      	b.n	800293a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800292c:	4b17      	ldr	r3, [pc, #92]	; (800298c <HAL_GPIO_Init+0x2b0>)
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	43db      	mvns	r3, r3
 8002934:	4915      	ldr	r1, [pc, #84]	; (800298c <HAL_GPIO_Init+0x2b0>)
 8002936:	4013      	ands	r3, r2
 8002938:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	3301      	adds	r3, #1
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	f47f aed0 	bne.w	80026f0 <HAL_GPIO_Init+0x14>
  }
}
 8002950:	bf00      	nop
 8002952:	372c      	adds	r7, #44	; 0x2c
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	10210000 	.word	0x10210000
 8002960:	10110000 	.word	0x10110000
 8002964:	10120000 	.word	0x10120000
 8002968:	10310000 	.word	0x10310000
 800296c:	10320000 	.word	0x10320000
 8002970:	10220000 	.word	0x10220000
 8002974:	40021000 	.word	0x40021000
 8002978:	40010000 	.word	0x40010000
 800297c:	40010800 	.word	0x40010800
 8002980:	40010c00 	.word	0x40010c00
 8002984:	40011000 	.word	0x40011000
 8002988:	40011400 	.word	0x40011400
 800298c:	40010400 	.word	0x40010400

08002990 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e11f      	b.n	8002be2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe fee2 	bl	8001780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2224      	movs	r2, #36	; 0x24
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029f4:	f001 fb5e 	bl	80040b4 <HAL_RCC_GetPCLK1Freq>
 80029f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a7b      	ldr	r2, [pc, #492]	; (8002bec <HAL_I2C_Init+0x25c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d807      	bhi.n	8002a14 <HAL_I2C_Init+0x84>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a7a      	ldr	r2, [pc, #488]	; (8002bf0 <HAL_I2C_Init+0x260>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	bf94      	ite	ls
 8002a0c:	2301      	movls	r3, #1
 8002a0e:	2300      	movhi	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e006      	b.n	8002a22 <HAL_I2C_Init+0x92>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a77      	ldr	r2, [pc, #476]	; (8002bf4 <HAL_I2C_Init+0x264>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	bf94      	ite	ls
 8002a1c:	2301      	movls	r3, #1
 8002a1e:	2300      	movhi	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0db      	b.n	8002be2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a72      	ldr	r2, [pc, #456]	; (8002bf8 <HAL_I2C_Init+0x268>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0c9b      	lsrs	r3, r3, #18
 8002a34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a64      	ldr	r2, [pc, #400]	; (8002bec <HAL_I2C_Init+0x25c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d802      	bhi.n	8002a64 <HAL_I2C_Init+0xd4>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	3301      	adds	r3, #1
 8002a62:	e009      	b.n	8002a78 <HAL_I2C_Init+0xe8>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	4a63      	ldr	r2, [pc, #396]	; (8002bfc <HAL_I2C_Init+0x26c>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	099b      	lsrs	r3, r3, #6
 8002a76:	3301      	adds	r3, #1
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4956      	ldr	r1, [pc, #344]	; (8002bec <HAL_I2C_Init+0x25c>)
 8002a94:	428b      	cmp	r3, r1
 8002a96:	d80d      	bhi.n	8002ab4 <HAL_I2C_Init+0x124>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e59      	subs	r1, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	bf38      	it	cc
 8002ab0:	2304      	movcc	r3, #4
 8002ab2:	e04f      	b.n	8002b54 <HAL_I2C_Init+0x1c4>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d111      	bne.n	8002ae0 <HAL_I2C_Init+0x150>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1e58      	subs	r0, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	440b      	add	r3, r1
 8002aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e012      	b.n	8002b06 <HAL_I2C_Init+0x176>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1e58      	subs	r0, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	0099      	lsls	r1, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_Init+0x17e>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e022      	b.n	8002b54 <HAL_I2C_Init+0x1c4>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10e      	bne.n	8002b34 <HAL_I2C_Init+0x1a4>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1e58      	subs	r0, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6859      	ldr	r1, [r3, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	440b      	add	r3, r1
 8002b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b32:	e00f      	b.n	8002b54 <HAL_I2C_Init+0x1c4>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1e58      	subs	r0, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	0099      	lsls	r1, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	6809      	ldr	r1, [r1, #0]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6911      	ldr	r1, [r2, #16]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68d2      	ldr	r2, [r2, #12]
 8002b8e:	4311      	orrs	r1, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	000186a0 	.word	0x000186a0
 8002bf0:	001e847f 	.word	0x001e847f
 8002bf4:	003d08ff 	.word	0x003d08ff
 8002bf8:	431bde83 	.word	0x431bde83
 8002bfc:	10624dd3 	.word	0x10624dd3

08002c00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	817b      	strh	r3, [r7, #10]
 8002c10:	4613      	mov	r3, r2
 8002c12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c14:	f7fe ffec 	bl	8001bf0 <HAL_GetTick>
 8002c18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	f040 80e0 	bne.w	8002de8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2319      	movs	r3, #25
 8002c2e:	2201      	movs	r2, #1
 8002c30:	4970      	ldr	r1, [pc, #448]	; (8002df4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fc8c 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e0d3      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_I2C_Master_Transmit+0x50>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e0cc      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ea>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d007      	beq.n	8002c76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2221      	movs	r2, #33	; 0x21
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2210      	movs	r2, #16
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	893a      	ldrh	r2, [r7, #8]
 8002ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a50      	ldr	r2, [pc, #320]	; (8002df8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cb8:	8979      	ldrh	r1, [r7, #10]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	6a3a      	ldr	r2, [r7, #32]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 faf6 	bl	80032b0 <I2C_MasterRequestWrite>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e08d      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ce4:	e066      	b.n	8002db4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	6a39      	ldr	r1, [r7, #32]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fd06 	bl	80036fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d107      	bne.n	8002d0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06b      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	781a      	ldrb	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d11b      	bne.n	8002d88 <HAL_I2C_Master_Transmit+0x188>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d017      	beq.n	8002d88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	781a      	ldrb	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	6a39      	ldr	r1, [r7, #32]
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fcf6 	bl	800377e <I2C_WaitOnBTFFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00d      	beq.n	8002db4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d107      	bne.n	8002db0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e01a      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d194      	bne.n	8002ce6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e000      	b.n	8002dea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	00100002 	.word	0x00100002
 8002df8:	ffff0000 	.word	0xffff0000

08002dfc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08c      	sub	sp, #48	; 0x30
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	461a      	mov	r2, r3
 8002e08:	460b      	mov	r3, r1
 8002e0a:	817b      	strh	r3, [r7, #10]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e14:	f7fe feec 	bl	8001bf0 <HAL_GetTick>
 8002e18:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	f040 8238 	bne.w	8003298 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2319      	movs	r3, #25
 8002e2e:	2201      	movs	r2, #1
 8002e30:	497e      	ldr	r1, [pc, #504]	; (800302c <HAL_I2C_Master_Receive+0x230>)
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fb8c 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e22b      	b.n	800329a <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_I2C_Master_Receive+0x54>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e224      	b.n	800329a <HAL_I2C_Master_Receive+0x49e>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d007      	beq.n	8002e76 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2222      	movs	r2, #34	; 0x22
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2210      	movs	r2, #16
 8002e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	893a      	ldrh	r2, [r7, #8]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a5e      	ldr	r2, [pc, #376]	; (8003030 <HAL_I2C_Master_Receive+0x234>)
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002eb8:	8979      	ldrh	r1, [r7, #10]
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fa78 	bl	80033b4 <I2C_MasterRequestRead>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e1e5      	b.n	800329a <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d113      	bne.n	8002efe <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e1b9      	b.n	8003272 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d11d      	bne.n	8002f42 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f14:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f16:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f3e:	b662      	cpsie	i
 8002f40:	e197      	b.n	8003272 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d11d      	bne.n	8002f86 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f5a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f82:	b662      	cpsie	i
 8002f84:	e175      	b.n	8003272 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002fac:	e161      	b.n	8003272 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	f200 811a 	bhi.w	80031ec <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d123      	bne.n	8003008 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 fc1b 	bl	8003800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e162      	b.n	800329a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003006:	e134      	b.n	8003272 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300c:	2b02      	cmp	r3, #2
 800300e:	d150      	bne.n	80030b2 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	2200      	movs	r2, #0
 8003018:	4906      	ldr	r1, [pc, #24]	; (8003034 <HAL_I2C_Master_Receive+0x238>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fa98 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e137      	b.n	800329a <HAL_I2C_Master_Receive+0x49e>
 800302a:	bf00      	nop
 800302c:	00100002 	.word	0x00100002
 8003030:	ffff0000 	.word	0xffff0000
 8003034:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003038:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003048:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800307c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030b0:	e0df      	b.n	8003272 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	2200      	movs	r2, #0
 80030ba:	497a      	ldr	r1, [pc, #488]	; (80032a4 <HAL_I2C_Master_Receive+0x4a8>)
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fa47 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0e6      	b.n	800329a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030dc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003110:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <HAL_I2C_Master_Receive+0x4ac>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	08db      	lsrs	r3, r3, #3
 8003116:	4a65      	ldr	r2, [pc, #404]	; (80032ac <HAL_I2C_Master_Receive+0x4b0>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	0a1a      	lsrs	r2, r3, #8
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	00da      	lsls	r2, r3, #3
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	3b01      	subs	r3, #1
 800312e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d117      	bne.n	8003166 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f043 0220 	orr.w	r2, r3, #32
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003158:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e099      	b.n	800329a <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b04      	cmp	r3, #4
 8003172:	d1da      	bne.n	800312a <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031b6:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031ea:	e042      	b.n	8003272 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fb05 	bl	8003800 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e04c      	b.n	800329a <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b04      	cmp	r3, #4
 800323e:	d118      	bne.n	8003272 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003276:	2b00      	cmp	r3, #0
 8003278:	f47f ae99 	bne.w	8002fae <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e000      	b.n	800329a <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8003298:	2302      	movs	r3, #2
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	3728      	adds	r7, #40	; 0x28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	00010004 	.word	0x00010004
 80032a8:	2000000c 	.word	0x2000000c
 80032ac:	14f8b589 	.word	0x14f8b589

080032b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	460b      	mov	r3, r1
 80032be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d006      	beq.n	80032da <I2C_MasterRequestWrite+0x2a>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d003      	beq.n	80032da <I2C_MasterRequestWrite+0x2a>
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032d8:	d108      	bne.n	80032ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	e00b      	b.n	8003304 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	2b12      	cmp	r3, #18
 80032f2:	d107      	bne.n	8003304 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003302:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f91d 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00d      	beq.n	8003338 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800332a:	d103      	bne.n	8003334 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e035      	b.n	80033a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003340:	d108      	bne.n	8003354 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003350:	611a      	str	r2, [r3, #16]
 8003352:	e01b      	b.n	800338c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003354:	897b      	ldrh	r3, [r7, #10]
 8003356:	11db      	asrs	r3, r3, #7
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f003 0306 	and.w	r3, r3, #6
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f063 030f 	orn	r3, r3, #15
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	490e      	ldr	r1, [pc, #56]	; (80033ac <I2C_MasterRequestWrite+0xfc>)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f943 	bl	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e010      	b.n	80033a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003382:	897b      	ldrh	r3, [r7, #10]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4907      	ldr	r1, [pc, #28]	; (80033b0 <I2C_MasterRequestWrite+0x100>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f933 	bl	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	00010008 	.word	0x00010008
 80033b0:	00010002 	.word	0x00010002

080033b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	460b      	mov	r3, r1
 80033c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d006      	beq.n	80033ee <I2C_MasterRequestRead+0x3a>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d003      	beq.n	80033ee <I2C_MasterRequestRead+0x3a>
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033ec:	d108      	bne.n	8003400 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e00b      	b.n	8003418 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	2b11      	cmp	r3, #17
 8003406:	d107      	bne.n	8003418 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003416:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f893 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800343e:	d103      	bne.n	8003448 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e079      	b.n	8003540 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003454:	d108      	bne.n	8003468 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	611a      	str	r2, [r3, #16]
 8003466:	e05f      	b.n	8003528 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003468:	897b      	ldrh	r3, [r7, #10]
 800346a:	11db      	asrs	r3, r3, #7
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f003 0306 	and.w	r3, r3, #6
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f063 030f 	orn	r3, r3, #15
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4930      	ldr	r1, [pc, #192]	; (8003548 <I2C_MasterRequestRead+0x194>)
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f8b9 	bl	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e054      	b.n	8003540 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003496:	897b      	ldrh	r3, [r7, #10]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4929      	ldr	r1, [pc, #164]	; (800354c <I2C_MasterRequestRead+0x198>)
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f8a9 	bl	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e044      	b.n	8003540 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f831 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003502:	d103      	bne.n	800350c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e017      	b.n	8003540 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003510:	897b      	ldrh	r3, [r7, #10]
 8003512:	11db      	asrs	r3, r3, #7
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 0306 	and.w	r3, r3, #6
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f063 030e 	orn	r3, r3, #14
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	4907      	ldr	r1, [pc, #28]	; (800354c <I2C_MasterRequestRead+0x198>)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f865 	bl	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	00010008 	.word	0x00010008
 800354c:	00010002 	.word	0x00010002

08003550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003560:	e025      	b.n	80035ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003568:	d021      	beq.n	80035ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356a:	f7fe fb41 	bl	8001bf0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d116      	bne.n	80035ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f043 0220 	orr.w	r2, r3, #32
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e023      	b.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d10d      	bne.n	80035d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4013      	ands	r3, r2
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bf0c      	ite	eq
 80035ca:	2301      	moveq	r3, #1
 80035cc:	2300      	movne	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	e00c      	b.n	80035ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d0b6      	beq.n	8003562 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800360c:	e051      	b.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361c:	d123      	bne.n	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003636:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f043 0204 	orr.w	r2, r3, #4
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e046      	b.n	80036f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800366c:	d021      	beq.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366e:	f7fe fabf 	bl	8001bf0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d116      	bne.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f043 0220 	orr.w	r2, r3, #32
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e020      	b.n	80036f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d10c      	bne.n	80036d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4013      	ands	r3, r2
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	e00b      	b.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	43da      	mvns	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4013      	ands	r3, r2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d18d      	bne.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003708:	e02d      	b.n	8003766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f8ce 	bl	80038ac <I2C_IsAcknowledgeFailed>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e02d      	b.n	8003776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003720:	d021      	beq.n	8003766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003722:	f7fe fa65 	bl	8001bf0 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	429a      	cmp	r2, r3
 8003730:	d302      	bcc.n	8003738 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d116      	bne.n	8003766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e007      	b.n	8003776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d1ca      	bne.n	800370a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800378a:	e02d      	b.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f88d 	bl	80038ac <I2C_IsAcknowledgeFailed>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e02d      	b.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a2:	d021      	beq.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a4:	f7fe fa24 	bl	8001bf0 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d302      	bcc.n	80037ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d116      	bne.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e007      	b.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d1ca      	bne.n	800378c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800380c:	e042      	b.n	8003894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b10      	cmp	r3, #16
 800381a:	d119      	bne.n	8003850 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0210 	mvn.w	r2, #16
 8003824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e029      	b.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003850:	f7fe f9ce 	bl	8001bf0 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e007      	b.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d1b5      	bne.n	800380e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c2:	d11b      	bne.n	80038fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f043 0204 	orr.w	r2, r3, #4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e26c      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8087 	beq.w	8003a36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003928:	4b92      	ldr	r3, [pc, #584]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b04      	cmp	r3, #4
 8003932:	d00c      	beq.n	800394e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003934:	4b8f      	ldr	r3, [pc, #572]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 030c 	and.w	r3, r3, #12
 800393c:	2b08      	cmp	r3, #8
 800393e:	d112      	bne.n	8003966 <HAL_RCC_OscConfig+0x5e>
 8003940:	4b8c      	ldr	r3, [pc, #560]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	d10b      	bne.n	8003966 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394e:	4b89      	ldr	r3, [pc, #548]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d06c      	beq.n	8003a34 <HAL_RCC_OscConfig+0x12c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d168      	bne.n	8003a34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e246      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396e:	d106      	bne.n	800397e <HAL_RCC_OscConfig+0x76>
 8003970:	4b80      	ldr	r3, [pc, #512]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a7f      	ldr	r2, [pc, #508]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397a:	6013      	str	r3, [r2, #0]
 800397c:	e02e      	b.n	80039dc <HAL_RCC_OscConfig+0xd4>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x98>
 8003986:	4b7b      	ldr	r3, [pc, #492]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a7a      	ldr	r2, [pc, #488]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 800398c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b78      	ldr	r3, [pc, #480]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a77      	ldr	r2, [pc, #476]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e01d      	b.n	80039dc <HAL_RCC_OscConfig+0xd4>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a8:	d10c      	bne.n	80039c4 <HAL_RCC_OscConfig+0xbc>
 80039aa:	4b72      	ldr	r3, [pc, #456]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a71      	ldr	r2, [pc, #452]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b6f      	ldr	r3, [pc, #444]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6e      	ldr	r2, [pc, #440]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e00b      	b.n	80039dc <HAL_RCC_OscConfig+0xd4>
 80039c4:	4b6b      	ldr	r3, [pc, #428]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a6a      	ldr	r2, [pc, #424]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b68      	ldr	r3, [pc, #416]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a67      	ldr	r2, [pc, #412]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 80039d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d013      	beq.n	8003a0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7fe f904 	bl	8001bf0 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	e008      	b.n	80039fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ec:	f7fe f900 	bl	8001bf0 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	; 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e1fa      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fe:	4b5d      	ldr	r3, [pc, #372]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCC_OscConfig+0xe4>
 8003a0a:	e014      	b.n	8003a36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe f8f0 	bl	8001bf0 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fe f8ec 	bl	8001bf0 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e1e6      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a26:	4b53      	ldr	r3, [pc, #332]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x10c>
 8003a32:	e000      	b.n	8003a36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d063      	beq.n	8003b0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a42:	4b4c      	ldr	r3, [pc, #304]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a4e:	4b49      	ldr	r3, [pc, #292]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d11c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x18c>
 8003a5a:	4b46      	ldr	r3, [pc, #280]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d116      	bne.n	8003a94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	4b43      	ldr	r3, [pc, #268]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_RCC_OscConfig+0x176>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d001      	beq.n	8003a7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e1ba      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7e:	4b3d      	ldr	r3, [pc, #244]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4939      	ldr	r1, [pc, #228]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a92:	e03a      	b.n	8003b0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a9c:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa2:	f7fe f8a5 	bl	8001bf0 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aaa:	f7fe f8a1 	bl	8001bf0 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e19b      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abc:	4b2d      	ldr	r3, [pc, #180]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac8:	4b2a      	ldr	r3, [pc, #168]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4927      	ldr	r1, [pc, #156]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	600b      	str	r3, [r1, #0]
 8003adc:	e015      	b.n	8003b0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe f884 	bl	8001bf0 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aec:	f7fe f880 	bl	8001bf0 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e17a      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afe:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0308 	and.w	r3, r3, #8
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d03a      	beq.n	8003b8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d019      	beq.n	8003b52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1e:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <HAL_RCC_OscConfig+0x274>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b24:	f7fe f864 	bl	8001bf0 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fe f860 	bl	8001bf0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e15a      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f000 fada 	bl	8004104 <RCC_Delay>
 8003b50:	e01c      	b.n	8003b8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <HAL_RCC_OscConfig+0x274>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b58:	f7fe f84a 	bl	8001bf0 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5e:	e00f      	b.n	8003b80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fe f846 	bl	8001bf0 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d908      	bls.n	8003b80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e140      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
 8003b72:	bf00      	nop
 8003b74:	40021000 	.word	0x40021000
 8003b78:	42420000 	.word	0x42420000
 8003b7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	4b9e      	ldr	r3, [pc, #632]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e9      	bne.n	8003b60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80a6 	beq.w	8003ce6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b9e:	4b97      	ldr	r3, [pc, #604]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10d      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003baa:	4b94      	ldr	r3, [pc, #592]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	4a93      	ldr	r2, [pc, #588]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	61d3      	str	r3, [r2, #28]
 8003bb6:	4b91      	ldr	r3, [pc, #580]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc6:	4b8e      	ldr	r3, [pc, #568]	; (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d118      	bne.n	8003c04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd2:	4b8b      	ldr	r3, [pc, #556]	; (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a8a      	ldr	r2, [pc, #552]	; (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bde:	f7fe f807 	bl	8001bf0 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be6:	f7fe f803 	bl	8001bf0 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b64      	cmp	r3, #100	; 0x64
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e0fd      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf8:	4b81      	ldr	r3, [pc, #516]	; (8003e00 <HAL_RCC_OscConfig+0x4f8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d106      	bne.n	8003c1a <HAL_RCC_OscConfig+0x312>
 8003c0c:	4b7b      	ldr	r3, [pc, #492]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4a7a      	ldr	r2, [pc, #488]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6213      	str	r3, [r2, #32]
 8003c18:	e02d      	b.n	8003c76 <HAL_RCC_OscConfig+0x36e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x334>
 8003c22:	4b76      	ldr	r3, [pc, #472]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	4a75      	ldr	r2, [pc, #468]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	6213      	str	r3, [r2, #32]
 8003c2e:	4b73      	ldr	r3, [pc, #460]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	4a72      	ldr	r2, [pc, #456]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c34:	f023 0304 	bic.w	r3, r3, #4
 8003c38:	6213      	str	r3, [r2, #32]
 8003c3a:	e01c      	b.n	8003c76 <HAL_RCC_OscConfig+0x36e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	2b05      	cmp	r3, #5
 8003c42:	d10c      	bne.n	8003c5e <HAL_RCC_OscConfig+0x356>
 8003c44:	4b6d      	ldr	r3, [pc, #436]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	4a6c      	ldr	r2, [pc, #432]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	6213      	str	r3, [r2, #32]
 8003c50:	4b6a      	ldr	r3, [pc, #424]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	4a69      	ldr	r2, [pc, #420]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	6213      	str	r3, [r2, #32]
 8003c5c:	e00b      	b.n	8003c76 <HAL_RCC_OscConfig+0x36e>
 8003c5e:	4b67      	ldr	r3, [pc, #412]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	4a66      	ldr	r2, [pc, #408]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	6213      	str	r3, [r2, #32]
 8003c6a:	4b64      	ldr	r3, [pc, #400]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4a63      	ldr	r2, [pc, #396]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d015      	beq.n	8003caa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7e:	f7fd ffb7 	bl	8001bf0 <HAL_GetTick>
 8003c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fd ffb3 	bl	8001bf0 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e0ab      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9c:	4b57      	ldr	r3, [pc, #348]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ee      	beq.n	8003c86 <HAL_RCC_OscConfig+0x37e>
 8003ca8:	e014      	b.n	8003cd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003caa:	f7fd ffa1 	bl	8001bf0 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb2:	f7fd ff9d 	bl	8001bf0 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e095      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc8:	4b4c      	ldr	r3, [pc, #304]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ee      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cda:	4b48      	ldr	r3, [pc, #288]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	4a47      	ldr	r2, [pc, #284]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f000 8081 	beq.w	8003df2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cf0:	4b42      	ldr	r3, [pc, #264]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d061      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d146      	bne.n	8003d92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d04:	4b3f      	ldr	r3, [pc, #252]	; (8003e04 <HAL_RCC_OscConfig+0x4fc>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0a:	f7fd ff71 	bl	8001bf0 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fd ff6d 	bl	8001bf0 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e067      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d24:	4b35      	ldr	r3, [pc, #212]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1f0      	bne.n	8003d12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d38:	d108      	bne.n	8003d4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d3a:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	492d      	ldr	r1, [pc, #180]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d4c:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a19      	ldr	r1, [r3, #32]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	4927      	ldr	r1, [pc, #156]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCC_OscConfig+0x4fc>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6a:	f7fd ff41 	bl	8001bf0 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d72:	f7fd ff3d 	bl	8001bf0 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e037      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x46a>
 8003d90:	e02f      	b.n	8003df2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d92:	4b1c      	ldr	r3, [pc, #112]	; (8003e04 <HAL_RCC_OscConfig+0x4fc>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fd ff2a 	bl	8001bf0 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da0:	f7fd ff26 	bl	8001bf0 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e020      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0x498>
 8003dbe:	e018      	b.n	8003df2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e013      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_RCC_OscConfig+0x4f4>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d106      	bne.n	8003dee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d001      	beq.n	8003df2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40007000 	.word	0x40007000
 8003e04:	42420060 	.word	0x42420060

08003e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0d0      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b6a      	ldr	r3, [pc, #424]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d910      	bls.n	8003e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b67      	ldr	r3, [pc, #412]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 0207 	bic.w	r2, r3, #7
 8003e32:	4965      	ldr	r1, [pc, #404]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b63      	ldr	r3, [pc, #396]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0b8      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d020      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e64:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4a58      	ldr	r2, [pc, #352]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003e6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e7c:	4b53      	ldr	r3, [pc, #332]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4a52      	ldr	r2, [pc, #328]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003e82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e88:	4b50      	ldr	r3, [pc, #320]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	494d      	ldr	r1, [pc, #308]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d040      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d107      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eae:	4b47      	ldr	r3, [pc, #284]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d115      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e07f      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d107      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec6:	4b41      	ldr	r3, [pc, #260]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d109      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e073      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed6:	4b3d      	ldr	r3, [pc, #244]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e06b      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ee6:	4b39      	ldr	r3, [pc, #228]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f023 0203 	bic.w	r2, r3, #3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	4936      	ldr	r1, [pc, #216]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef8:	f7fd fe7a 	bl	8001bf0 <HAL_GetTick>
 8003efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efe:	e00a      	b.n	8003f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f00:	f7fd fe76 	bl	8001bf0 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e053      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f16:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 020c 	and.w	r2, r3, #12
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d1eb      	bne.n	8003f00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f28:	4b27      	ldr	r3, [pc, #156]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d210      	bcs.n	8003f58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f36:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 0207 	bic.w	r2, r3, #7
 8003f3e:	4922      	ldr	r1, [pc, #136]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e032      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f64:	4b19      	ldr	r3, [pc, #100]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4916      	ldr	r1, [pc, #88]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	490e      	ldr	r1, [pc, #56]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f96:	f000 f821 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 8003f9a:	4601      	mov	r1, r0
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	4a0a      	ldr	r2, [pc, #40]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa8:	5cd3      	ldrb	r3, [r2, r3]
 8003faa:	fa21 f303 	lsr.w	r3, r1, r3
 8003fae:	4a09      	ldr	r2, [pc, #36]	; (8003fd4 <HAL_RCC_ClockConfig+0x1cc>)
 8003fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_RCC_ClockConfig+0x1d0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd fdd8 	bl	8001b6c <HAL_InitTick>

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40022000 	.word	0x40022000
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	080065fc 	.word	0x080065fc
 8003fd4:	2000000c 	.word	0x2000000c
 8003fd8:	20000010 	.word	0x20000010

08003fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fdc:	b490      	push	{r4, r7}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003fe2:	4b2a      	ldr	r3, [pc, #168]	; (800408c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fe4:	1d3c      	adds	r4, r7, #4
 8003fe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003fec:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004006:	4b23      	ldr	r3, [pc, #140]	; (8004094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b04      	cmp	r3, #4
 8004014:	d002      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x40>
 8004016:	2b08      	cmp	r3, #8
 8004018:	d003      	beq.n	8004022 <HAL_RCC_GetSysClockFreq+0x46>
 800401a:	e02d      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800401c:	4b1e      	ldr	r3, [pc, #120]	; (8004098 <HAL_RCC_GetSysClockFreq+0xbc>)
 800401e:	623b      	str	r3, [r7, #32]
      break;
 8004020:	e02d      	b.n	800407e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	0c9b      	lsrs	r3, r3, #18
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800402e:	4413      	add	r3, r2
 8004030:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004034:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d013      	beq.n	8004068 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004040:	4b14      	ldr	r3, [pc, #80]	; (8004094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	0c5b      	lsrs	r3, r3, #17
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800404e:	4413      	add	r3, r2
 8004050:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004054:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	4a0f      	ldr	r2, [pc, #60]	; (8004098 <HAL_RCC_GetSysClockFreq+0xbc>)
 800405a:	fb02 f203 	mul.w	r2, r2, r3
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	fbb2 f3f3 	udiv	r3, r2, r3
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
 8004066:	e004      	b.n	8004072 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	4a0c      	ldr	r2, [pc, #48]	; (800409c <HAL_RCC_GetSysClockFreq+0xc0>)
 800406c:	fb02 f303 	mul.w	r3, r2, r3
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	623b      	str	r3, [r7, #32]
      break;
 8004076:	e002      	b.n	800407e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004078:	4b07      	ldr	r3, [pc, #28]	; (8004098 <HAL_RCC_GetSysClockFreq+0xbc>)
 800407a:	623b      	str	r3, [r7, #32]
      break;
 800407c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800407e:	6a3b      	ldr	r3, [r7, #32]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3728      	adds	r7, #40	; 0x28
 8004084:	46bd      	mov	sp, r7
 8004086:	bc90      	pop	{r4, r7}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	080065d4 	.word	0x080065d4
 8004090:	080065e4 	.word	0x080065e4
 8004094:	40021000 	.word	0x40021000
 8004098:	007a1200 	.word	0x007a1200
 800409c:	003d0900 	.word	0x003d0900

080040a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a4:	4b02      	ldr	r3, [pc, #8]	; (80040b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr
 80040b0:	2000000c 	.word	0x2000000c

080040b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040b8:	f7ff fff2 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040bc:	4601      	mov	r1, r0
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	4a03      	ldr	r2, [pc, #12]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ca:	5cd3      	ldrb	r3, [r2, r3]
 80040cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000
 80040d8:	0800660c 	.word	0x0800660c

080040dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040e0:	f7ff ffde 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040e4:	4601      	mov	r1, r0
 80040e6:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	0adb      	lsrs	r3, r3, #11
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	4a03      	ldr	r2, [pc, #12]	; (8004100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040f2:	5cd3      	ldrb	r3, [r2, r3]
 80040f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40021000 	.word	0x40021000
 8004100:	0800660c 	.word	0x0800660c

08004104 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <RCC_Delay+0x34>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a0a      	ldr	r2, [pc, #40]	; (800413c <RCC_Delay+0x38>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	0a5b      	lsrs	r3, r3, #9
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004120:	bf00      	nop
  }
  while (Delay --);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	1e5a      	subs	r2, r3, #1
 8004126:	60fa      	str	r2, [r7, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f9      	bne.n	8004120 <RCC_Delay+0x1c>
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	2000000c 	.word	0x2000000c
 800413c:	10624dd3 	.word	0x10624dd3

08004140 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d07d      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800415c:	2300      	movs	r3, #0
 800415e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004160:	4b4f      	ldr	r3, [pc, #316]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10d      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416c:	4b4c      	ldr	r3, [pc, #304]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	4a4b      	ldr	r2, [pc, #300]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004176:	61d3      	str	r3, [r2, #28]
 8004178:	4b49      	ldr	r3, [pc, #292]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004184:	2301      	movs	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004188:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004190:	2b00      	cmp	r3, #0
 8004192:	d118      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004194:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a42      	ldr	r2, [pc, #264]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800419a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a0:	f7fd fd26 	bl	8001bf0 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a6:	e008      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a8:	f7fd fd22 	bl	8001bf0 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b64      	cmp	r3, #100	; 0x64
 80041b4:	d901      	bls.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e06d      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ba:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041c6:	4b36      	ldr	r3, [pc, #216]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d02e      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d027      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041e4:	4b2e      	ldr	r3, [pc, #184]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041ee:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041f4:	4b2c      	ldr	r3, [pc, #176]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041fa:	4a29      	ldr	r2, [pc, #164]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d014      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420a:	f7fd fcf1 	bl	8001bf0 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004210:	e00a      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004212:	f7fd fced 	bl	8001bf0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d901      	bls.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e036      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0ee      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004234:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4917      	ldr	r1, [pc, #92]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004242:	4313      	orrs	r3, r2
 8004244:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d105      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424c:	4b14      	ldr	r3, [pc, #80]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	4a13      	ldr	r2, [pc, #76]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004256:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	490b      	ldr	r1, [pc, #44]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004282:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	4904      	ldr	r1, [pc, #16]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40007000 	.word	0x40007000
 80042a8:	42420440 	.word	0x42420440

080042ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042ac:	b590      	push	{r4, r7, lr}
 80042ae:	b08d      	sub	sp, #52	; 0x34
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80042b4:	4b55      	ldr	r3, [pc, #340]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80042b6:	f107 040c 	add.w	r4, r7, #12
 80042ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80042c0:	4b53      	ldr	r3, [pc, #332]	; (8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ca:	2300      	movs	r3, #0
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
 80042d6:	2300      	movs	r3, #0
 80042d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d07f      	beq.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d002      	beq.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d048      	beq.n	800437a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80042e8:	e08b      	b.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80042ea:	4b4a      	ldr	r3, [pc, #296]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042f0:	4b48      	ldr	r3, [pc, #288]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d07f      	beq.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	0c9b      	lsrs	r3, r3, #18
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004308:	4413      	add	r3, r2
 800430a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800430e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d018      	beq.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800431a:	4b3e      	ldr	r3, [pc, #248]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	0c5b      	lsrs	r3, r3, #17
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004328:	4413      	add	r3, r2
 800432a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800433a:	4a37      	ldr	r2, [pc, #220]	; (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	fb02 f303 	mul.w	r3, r2, r3
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434a:	e004      	b.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	4a33      	ldr	r2, [pc, #204]	; (800441c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004350:	fb02 f303 	mul.w	r3, r2, r3
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004356:	4b2f      	ldr	r3, [pc, #188]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004362:	d102      	bne.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004368:	e048      	b.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4a2c      	ldr	r2, [pc, #176]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004378:	e040      	b.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438a:	d108      	bne.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28
 800439c:	e01f      	b.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a8:	d109      	bne.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80043aa:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80043b6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80043bc:	e00f      	b.n	80043de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c8:	d11a      	bne.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d014      	beq.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80043d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043dc:	e010      	b.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80043de:	e00f      	b.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80043e0:	f7ff fe7c 	bl	80040dc <HAL_RCC_GetPCLK2Freq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	0b9b      	lsrs	r3, r3, #14
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	3301      	adds	r3, #1
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043fa:	e002      	b.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80043fc:	bf00      	nop
 80043fe:	e000      	b.n	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004400:	bf00      	nop
    }
  }
  return (frequency);
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004404:	4618      	mov	r0, r3
 8004406:	3734      	adds	r7, #52	; 0x34
 8004408:	46bd      	mov	sp, r7
 800440a:	bd90      	pop	{r4, r7, pc}
 800440c:	080065e8 	.word	0x080065e8
 8004410:	080065f8 	.word	0x080065f8
 8004414:	40021000 	.word	0x40021000
 8004418:	007a1200 	.word	0x007a1200
 800441c:	003d0900 	.word	0x003d0900
 8004420:	aaaaaaab 	.word	0xaaaaaaab

08004424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e01d      	b.n	8004472 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fd f9d6 	bl	80017fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	4619      	mov	r1, r3
 8004462:	4610      	mov	r0, r2
 8004464:	f000 fae8 	bl	8004a38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e01d      	b.n	80044c8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f815 	bl	80044d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2202      	movs	r2, #2
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4619      	mov	r1, r3
 80044b8:	4610      	mov	r0, r2
 80044ba:	f000 fabd 	bl	8004a38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d122      	bne.n	800453e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b02      	cmp	r3, #2
 8004504:	d11b      	bne.n	800453e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f06f 0202 	mvn.w	r2, #2
 800450e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fa6b 	bl	8004a00 <HAL_TIM_IC_CaptureCallback>
 800452a:	e005      	b.n	8004538 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fa5e 	bl	80049ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa6d 	bl	8004a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b04      	cmp	r3, #4
 800454a:	d122      	bne.n	8004592 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b04      	cmp	r3, #4
 8004558:	d11b      	bne.n	8004592 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f06f 0204 	mvn.w	r2, #4
 8004562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 fa41 	bl	8004a00 <HAL_TIM_IC_CaptureCallback>
 800457e:	e005      	b.n	800458c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fa34 	bl	80049ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fa43 	bl	8004a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b08      	cmp	r3, #8
 800459e:	d122      	bne.n	80045e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d11b      	bne.n	80045e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f06f 0208 	mvn.w	r2, #8
 80045b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2204      	movs	r2, #4
 80045bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f003 0303 	and.w	r3, r3, #3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fa17 	bl	8004a00 <HAL_TIM_IC_CaptureCallback>
 80045d2:	e005      	b.n	80045e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fa0a 	bl	80049ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fa19 	bl	8004a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d122      	bne.n	800463a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d11b      	bne.n	800463a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f06f 0210 	mvn.w	r2, #16
 800460a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2208      	movs	r2, #8
 8004610:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f9ed 	bl	8004a00 <HAL_TIM_IC_CaptureCallback>
 8004626:	e005      	b.n	8004634 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f9e0 	bl	80049ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f9ef 	bl	8004a12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b01      	cmp	r3, #1
 8004646:	d10e      	bne.n	8004666 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b01      	cmp	r3, #1
 8004654:	d107      	bne.n	8004666 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f06f 0201 	mvn.w	r2, #1
 800465e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fc fcd1 	bl	8001008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004670:	2b80      	cmp	r3, #128	; 0x80
 8004672:	d10e      	bne.n	8004692 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b80      	cmp	r3, #128	; 0x80
 8004680:	d107      	bne.n	8004692 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800468a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 fcf1 	bl	8005074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b40      	cmp	r3, #64	; 0x40
 800469e:	d10e      	bne.n	80046be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d107      	bne.n	80046be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f9b3 	bl	8004a24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d10e      	bne.n	80046ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d107      	bne.n	80046ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f06f 0220 	mvn.w	r2, #32
 80046e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fcbc 	bl	8005062 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800470a:	2302      	movs	r3, #2
 800470c:	e0b4      	b.n	8004878 <HAL_TIM_PWM_ConfigChannel+0x184>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b0c      	cmp	r3, #12
 8004722:	f200 809f 	bhi.w	8004864 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004726:	a201      	add	r2, pc, #4	; (adr r2, 800472c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	08004761 	.word	0x08004761
 8004730:	08004865 	.word	0x08004865
 8004734:	08004865 	.word	0x08004865
 8004738:	08004865 	.word	0x08004865
 800473c:	080047a1 	.word	0x080047a1
 8004740:	08004865 	.word	0x08004865
 8004744:	08004865 	.word	0x08004865
 8004748:	08004865 	.word	0x08004865
 800474c:	080047e3 	.word	0x080047e3
 8004750:	08004865 	.word	0x08004865
 8004754:	08004865 	.word	0x08004865
 8004758:	08004865 	.word	0x08004865
 800475c:	08004823 	.word	0x08004823
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f9c8 	bl	8004afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0208 	orr.w	r2, r2, #8
 800477a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0204 	bic.w	r2, r2, #4
 800478a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6999      	ldr	r1, [r3, #24]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	619a      	str	r2, [r3, #24]
      break;
 800479e:	e062      	b.n	8004866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fa0e 	bl	8004bc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6999      	ldr	r1, [r3, #24]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	021a      	lsls	r2, r3, #8
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	619a      	str	r2, [r3, #24]
      break;
 80047e0:	e041      	b.n	8004866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fa57 	bl	8004c9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0208 	orr.w	r2, r2, #8
 80047fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	69da      	ldr	r2, [r3, #28]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0204 	bic.w	r2, r2, #4
 800480c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	69d9      	ldr	r1, [r3, #28]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	61da      	str	r2, [r3, #28]
      break;
 8004820:	e021      	b.n	8004866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68b9      	ldr	r1, [r7, #8]
 8004828:	4618      	mov	r0, r3
 800482a:	f000 faa1 	bl	8004d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	69da      	ldr	r2, [r3, #28]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69d9      	ldr	r1, [r3, #28]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	021a      	lsls	r2, r3, #8
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	61da      	str	r2, [r3, #28]
      break;
 8004862:	e000      	b.n	8004866 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004864:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_TIM_ConfigClockSource+0x18>
 8004894:	2302      	movs	r3, #2
 8004896:	e0a6      	b.n	80049e6 <HAL_TIM_ConfigClockSource+0x166>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	d067      	beq.n	80049a0 <HAL_TIM_ConfigClockSource+0x120>
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d80b      	bhi.n	80048ec <HAL_TIM_ConfigClockSource+0x6c>
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d073      	beq.n	80049c0 <HAL_TIM_ConfigClockSource+0x140>
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d802      	bhi.n	80048e2 <HAL_TIM_ConfigClockSource+0x62>
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d06f      	beq.n	80049c0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048e0:	e078      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d06c      	beq.n	80049c0 <HAL_TIM_ConfigClockSource+0x140>
 80048e6:	2b30      	cmp	r3, #48	; 0x30
 80048e8:	d06a      	beq.n	80049c0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80048ea:	e073      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048ec:	2b70      	cmp	r3, #112	; 0x70
 80048ee:	d00d      	beq.n	800490c <HAL_TIM_ConfigClockSource+0x8c>
 80048f0:	2b70      	cmp	r3, #112	; 0x70
 80048f2:	d804      	bhi.n	80048fe <HAL_TIM_ConfigClockSource+0x7e>
 80048f4:	2b50      	cmp	r3, #80	; 0x50
 80048f6:	d033      	beq.n	8004960 <HAL_TIM_ConfigClockSource+0xe0>
 80048f8:	2b60      	cmp	r3, #96	; 0x60
 80048fa:	d041      	beq.n	8004980 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80048fc:	e06a      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004902:	d066      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x152>
 8004904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004908:	d017      	beq.n	800493a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800490a:	e063      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	6899      	ldr	r1, [r3, #8]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f000 faed 	bl	8004efa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800492e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	609a      	str	r2, [r3, #8]
      break;
 8004938:	e04c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6899      	ldr	r1, [r3, #8]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f000 fad6 	bl	8004efa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800495c:	609a      	str	r2, [r3, #8]
      break;
 800495e:	e039      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6859      	ldr	r1, [r3, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	461a      	mov	r2, r3
 800496e:	f000 fa4d 	bl	8004e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2150      	movs	r1, #80	; 0x50
 8004978:	4618      	mov	r0, r3
 800497a:	f000 faa4 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 800497e:	e029      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	6859      	ldr	r1, [r3, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	461a      	mov	r2, r3
 800498e:	f000 fa6b 	bl	8004e68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2160      	movs	r1, #96	; 0x60
 8004998:	4618      	mov	r0, r3
 800499a:	f000 fa94 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 800499e:	e019      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	6859      	ldr	r1, [r3, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	461a      	mov	r2, r3
 80049ae:	f000 fa2d 	bl	8004e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2140      	movs	r1, #64	; 0x40
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fa84 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 80049be:	e009      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f000 fa7b 	bl	8004ec6 <TIM_ITRx_SetConfig>
      break;
 80049d0:	e000      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80049d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr

08004a00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr

08004a12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr
	...

08004a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a29      	ldr	r2, [pc, #164]	; (8004af0 <TIM_Base_SetConfig+0xb8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <TIM_Base_SetConfig+0x30>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a56:	d007      	beq.n	8004a68 <TIM_Base_SetConfig+0x30>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a26      	ldr	r2, [pc, #152]	; (8004af4 <TIM_Base_SetConfig+0xbc>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0x30>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a25      	ldr	r2, [pc, #148]	; (8004af8 <TIM_Base_SetConfig+0xc0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d108      	bne.n	8004a7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1c      	ldr	r2, [pc, #112]	; (8004af0 <TIM_Base_SetConfig+0xb8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <TIM_Base_SetConfig+0x62>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a88:	d007      	beq.n	8004a9a <TIM_Base_SetConfig+0x62>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a19      	ldr	r2, [pc, #100]	; (8004af4 <TIM_Base_SetConfig+0xbc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_Base_SetConfig+0x62>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <TIM_Base_SetConfig+0xc0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d108      	bne.n	8004aac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a07      	ldr	r2, [pc, #28]	; (8004af0 <TIM_Base_SetConfig+0xb8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d103      	bne.n	8004ae0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	615a      	str	r2, [r3, #20]
}
 8004ae6:	bf00      	nop
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bc80      	pop	{r7}
 8004aee:	4770      	bx	lr
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40000800 	.word	0x40000800

08004afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f023 0201 	bic.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0303 	bic.w	r3, r3, #3
 8004b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 0302 	bic.w	r3, r3, #2
 8004b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <TIM_OC1_SetConfig+0xc8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d10c      	bne.n	8004b72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 0308 	bic.w	r3, r3, #8
 8004b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f023 0304 	bic.w	r3, r3, #4
 8004b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <TIM_OC1_SetConfig+0xc8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d111      	bne.n	8004b9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	621a      	str	r2, [r3, #32]
}
 8004bb8:	bf00      	nop
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40012c00 	.word	0x40012c00

08004bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f023 0210 	bic.w	r2, r3, #16
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0320 	bic.w	r3, r3, #32
 8004c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <TIM_OC2_SetConfig+0xd0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d10d      	bne.n	8004c44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <TIM_OC2_SetConfig+0xd0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d113      	bne.n	8004c74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	621a      	str	r2, [r3, #32]
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	40012c00 	.word	0x40012c00

08004c9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0303 	bic.w	r3, r3, #3
 8004cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	021b      	lsls	r3, r3, #8
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a1d      	ldr	r2, [pc, #116]	; (8004d6c <TIM_OC3_SetConfig+0xd0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d10d      	bne.n	8004d16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a14      	ldr	r2, [pc, #80]	; (8004d6c <TIM_OC3_SetConfig+0xd0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d113      	bne.n	8004d46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	621a      	str	r2, [r3, #32]
}
 8004d60:	bf00      	nop
 8004d62:	371c      	adds	r7, #28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40012c00 	.word	0x40012c00

08004d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	031b      	lsls	r3, r3, #12
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a0f      	ldr	r2, [pc, #60]	; (8004e08 <TIM_OC4_SetConfig+0x98>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d109      	bne.n	8004de4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	019b      	lsls	r3, r3, #6
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	621a      	str	r2, [r3, #32]
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr
 8004e08:	40012c00 	.word	0x40012c00

08004e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f023 0201 	bic.w	r2, r3, #1
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f023 030a 	bic.w	r3, r3, #10
 8004e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	621a      	str	r2, [r3, #32]
}
 8004e5e:	bf00      	nop
 8004e60:	371c      	adds	r7, #28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr

08004e68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f023 0210 	bic.w	r2, r3, #16
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	031b      	lsls	r3, r3, #12
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	621a      	str	r2, [r3, #32]
}
 8004ebc:	bf00      	nop
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b085      	sub	sp, #20
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f043 0307 	orr.w	r3, r3, #7
 8004ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	609a      	str	r2, [r3, #8]
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr

08004efa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b087      	sub	sp, #28
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
 8004f06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	021a      	lsls	r2, r3, #8
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	609a      	str	r2, [r3, #8]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e032      	b.n	8004fb6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f88:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3714      	adds	r7, #20
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e03d      	b.n	8005058 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr

08005062 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr

08005074 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr
	...

08005088 <__errno>:
 8005088:	4b01      	ldr	r3, [pc, #4]	; (8005090 <__errno+0x8>)
 800508a:	6818      	ldr	r0, [r3, #0]
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20000018 	.word	0x20000018

08005094 <__libc_init_array>:
 8005094:	b570      	push	{r4, r5, r6, lr}
 8005096:	2500      	movs	r5, #0
 8005098:	4e0c      	ldr	r6, [pc, #48]	; (80050cc <__libc_init_array+0x38>)
 800509a:	4c0d      	ldr	r4, [pc, #52]	; (80050d0 <__libc_init_array+0x3c>)
 800509c:	1ba4      	subs	r4, r4, r6
 800509e:	10a4      	asrs	r4, r4, #2
 80050a0:	42a5      	cmp	r5, r4
 80050a2:	d109      	bne.n	80050b8 <__libc_init_array+0x24>
 80050a4:	f001 fa74 	bl	8006590 <_init>
 80050a8:	2500      	movs	r5, #0
 80050aa:	4e0a      	ldr	r6, [pc, #40]	; (80050d4 <__libc_init_array+0x40>)
 80050ac:	4c0a      	ldr	r4, [pc, #40]	; (80050d8 <__libc_init_array+0x44>)
 80050ae:	1ba4      	subs	r4, r4, r6
 80050b0:	10a4      	asrs	r4, r4, #2
 80050b2:	42a5      	cmp	r5, r4
 80050b4:	d105      	bne.n	80050c2 <__libc_init_array+0x2e>
 80050b6:	bd70      	pop	{r4, r5, r6, pc}
 80050b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050bc:	4798      	blx	r3
 80050be:	3501      	adds	r5, #1
 80050c0:	e7ee      	b.n	80050a0 <__libc_init_array+0xc>
 80050c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050c6:	4798      	blx	r3
 80050c8:	3501      	adds	r5, #1
 80050ca:	e7f2      	b.n	80050b2 <__libc_init_array+0x1e>
 80050cc:	08006a48 	.word	0x08006a48
 80050d0:	08006a48 	.word	0x08006a48
 80050d4:	08006a48 	.word	0x08006a48
 80050d8:	08006a4c 	.word	0x08006a4c

080050dc <memset>:
 80050dc:	4603      	mov	r3, r0
 80050de:	4402      	add	r2, r0
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d100      	bne.n	80050e6 <memset+0xa>
 80050e4:	4770      	bx	lr
 80050e6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ea:	e7f9      	b.n	80050e0 <memset+0x4>

080050ec <_puts_r>:
 80050ec:	b570      	push	{r4, r5, r6, lr}
 80050ee:	460e      	mov	r6, r1
 80050f0:	4605      	mov	r5, r0
 80050f2:	b118      	cbz	r0, 80050fc <_puts_r+0x10>
 80050f4:	6983      	ldr	r3, [r0, #24]
 80050f6:	b90b      	cbnz	r3, 80050fc <_puts_r+0x10>
 80050f8:	f000 fa0c 	bl	8005514 <__sinit>
 80050fc:	69ab      	ldr	r3, [r5, #24]
 80050fe:	68ac      	ldr	r4, [r5, #8]
 8005100:	b913      	cbnz	r3, 8005108 <_puts_r+0x1c>
 8005102:	4628      	mov	r0, r5
 8005104:	f000 fa06 	bl	8005514 <__sinit>
 8005108:	4b23      	ldr	r3, [pc, #140]	; (8005198 <_puts_r+0xac>)
 800510a:	429c      	cmp	r4, r3
 800510c:	d117      	bne.n	800513e <_puts_r+0x52>
 800510e:	686c      	ldr	r4, [r5, #4]
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	071b      	lsls	r3, r3, #28
 8005114:	d51d      	bpl.n	8005152 <_puts_r+0x66>
 8005116:	6923      	ldr	r3, [r4, #16]
 8005118:	b1db      	cbz	r3, 8005152 <_puts_r+0x66>
 800511a:	3e01      	subs	r6, #1
 800511c:	68a3      	ldr	r3, [r4, #8]
 800511e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005122:	3b01      	subs	r3, #1
 8005124:	60a3      	str	r3, [r4, #8]
 8005126:	b9e9      	cbnz	r1, 8005164 <_puts_r+0x78>
 8005128:	2b00      	cmp	r3, #0
 800512a:	da2e      	bge.n	800518a <_puts_r+0x9e>
 800512c:	4622      	mov	r2, r4
 800512e:	210a      	movs	r1, #10
 8005130:	4628      	mov	r0, r5
 8005132:	f000 f83f 	bl	80051b4 <__swbuf_r>
 8005136:	3001      	adds	r0, #1
 8005138:	d011      	beq.n	800515e <_puts_r+0x72>
 800513a:	200a      	movs	r0, #10
 800513c:	e011      	b.n	8005162 <_puts_r+0x76>
 800513e:	4b17      	ldr	r3, [pc, #92]	; (800519c <_puts_r+0xb0>)
 8005140:	429c      	cmp	r4, r3
 8005142:	d101      	bne.n	8005148 <_puts_r+0x5c>
 8005144:	68ac      	ldr	r4, [r5, #8]
 8005146:	e7e3      	b.n	8005110 <_puts_r+0x24>
 8005148:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <_puts_r+0xb4>)
 800514a:	429c      	cmp	r4, r3
 800514c:	bf08      	it	eq
 800514e:	68ec      	ldreq	r4, [r5, #12]
 8005150:	e7de      	b.n	8005110 <_puts_r+0x24>
 8005152:	4621      	mov	r1, r4
 8005154:	4628      	mov	r0, r5
 8005156:	f000 f87f 	bl	8005258 <__swsetup_r>
 800515a:	2800      	cmp	r0, #0
 800515c:	d0dd      	beq.n	800511a <_puts_r+0x2e>
 800515e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	2b00      	cmp	r3, #0
 8005166:	da04      	bge.n	8005172 <_puts_r+0x86>
 8005168:	69a2      	ldr	r2, [r4, #24]
 800516a:	429a      	cmp	r2, r3
 800516c:	dc06      	bgt.n	800517c <_puts_r+0x90>
 800516e:	290a      	cmp	r1, #10
 8005170:	d004      	beq.n	800517c <_puts_r+0x90>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	6022      	str	r2, [r4, #0]
 8005178:	7019      	strb	r1, [r3, #0]
 800517a:	e7cf      	b.n	800511c <_puts_r+0x30>
 800517c:	4622      	mov	r2, r4
 800517e:	4628      	mov	r0, r5
 8005180:	f000 f818 	bl	80051b4 <__swbuf_r>
 8005184:	3001      	adds	r0, #1
 8005186:	d1c9      	bne.n	800511c <_puts_r+0x30>
 8005188:	e7e9      	b.n	800515e <_puts_r+0x72>
 800518a:	200a      	movs	r0, #10
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	6022      	str	r2, [r4, #0]
 8005192:	7018      	strb	r0, [r3, #0]
 8005194:	e7e5      	b.n	8005162 <_puts_r+0x76>
 8005196:	bf00      	nop
 8005198:	08006638 	.word	0x08006638
 800519c:	08006658 	.word	0x08006658
 80051a0:	08006618 	.word	0x08006618

080051a4 <puts>:
 80051a4:	4b02      	ldr	r3, [pc, #8]	; (80051b0 <puts+0xc>)
 80051a6:	4601      	mov	r1, r0
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	f7ff bf9f 	b.w	80050ec <_puts_r>
 80051ae:	bf00      	nop
 80051b0:	20000018 	.word	0x20000018

080051b4 <__swbuf_r>:
 80051b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b6:	460e      	mov	r6, r1
 80051b8:	4614      	mov	r4, r2
 80051ba:	4605      	mov	r5, r0
 80051bc:	b118      	cbz	r0, 80051c6 <__swbuf_r+0x12>
 80051be:	6983      	ldr	r3, [r0, #24]
 80051c0:	b90b      	cbnz	r3, 80051c6 <__swbuf_r+0x12>
 80051c2:	f000 f9a7 	bl	8005514 <__sinit>
 80051c6:	4b21      	ldr	r3, [pc, #132]	; (800524c <__swbuf_r+0x98>)
 80051c8:	429c      	cmp	r4, r3
 80051ca:	d12a      	bne.n	8005222 <__swbuf_r+0x6e>
 80051cc:	686c      	ldr	r4, [r5, #4]
 80051ce:	69a3      	ldr	r3, [r4, #24]
 80051d0:	60a3      	str	r3, [r4, #8]
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	071a      	lsls	r2, r3, #28
 80051d6:	d52e      	bpl.n	8005236 <__swbuf_r+0x82>
 80051d8:	6923      	ldr	r3, [r4, #16]
 80051da:	b363      	cbz	r3, 8005236 <__swbuf_r+0x82>
 80051dc:	6923      	ldr	r3, [r4, #16]
 80051de:	6820      	ldr	r0, [r4, #0]
 80051e0:	b2f6      	uxtb	r6, r6
 80051e2:	1ac0      	subs	r0, r0, r3
 80051e4:	6963      	ldr	r3, [r4, #20]
 80051e6:	4637      	mov	r7, r6
 80051e8:	4283      	cmp	r3, r0
 80051ea:	dc04      	bgt.n	80051f6 <__swbuf_r+0x42>
 80051ec:	4621      	mov	r1, r4
 80051ee:	4628      	mov	r0, r5
 80051f0:	f000 f926 	bl	8005440 <_fflush_r>
 80051f4:	bb28      	cbnz	r0, 8005242 <__swbuf_r+0x8e>
 80051f6:	68a3      	ldr	r3, [r4, #8]
 80051f8:	3001      	adds	r0, #1
 80051fa:	3b01      	subs	r3, #1
 80051fc:	60a3      	str	r3, [r4, #8]
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	6022      	str	r2, [r4, #0]
 8005204:	701e      	strb	r6, [r3, #0]
 8005206:	6963      	ldr	r3, [r4, #20]
 8005208:	4283      	cmp	r3, r0
 800520a:	d004      	beq.n	8005216 <__swbuf_r+0x62>
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	07db      	lsls	r3, r3, #31
 8005210:	d519      	bpl.n	8005246 <__swbuf_r+0x92>
 8005212:	2e0a      	cmp	r6, #10
 8005214:	d117      	bne.n	8005246 <__swbuf_r+0x92>
 8005216:	4621      	mov	r1, r4
 8005218:	4628      	mov	r0, r5
 800521a:	f000 f911 	bl	8005440 <_fflush_r>
 800521e:	b190      	cbz	r0, 8005246 <__swbuf_r+0x92>
 8005220:	e00f      	b.n	8005242 <__swbuf_r+0x8e>
 8005222:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <__swbuf_r+0x9c>)
 8005224:	429c      	cmp	r4, r3
 8005226:	d101      	bne.n	800522c <__swbuf_r+0x78>
 8005228:	68ac      	ldr	r4, [r5, #8]
 800522a:	e7d0      	b.n	80051ce <__swbuf_r+0x1a>
 800522c:	4b09      	ldr	r3, [pc, #36]	; (8005254 <__swbuf_r+0xa0>)
 800522e:	429c      	cmp	r4, r3
 8005230:	bf08      	it	eq
 8005232:	68ec      	ldreq	r4, [r5, #12]
 8005234:	e7cb      	b.n	80051ce <__swbuf_r+0x1a>
 8005236:	4621      	mov	r1, r4
 8005238:	4628      	mov	r0, r5
 800523a:	f000 f80d 	bl	8005258 <__swsetup_r>
 800523e:	2800      	cmp	r0, #0
 8005240:	d0cc      	beq.n	80051dc <__swbuf_r+0x28>
 8005242:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005246:	4638      	mov	r0, r7
 8005248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800524a:	bf00      	nop
 800524c:	08006638 	.word	0x08006638
 8005250:	08006658 	.word	0x08006658
 8005254:	08006618 	.word	0x08006618

08005258 <__swsetup_r>:
 8005258:	4b32      	ldr	r3, [pc, #200]	; (8005324 <__swsetup_r+0xcc>)
 800525a:	b570      	push	{r4, r5, r6, lr}
 800525c:	681d      	ldr	r5, [r3, #0]
 800525e:	4606      	mov	r6, r0
 8005260:	460c      	mov	r4, r1
 8005262:	b125      	cbz	r5, 800526e <__swsetup_r+0x16>
 8005264:	69ab      	ldr	r3, [r5, #24]
 8005266:	b913      	cbnz	r3, 800526e <__swsetup_r+0x16>
 8005268:	4628      	mov	r0, r5
 800526a:	f000 f953 	bl	8005514 <__sinit>
 800526e:	4b2e      	ldr	r3, [pc, #184]	; (8005328 <__swsetup_r+0xd0>)
 8005270:	429c      	cmp	r4, r3
 8005272:	d10f      	bne.n	8005294 <__swsetup_r+0x3c>
 8005274:	686c      	ldr	r4, [r5, #4]
 8005276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800527a:	b29a      	uxth	r2, r3
 800527c:	0715      	lsls	r5, r2, #28
 800527e:	d42c      	bmi.n	80052da <__swsetup_r+0x82>
 8005280:	06d0      	lsls	r0, r2, #27
 8005282:	d411      	bmi.n	80052a8 <__swsetup_r+0x50>
 8005284:	2209      	movs	r2, #9
 8005286:	6032      	str	r2, [r6, #0]
 8005288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800528c:	81a3      	strh	r3, [r4, #12]
 800528e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005292:	e03e      	b.n	8005312 <__swsetup_r+0xba>
 8005294:	4b25      	ldr	r3, [pc, #148]	; (800532c <__swsetup_r+0xd4>)
 8005296:	429c      	cmp	r4, r3
 8005298:	d101      	bne.n	800529e <__swsetup_r+0x46>
 800529a:	68ac      	ldr	r4, [r5, #8]
 800529c:	e7eb      	b.n	8005276 <__swsetup_r+0x1e>
 800529e:	4b24      	ldr	r3, [pc, #144]	; (8005330 <__swsetup_r+0xd8>)
 80052a0:	429c      	cmp	r4, r3
 80052a2:	bf08      	it	eq
 80052a4:	68ec      	ldreq	r4, [r5, #12]
 80052a6:	e7e6      	b.n	8005276 <__swsetup_r+0x1e>
 80052a8:	0751      	lsls	r1, r2, #29
 80052aa:	d512      	bpl.n	80052d2 <__swsetup_r+0x7a>
 80052ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ae:	b141      	cbz	r1, 80052c2 <__swsetup_r+0x6a>
 80052b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052b4:	4299      	cmp	r1, r3
 80052b6:	d002      	beq.n	80052be <__swsetup_r+0x66>
 80052b8:	4630      	mov	r0, r6
 80052ba:	f000 fa19 	bl	80056f0 <_free_r>
 80052be:	2300      	movs	r3, #0
 80052c0:	6363      	str	r3, [r4, #52]	; 0x34
 80052c2:	89a3      	ldrh	r3, [r4, #12]
 80052c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052c8:	81a3      	strh	r3, [r4, #12]
 80052ca:	2300      	movs	r3, #0
 80052cc:	6063      	str	r3, [r4, #4]
 80052ce:	6923      	ldr	r3, [r4, #16]
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	f043 0308 	orr.w	r3, r3, #8
 80052d8:	81a3      	strh	r3, [r4, #12]
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	b94b      	cbnz	r3, 80052f2 <__swsetup_r+0x9a>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e8:	d003      	beq.n	80052f2 <__swsetup_r+0x9a>
 80052ea:	4621      	mov	r1, r4
 80052ec:	4630      	mov	r0, r6
 80052ee:	f000 f9bf 	bl	8005670 <__smakebuf_r>
 80052f2:	89a2      	ldrh	r2, [r4, #12]
 80052f4:	f012 0301 	ands.w	r3, r2, #1
 80052f8:	d00c      	beq.n	8005314 <__swsetup_r+0xbc>
 80052fa:	2300      	movs	r3, #0
 80052fc:	60a3      	str	r3, [r4, #8]
 80052fe:	6963      	ldr	r3, [r4, #20]
 8005300:	425b      	negs	r3, r3
 8005302:	61a3      	str	r3, [r4, #24]
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	b953      	cbnz	r3, 800531e <__swsetup_r+0xc6>
 8005308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800530c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005310:	d1ba      	bne.n	8005288 <__swsetup_r+0x30>
 8005312:	bd70      	pop	{r4, r5, r6, pc}
 8005314:	0792      	lsls	r2, r2, #30
 8005316:	bf58      	it	pl
 8005318:	6963      	ldrpl	r3, [r4, #20]
 800531a:	60a3      	str	r3, [r4, #8]
 800531c:	e7f2      	b.n	8005304 <__swsetup_r+0xac>
 800531e:	2000      	movs	r0, #0
 8005320:	e7f7      	b.n	8005312 <__swsetup_r+0xba>
 8005322:	bf00      	nop
 8005324:	20000018 	.word	0x20000018
 8005328:	08006638 	.word	0x08006638
 800532c:	08006658 	.word	0x08006658
 8005330:	08006618 	.word	0x08006618

08005334 <__sflush_r>:
 8005334:	898a      	ldrh	r2, [r1, #12]
 8005336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533a:	4605      	mov	r5, r0
 800533c:	0710      	lsls	r0, r2, #28
 800533e:	460c      	mov	r4, r1
 8005340:	d458      	bmi.n	80053f4 <__sflush_r+0xc0>
 8005342:	684b      	ldr	r3, [r1, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	dc05      	bgt.n	8005354 <__sflush_r+0x20>
 8005348:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800534a:	2b00      	cmp	r3, #0
 800534c:	dc02      	bgt.n	8005354 <__sflush_r+0x20>
 800534e:	2000      	movs	r0, #0
 8005350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005356:	2e00      	cmp	r6, #0
 8005358:	d0f9      	beq.n	800534e <__sflush_r+0x1a>
 800535a:	2300      	movs	r3, #0
 800535c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005360:	682f      	ldr	r7, [r5, #0]
 8005362:	6a21      	ldr	r1, [r4, #32]
 8005364:	602b      	str	r3, [r5, #0]
 8005366:	d032      	beq.n	80053ce <__sflush_r+0x9a>
 8005368:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	075a      	lsls	r2, r3, #29
 800536e:	d505      	bpl.n	800537c <__sflush_r+0x48>
 8005370:	6863      	ldr	r3, [r4, #4]
 8005372:	1ac0      	subs	r0, r0, r3
 8005374:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005376:	b10b      	cbz	r3, 800537c <__sflush_r+0x48>
 8005378:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800537a:	1ac0      	subs	r0, r0, r3
 800537c:	2300      	movs	r3, #0
 800537e:	4602      	mov	r2, r0
 8005380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005382:	6a21      	ldr	r1, [r4, #32]
 8005384:	4628      	mov	r0, r5
 8005386:	47b0      	blx	r6
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	89a3      	ldrh	r3, [r4, #12]
 800538c:	d106      	bne.n	800539c <__sflush_r+0x68>
 800538e:	6829      	ldr	r1, [r5, #0]
 8005390:	291d      	cmp	r1, #29
 8005392:	d848      	bhi.n	8005426 <__sflush_r+0xf2>
 8005394:	4a29      	ldr	r2, [pc, #164]	; (800543c <__sflush_r+0x108>)
 8005396:	40ca      	lsrs	r2, r1
 8005398:	07d6      	lsls	r6, r2, #31
 800539a:	d544      	bpl.n	8005426 <__sflush_r+0xf2>
 800539c:	2200      	movs	r2, #0
 800539e:	6062      	str	r2, [r4, #4]
 80053a0:	6922      	ldr	r2, [r4, #16]
 80053a2:	04d9      	lsls	r1, r3, #19
 80053a4:	6022      	str	r2, [r4, #0]
 80053a6:	d504      	bpl.n	80053b2 <__sflush_r+0x7e>
 80053a8:	1c42      	adds	r2, r0, #1
 80053aa:	d101      	bne.n	80053b0 <__sflush_r+0x7c>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	b903      	cbnz	r3, 80053b2 <__sflush_r+0x7e>
 80053b0:	6560      	str	r0, [r4, #84]	; 0x54
 80053b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053b4:	602f      	str	r7, [r5, #0]
 80053b6:	2900      	cmp	r1, #0
 80053b8:	d0c9      	beq.n	800534e <__sflush_r+0x1a>
 80053ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053be:	4299      	cmp	r1, r3
 80053c0:	d002      	beq.n	80053c8 <__sflush_r+0x94>
 80053c2:	4628      	mov	r0, r5
 80053c4:	f000 f994 	bl	80056f0 <_free_r>
 80053c8:	2000      	movs	r0, #0
 80053ca:	6360      	str	r0, [r4, #52]	; 0x34
 80053cc:	e7c0      	b.n	8005350 <__sflush_r+0x1c>
 80053ce:	2301      	movs	r3, #1
 80053d0:	4628      	mov	r0, r5
 80053d2:	47b0      	blx	r6
 80053d4:	1c41      	adds	r1, r0, #1
 80053d6:	d1c8      	bne.n	800536a <__sflush_r+0x36>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0c5      	beq.n	800536a <__sflush_r+0x36>
 80053de:	2b1d      	cmp	r3, #29
 80053e0:	d001      	beq.n	80053e6 <__sflush_r+0xb2>
 80053e2:	2b16      	cmp	r3, #22
 80053e4:	d101      	bne.n	80053ea <__sflush_r+0xb6>
 80053e6:	602f      	str	r7, [r5, #0]
 80053e8:	e7b1      	b.n	800534e <__sflush_r+0x1a>
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053f0:	81a3      	strh	r3, [r4, #12]
 80053f2:	e7ad      	b.n	8005350 <__sflush_r+0x1c>
 80053f4:	690f      	ldr	r7, [r1, #16]
 80053f6:	2f00      	cmp	r7, #0
 80053f8:	d0a9      	beq.n	800534e <__sflush_r+0x1a>
 80053fa:	0793      	lsls	r3, r2, #30
 80053fc:	bf18      	it	ne
 80053fe:	2300      	movne	r3, #0
 8005400:	680e      	ldr	r6, [r1, #0]
 8005402:	bf08      	it	eq
 8005404:	694b      	ldreq	r3, [r1, #20]
 8005406:	eba6 0807 	sub.w	r8, r6, r7
 800540a:	600f      	str	r7, [r1, #0]
 800540c:	608b      	str	r3, [r1, #8]
 800540e:	f1b8 0f00 	cmp.w	r8, #0
 8005412:	dd9c      	ble.n	800534e <__sflush_r+0x1a>
 8005414:	4643      	mov	r3, r8
 8005416:	463a      	mov	r2, r7
 8005418:	6a21      	ldr	r1, [r4, #32]
 800541a:	4628      	mov	r0, r5
 800541c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800541e:	47b0      	blx	r6
 8005420:	2800      	cmp	r0, #0
 8005422:	dc06      	bgt.n	8005432 <__sflush_r+0xfe>
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800542a:	81a3      	strh	r3, [r4, #12]
 800542c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005430:	e78e      	b.n	8005350 <__sflush_r+0x1c>
 8005432:	4407      	add	r7, r0
 8005434:	eba8 0800 	sub.w	r8, r8, r0
 8005438:	e7e9      	b.n	800540e <__sflush_r+0xda>
 800543a:	bf00      	nop
 800543c:	20400001 	.word	0x20400001

08005440 <_fflush_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	690b      	ldr	r3, [r1, #16]
 8005444:	4605      	mov	r5, r0
 8005446:	460c      	mov	r4, r1
 8005448:	b1db      	cbz	r3, 8005482 <_fflush_r+0x42>
 800544a:	b118      	cbz	r0, 8005454 <_fflush_r+0x14>
 800544c:	6983      	ldr	r3, [r0, #24]
 800544e:	b90b      	cbnz	r3, 8005454 <_fflush_r+0x14>
 8005450:	f000 f860 	bl	8005514 <__sinit>
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <_fflush_r+0x48>)
 8005456:	429c      	cmp	r4, r3
 8005458:	d109      	bne.n	800546e <_fflush_r+0x2e>
 800545a:	686c      	ldr	r4, [r5, #4]
 800545c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005460:	b17b      	cbz	r3, 8005482 <_fflush_r+0x42>
 8005462:	4621      	mov	r1, r4
 8005464:	4628      	mov	r0, r5
 8005466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800546a:	f7ff bf63 	b.w	8005334 <__sflush_r>
 800546e:	4b07      	ldr	r3, [pc, #28]	; (800548c <_fflush_r+0x4c>)
 8005470:	429c      	cmp	r4, r3
 8005472:	d101      	bne.n	8005478 <_fflush_r+0x38>
 8005474:	68ac      	ldr	r4, [r5, #8]
 8005476:	e7f1      	b.n	800545c <_fflush_r+0x1c>
 8005478:	4b05      	ldr	r3, [pc, #20]	; (8005490 <_fflush_r+0x50>)
 800547a:	429c      	cmp	r4, r3
 800547c:	bf08      	it	eq
 800547e:	68ec      	ldreq	r4, [r5, #12]
 8005480:	e7ec      	b.n	800545c <_fflush_r+0x1c>
 8005482:	2000      	movs	r0, #0
 8005484:	bd38      	pop	{r3, r4, r5, pc}
 8005486:	bf00      	nop
 8005488:	08006638 	.word	0x08006638
 800548c:	08006658 	.word	0x08006658
 8005490:	08006618 	.word	0x08006618

08005494 <std>:
 8005494:	2300      	movs	r3, #0
 8005496:	b510      	push	{r4, lr}
 8005498:	4604      	mov	r4, r0
 800549a:	e9c0 3300 	strd	r3, r3, [r0]
 800549e:	6083      	str	r3, [r0, #8]
 80054a0:	8181      	strh	r1, [r0, #12]
 80054a2:	6643      	str	r3, [r0, #100]	; 0x64
 80054a4:	81c2      	strh	r2, [r0, #14]
 80054a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054aa:	6183      	str	r3, [r0, #24]
 80054ac:	4619      	mov	r1, r3
 80054ae:	2208      	movs	r2, #8
 80054b0:	305c      	adds	r0, #92	; 0x5c
 80054b2:	f7ff fe13 	bl	80050dc <memset>
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <std+0x38>)
 80054b8:	6224      	str	r4, [r4, #32]
 80054ba:	6263      	str	r3, [r4, #36]	; 0x24
 80054bc:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <std+0x3c>)
 80054be:	62a3      	str	r3, [r4, #40]	; 0x28
 80054c0:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <std+0x40>)
 80054c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054c4:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <std+0x44>)
 80054c6:	6323      	str	r3, [r4, #48]	; 0x30
 80054c8:	bd10      	pop	{r4, pc}
 80054ca:	bf00      	nop
 80054cc:	0800585d 	.word	0x0800585d
 80054d0:	0800587f 	.word	0x0800587f
 80054d4:	080058b7 	.word	0x080058b7
 80054d8:	080058db 	.word	0x080058db

080054dc <_cleanup_r>:
 80054dc:	4901      	ldr	r1, [pc, #4]	; (80054e4 <_cleanup_r+0x8>)
 80054de:	f000 b885 	b.w	80055ec <_fwalk_reent>
 80054e2:	bf00      	nop
 80054e4:	08005441 	.word	0x08005441

080054e8 <__sfmoreglue>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	2568      	movs	r5, #104	; 0x68
 80054ec:	1e4a      	subs	r2, r1, #1
 80054ee:	4355      	muls	r5, r2
 80054f0:	460e      	mov	r6, r1
 80054f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80054f6:	f000 f947 	bl	8005788 <_malloc_r>
 80054fa:	4604      	mov	r4, r0
 80054fc:	b140      	cbz	r0, 8005510 <__sfmoreglue+0x28>
 80054fe:	2100      	movs	r1, #0
 8005500:	e9c0 1600 	strd	r1, r6, [r0]
 8005504:	300c      	adds	r0, #12
 8005506:	60a0      	str	r0, [r4, #8]
 8005508:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800550c:	f7ff fde6 	bl	80050dc <memset>
 8005510:	4620      	mov	r0, r4
 8005512:	bd70      	pop	{r4, r5, r6, pc}

08005514 <__sinit>:
 8005514:	6983      	ldr	r3, [r0, #24]
 8005516:	b510      	push	{r4, lr}
 8005518:	4604      	mov	r4, r0
 800551a:	bb33      	cbnz	r3, 800556a <__sinit+0x56>
 800551c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005520:	6503      	str	r3, [r0, #80]	; 0x50
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <__sinit+0x58>)
 8005524:	4a12      	ldr	r2, [pc, #72]	; (8005570 <__sinit+0x5c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6282      	str	r2, [r0, #40]	; 0x28
 800552a:	4298      	cmp	r0, r3
 800552c:	bf04      	itt	eq
 800552e:	2301      	moveq	r3, #1
 8005530:	6183      	streq	r3, [r0, #24]
 8005532:	f000 f81f 	bl	8005574 <__sfp>
 8005536:	6060      	str	r0, [r4, #4]
 8005538:	4620      	mov	r0, r4
 800553a:	f000 f81b 	bl	8005574 <__sfp>
 800553e:	60a0      	str	r0, [r4, #8]
 8005540:	4620      	mov	r0, r4
 8005542:	f000 f817 	bl	8005574 <__sfp>
 8005546:	2200      	movs	r2, #0
 8005548:	60e0      	str	r0, [r4, #12]
 800554a:	2104      	movs	r1, #4
 800554c:	6860      	ldr	r0, [r4, #4]
 800554e:	f7ff ffa1 	bl	8005494 <std>
 8005552:	2201      	movs	r2, #1
 8005554:	2109      	movs	r1, #9
 8005556:	68a0      	ldr	r0, [r4, #8]
 8005558:	f7ff ff9c 	bl	8005494 <std>
 800555c:	2202      	movs	r2, #2
 800555e:	2112      	movs	r1, #18
 8005560:	68e0      	ldr	r0, [r4, #12]
 8005562:	f7ff ff97 	bl	8005494 <std>
 8005566:	2301      	movs	r3, #1
 8005568:	61a3      	str	r3, [r4, #24]
 800556a:	bd10      	pop	{r4, pc}
 800556c:	08006614 	.word	0x08006614
 8005570:	080054dd 	.word	0x080054dd

08005574 <__sfp>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <__sfp+0x70>)
 8005578:	4607      	mov	r7, r0
 800557a:	681e      	ldr	r6, [r3, #0]
 800557c:	69b3      	ldr	r3, [r6, #24]
 800557e:	b913      	cbnz	r3, 8005586 <__sfp+0x12>
 8005580:	4630      	mov	r0, r6
 8005582:	f7ff ffc7 	bl	8005514 <__sinit>
 8005586:	3648      	adds	r6, #72	; 0x48
 8005588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800558c:	3b01      	subs	r3, #1
 800558e:	d503      	bpl.n	8005598 <__sfp+0x24>
 8005590:	6833      	ldr	r3, [r6, #0]
 8005592:	b133      	cbz	r3, 80055a2 <__sfp+0x2e>
 8005594:	6836      	ldr	r6, [r6, #0]
 8005596:	e7f7      	b.n	8005588 <__sfp+0x14>
 8005598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800559c:	b16d      	cbz	r5, 80055ba <__sfp+0x46>
 800559e:	3468      	adds	r4, #104	; 0x68
 80055a0:	e7f4      	b.n	800558c <__sfp+0x18>
 80055a2:	2104      	movs	r1, #4
 80055a4:	4638      	mov	r0, r7
 80055a6:	f7ff ff9f 	bl	80054e8 <__sfmoreglue>
 80055aa:	6030      	str	r0, [r6, #0]
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d1f1      	bne.n	8005594 <__sfp+0x20>
 80055b0:	230c      	movs	r3, #12
 80055b2:	4604      	mov	r4, r0
 80055b4:	603b      	str	r3, [r7, #0]
 80055b6:	4620      	mov	r0, r4
 80055b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ba:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <__sfp+0x74>)
 80055bc:	6665      	str	r5, [r4, #100]	; 0x64
 80055be:	e9c4 5500 	strd	r5, r5, [r4]
 80055c2:	60a5      	str	r5, [r4, #8]
 80055c4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80055c8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80055cc:	2208      	movs	r2, #8
 80055ce:	4629      	mov	r1, r5
 80055d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055d4:	f7ff fd82 	bl	80050dc <memset>
 80055d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055e0:	e7e9      	b.n	80055b6 <__sfp+0x42>
 80055e2:	bf00      	nop
 80055e4:	08006614 	.word	0x08006614
 80055e8:	ffff0001 	.word	0xffff0001

080055ec <_fwalk_reent>:
 80055ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f0:	4680      	mov	r8, r0
 80055f2:	4689      	mov	r9, r1
 80055f4:	2600      	movs	r6, #0
 80055f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055fa:	b914      	cbnz	r4, 8005602 <_fwalk_reent+0x16>
 80055fc:	4630      	mov	r0, r6
 80055fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005602:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005606:	3f01      	subs	r7, #1
 8005608:	d501      	bpl.n	800560e <_fwalk_reent+0x22>
 800560a:	6824      	ldr	r4, [r4, #0]
 800560c:	e7f5      	b.n	80055fa <_fwalk_reent+0xe>
 800560e:	89ab      	ldrh	r3, [r5, #12]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d907      	bls.n	8005624 <_fwalk_reent+0x38>
 8005614:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005618:	3301      	adds	r3, #1
 800561a:	d003      	beq.n	8005624 <_fwalk_reent+0x38>
 800561c:	4629      	mov	r1, r5
 800561e:	4640      	mov	r0, r8
 8005620:	47c8      	blx	r9
 8005622:	4306      	orrs	r6, r0
 8005624:	3568      	adds	r5, #104	; 0x68
 8005626:	e7ee      	b.n	8005606 <_fwalk_reent+0x1a>

08005628 <__swhatbuf_r>:
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	460e      	mov	r6, r1
 800562c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005630:	b096      	sub	sp, #88	; 0x58
 8005632:	2900      	cmp	r1, #0
 8005634:	4614      	mov	r4, r2
 8005636:	461d      	mov	r5, r3
 8005638:	da07      	bge.n	800564a <__swhatbuf_r+0x22>
 800563a:	2300      	movs	r3, #0
 800563c:	602b      	str	r3, [r5, #0]
 800563e:	89b3      	ldrh	r3, [r6, #12]
 8005640:	061a      	lsls	r2, r3, #24
 8005642:	d410      	bmi.n	8005666 <__swhatbuf_r+0x3e>
 8005644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005648:	e00e      	b.n	8005668 <__swhatbuf_r+0x40>
 800564a:	466a      	mov	r2, sp
 800564c:	f000 f96c 	bl	8005928 <_fstat_r>
 8005650:	2800      	cmp	r0, #0
 8005652:	dbf2      	blt.n	800563a <__swhatbuf_r+0x12>
 8005654:	9a01      	ldr	r2, [sp, #4]
 8005656:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800565a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800565e:	425a      	negs	r2, r3
 8005660:	415a      	adcs	r2, r3
 8005662:	602a      	str	r2, [r5, #0]
 8005664:	e7ee      	b.n	8005644 <__swhatbuf_r+0x1c>
 8005666:	2340      	movs	r3, #64	; 0x40
 8005668:	2000      	movs	r0, #0
 800566a:	6023      	str	r3, [r4, #0]
 800566c:	b016      	add	sp, #88	; 0x58
 800566e:	bd70      	pop	{r4, r5, r6, pc}

08005670 <__smakebuf_r>:
 8005670:	898b      	ldrh	r3, [r1, #12]
 8005672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005674:	079d      	lsls	r5, r3, #30
 8005676:	4606      	mov	r6, r0
 8005678:	460c      	mov	r4, r1
 800567a:	d507      	bpl.n	800568c <__smakebuf_r+0x1c>
 800567c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	6123      	str	r3, [r4, #16]
 8005684:	2301      	movs	r3, #1
 8005686:	6163      	str	r3, [r4, #20]
 8005688:	b002      	add	sp, #8
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	ab01      	add	r3, sp, #4
 800568e:	466a      	mov	r2, sp
 8005690:	f7ff ffca 	bl	8005628 <__swhatbuf_r>
 8005694:	9900      	ldr	r1, [sp, #0]
 8005696:	4605      	mov	r5, r0
 8005698:	4630      	mov	r0, r6
 800569a:	f000 f875 	bl	8005788 <_malloc_r>
 800569e:	b948      	cbnz	r0, 80056b4 <__smakebuf_r+0x44>
 80056a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a4:	059a      	lsls	r2, r3, #22
 80056a6:	d4ef      	bmi.n	8005688 <__smakebuf_r+0x18>
 80056a8:	f023 0303 	bic.w	r3, r3, #3
 80056ac:	f043 0302 	orr.w	r3, r3, #2
 80056b0:	81a3      	strh	r3, [r4, #12]
 80056b2:	e7e3      	b.n	800567c <__smakebuf_r+0xc>
 80056b4:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <__smakebuf_r+0x7c>)
 80056b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	6020      	str	r0, [r4, #0]
 80056bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c0:	81a3      	strh	r3, [r4, #12]
 80056c2:	9b00      	ldr	r3, [sp, #0]
 80056c4:	6120      	str	r0, [r4, #16]
 80056c6:	6163      	str	r3, [r4, #20]
 80056c8:	9b01      	ldr	r3, [sp, #4]
 80056ca:	b15b      	cbz	r3, 80056e4 <__smakebuf_r+0x74>
 80056cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056d0:	4630      	mov	r0, r6
 80056d2:	f000 f93b 	bl	800594c <_isatty_r>
 80056d6:	b128      	cbz	r0, 80056e4 <__smakebuf_r+0x74>
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	f023 0303 	bic.w	r3, r3, #3
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	431d      	orrs	r5, r3
 80056e8:	81a5      	strh	r5, [r4, #12]
 80056ea:	e7cd      	b.n	8005688 <__smakebuf_r+0x18>
 80056ec:	080054dd 	.word	0x080054dd

080056f0 <_free_r>:
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	4605      	mov	r5, r0
 80056f4:	2900      	cmp	r1, #0
 80056f6:	d043      	beq.n	8005780 <_free_r+0x90>
 80056f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056fc:	1f0c      	subs	r4, r1, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	bfb8      	it	lt
 8005702:	18e4      	addlt	r4, r4, r3
 8005704:	f000 f944 	bl	8005990 <__malloc_lock>
 8005708:	4a1e      	ldr	r2, [pc, #120]	; (8005784 <_free_r+0x94>)
 800570a:	6813      	ldr	r3, [r2, #0]
 800570c:	4610      	mov	r0, r2
 800570e:	b933      	cbnz	r3, 800571e <_free_r+0x2e>
 8005710:	6063      	str	r3, [r4, #4]
 8005712:	6014      	str	r4, [r2, #0]
 8005714:	4628      	mov	r0, r5
 8005716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800571a:	f000 b93a 	b.w	8005992 <__malloc_unlock>
 800571e:	42a3      	cmp	r3, r4
 8005720:	d90b      	bls.n	800573a <_free_r+0x4a>
 8005722:	6821      	ldr	r1, [r4, #0]
 8005724:	1862      	adds	r2, r4, r1
 8005726:	4293      	cmp	r3, r2
 8005728:	bf01      	itttt	eq
 800572a:	681a      	ldreq	r2, [r3, #0]
 800572c:	685b      	ldreq	r3, [r3, #4]
 800572e:	1852      	addeq	r2, r2, r1
 8005730:	6022      	streq	r2, [r4, #0]
 8005732:	6063      	str	r3, [r4, #4]
 8005734:	6004      	str	r4, [r0, #0]
 8005736:	e7ed      	b.n	8005714 <_free_r+0x24>
 8005738:	4613      	mov	r3, r2
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	b10a      	cbz	r2, 8005742 <_free_r+0x52>
 800573e:	42a2      	cmp	r2, r4
 8005740:	d9fa      	bls.n	8005738 <_free_r+0x48>
 8005742:	6819      	ldr	r1, [r3, #0]
 8005744:	1858      	adds	r0, r3, r1
 8005746:	42a0      	cmp	r0, r4
 8005748:	d10b      	bne.n	8005762 <_free_r+0x72>
 800574a:	6820      	ldr	r0, [r4, #0]
 800574c:	4401      	add	r1, r0
 800574e:	1858      	adds	r0, r3, r1
 8005750:	4282      	cmp	r2, r0
 8005752:	6019      	str	r1, [r3, #0]
 8005754:	d1de      	bne.n	8005714 <_free_r+0x24>
 8005756:	6810      	ldr	r0, [r2, #0]
 8005758:	6852      	ldr	r2, [r2, #4]
 800575a:	4401      	add	r1, r0
 800575c:	6019      	str	r1, [r3, #0]
 800575e:	605a      	str	r2, [r3, #4]
 8005760:	e7d8      	b.n	8005714 <_free_r+0x24>
 8005762:	d902      	bls.n	800576a <_free_r+0x7a>
 8005764:	230c      	movs	r3, #12
 8005766:	602b      	str	r3, [r5, #0]
 8005768:	e7d4      	b.n	8005714 <_free_r+0x24>
 800576a:	6820      	ldr	r0, [r4, #0]
 800576c:	1821      	adds	r1, r4, r0
 800576e:	428a      	cmp	r2, r1
 8005770:	bf01      	itttt	eq
 8005772:	6811      	ldreq	r1, [r2, #0]
 8005774:	6852      	ldreq	r2, [r2, #4]
 8005776:	1809      	addeq	r1, r1, r0
 8005778:	6021      	streq	r1, [r4, #0]
 800577a:	6062      	str	r2, [r4, #4]
 800577c:	605c      	str	r4, [r3, #4]
 800577e:	e7c9      	b.n	8005714 <_free_r+0x24>
 8005780:	bd38      	pop	{r3, r4, r5, pc}
 8005782:	bf00      	nop
 8005784:	200000a8 	.word	0x200000a8

08005788 <_malloc_r>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	1ccd      	adds	r5, r1, #3
 800578c:	f025 0503 	bic.w	r5, r5, #3
 8005790:	3508      	adds	r5, #8
 8005792:	2d0c      	cmp	r5, #12
 8005794:	bf38      	it	cc
 8005796:	250c      	movcc	r5, #12
 8005798:	2d00      	cmp	r5, #0
 800579a:	4606      	mov	r6, r0
 800579c:	db01      	blt.n	80057a2 <_malloc_r+0x1a>
 800579e:	42a9      	cmp	r1, r5
 80057a0:	d903      	bls.n	80057aa <_malloc_r+0x22>
 80057a2:	230c      	movs	r3, #12
 80057a4:	6033      	str	r3, [r6, #0]
 80057a6:	2000      	movs	r0, #0
 80057a8:	bd70      	pop	{r4, r5, r6, pc}
 80057aa:	f000 f8f1 	bl	8005990 <__malloc_lock>
 80057ae:	4a21      	ldr	r2, [pc, #132]	; (8005834 <_malloc_r+0xac>)
 80057b0:	6814      	ldr	r4, [r2, #0]
 80057b2:	4621      	mov	r1, r4
 80057b4:	b991      	cbnz	r1, 80057dc <_malloc_r+0x54>
 80057b6:	4c20      	ldr	r4, [pc, #128]	; (8005838 <_malloc_r+0xb0>)
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	b91b      	cbnz	r3, 80057c4 <_malloc_r+0x3c>
 80057bc:	4630      	mov	r0, r6
 80057be:	f000 f83d 	bl	800583c <_sbrk_r>
 80057c2:	6020      	str	r0, [r4, #0]
 80057c4:	4629      	mov	r1, r5
 80057c6:	4630      	mov	r0, r6
 80057c8:	f000 f838 	bl	800583c <_sbrk_r>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d124      	bne.n	800581a <_malloc_r+0x92>
 80057d0:	230c      	movs	r3, #12
 80057d2:	4630      	mov	r0, r6
 80057d4:	6033      	str	r3, [r6, #0]
 80057d6:	f000 f8dc 	bl	8005992 <__malloc_unlock>
 80057da:	e7e4      	b.n	80057a6 <_malloc_r+0x1e>
 80057dc:	680b      	ldr	r3, [r1, #0]
 80057de:	1b5b      	subs	r3, r3, r5
 80057e0:	d418      	bmi.n	8005814 <_malloc_r+0x8c>
 80057e2:	2b0b      	cmp	r3, #11
 80057e4:	d90f      	bls.n	8005806 <_malloc_r+0x7e>
 80057e6:	600b      	str	r3, [r1, #0]
 80057e8:	18cc      	adds	r4, r1, r3
 80057ea:	50cd      	str	r5, [r1, r3]
 80057ec:	4630      	mov	r0, r6
 80057ee:	f000 f8d0 	bl	8005992 <__malloc_unlock>
 80057f2:	f104 000b 	add.w	r0, r4, #11
 80057f6:	1d23      	adds	r3, r4, #4
 80057f8:	f020 0007 	bic.w	r0, r0, #7
 80057fc:	1ac3      	subs	r3, r0, r3
 80057fe:	d0d3      	beq.n	80057a8 <_malloc_r+0x20>
 8005800:	425a      	negs	r2, r3
 8005802:	50e2      	str	r2, [r4, r3]
 8005804:	e7d0      	b.n	80057a8 <_malloc_r+0x20>
 8005806:	684b      	ldr	r3, [r1, #4]
 8005808:	428c      	cmp	r4, r1
 800580a:	bf16      	itet	ne
 800580c:	6063      	strne	r3, [r4, #4]
 800580e:	6013      	streq	r3, [r2, #0]
 8005810:	460c      	movne	r4, r1
 8005812:	e7eb      	b.n	80057ec <_malloc_r+0x64>
 8005814:	460c      	mov	r4, r1
 8005816:	6849      	ldr	r1, [r1, #4]
 8005818:	e7cc      	b.n	80057b4 <_malloc_r+0x2c>
 800581a:	1cc4      	adds	r4, r0, #3
 800581c:	f024 0403 	bic.w	r4, r4, #3
 8005820:	42a0      	cmp	r0, r4
 8005822:	d005      	beq.n	8005830 <_malloc_r+0xa8>
 8005824:	1a21      	subs	r1, r4, r0
 8005826:	4630      	mov	r0, r6
 8005828:	f000 f808 	bl	800583c <_sbrk_r>
 800582c:	3001      	adds	r0, #1
 800582e:	d0cf      	beq.n	80057d0 <_malloc_r+0x48>
 8005830:	6025      	str	r5, [r4, #0]
 8005832:	e7db      	b.n	80057ec <_malloc_r+0x64>
 8005834:	200000a8 	.word	0x200000a8
 8005838:	200000ac 	.word	0x200000ac

0800583c <_sbrk_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	2300      	movs	r3, #0
 8005840:	4c05      	ldr	r4, [pc, #20]	; (8005858 <_sbrk_r+0x1c>)
 8005842:	4605      	mov	r5, r0
 8005844:	4608      	mov	r0, r1
 8005846:	6023      	str	r3, [r4, #0]
 8005848:	f7fc f8c4 	bl	80019d4 <_sbrk>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d102      	bne.n	8005856 <_sbrk_r+0x1a>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	b103      	cbz	r3, 8005856 <_sbrk_r+0x1a>
 8005854:	602b      	str	r3, [r5, #0]
 8005856:	bd38      	pop	{r3, r4, r5, pc}
 8005858:	20000178 	.word	0x20000178

0800585c <__sread>:
 800585c:	b510      	push	{r4, lr}
 800585e:	460c      	mov	r4, r1
 8005860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005864:	f000 f896 	bl	8005994 <_read_r>
 8005868:	2800      	cmp	r0, #0
 800586a:	bfab      	itete	ge
 800586c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800586e:	89a3      	ldrhlt	r3, [r4, #12]
 8005870:	181b      	addge	r3, r3, r0
 8005872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005876:	bfac      	ite	ge
 8005878:	6563      	strge	r3, [r4, #84]	; 0x54
 800587a:	81a3      	strhlt	r3, [r4, #12]
 800587c:	bd10      	pop	{r4, pc}

0800587e <__swrite>:
 800587e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005882:	461f      	mov	r7, r3
 8005884:	898b      	ldrh	r3, [r1, #12]
 8005886:	4605      	mov	r5, r0
 8005888:	05db      	lsls	r3, r3, #23
 800588a:	460c      	mov	r4, r1
 800588c:	4616      	mov	r6, r2
 800588e:	d505      	bpl.n	800589c <__swrite+0x1e>
 8005890:	2302      	movs	r3, #2
 8005892:	2200      	movs	r2, #0
 8005894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005898:	f000 f868 	bl	800596c <_lseek_r>
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	4632      	mov	r2, r6
 80058a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a4:	81a3      	strh	r3, [r4, #12]
 80058a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058aa:	463b      	mov	r3, r7
 80058ac:	4628      	mov	r0, r5
 80058ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058b2:	f000 b817 	b.w	80058e4 <_write_r>

080058b6 <__sseek>:
 80058b6:	b510      	push	{r4, lr}
 80058b8:	460c      	mov	r4, r1
 80058ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058be:	f000 f855 	bl	800596c <_lseek_r>
 80058c2:	1c43      	adds	r3, r0, #1
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	bf15      	itete	ne
 80058c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80058ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058d2:	81a3      	strheq	r3, [r4, #12]
 80058d4:	bf18      	it	ne
 80058d6:	81a3      	strhne	r3, [r4, #12]
 80058d8:	bd10      	pop	{r4, pc}

080058da <__sclose>:
 80058da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058de:	f000 b813 	b.w	8005908 <_close_r>
	...

080058e4 <_write_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4605      	mov	r5, r0
 80058e8:	4608      	mov	r0, r1
 80058ea:	4611      	mov	r1, r2
 80058ec:	2200      	movs	r2, #0
 80058ee:	4c05      	ldr	r4, [pc, #20]	; (8005904 <_write_r+0x20>)
 80058f0:	6022      	str	r2, [r4, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	f7fb fb6a 	bl	8000fcc <_write>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d102      	bne.n	8005902 <_write_r+0x1e>
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	b103      	cbz	r3, 8005902 <_write_r+0x1e>
 8005900:	602b      	str	r3, [r5, #0]
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	20000178 	.word	0x20000178

08005908 <_close_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	2300      	movs	r3, #0
 800590c:	4c05      	ldr	r4, [pc, #20]	; (8005924 <_close_r+0x1c>)
 800590e:	4605      	mov	r5, r0
 8005910:	4608      	mov	r0, r1
 8005912:	6023      	str	r3, [r4, #0]
 8005914:	f7fc f88a 	bl	8001a2c <_close>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_close_r+0x1a>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	b103      	cbz	r3, 8005922 <_close_r+0x1a>
 8005920:	602b      	str	r3, [r5, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	20000178 	.word	0x20000178

08005928 <_fstat_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	2300      	movs	r3, #0
 800592c:	4c06      	ldr	r4, [pc, #24]	; (8005948 <_fstat_r+0x20>)
 800592e:	4605      	mov	r5, r0
 8005930:	4608      	mov	r0, r1
 8005932:	4611      	mov	r1, r2
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	f7fc f884 	bl	8001a42 <_fstat>
 800593a:	1c43      	adds	r3, r0, #1
 800593c:	d102      	bne.n	8005944 <_fstat_r+0x1c>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	b103      	cbz	r3, 8005944 <_fstat_r+0x1c>
 8005942:	602b      	str	r3, [r5, #0]
 8005944:	bd38      	pop	{r3, r4, r5, pc}
 8005946:	bf00      	nop
 8005948:	20000178 	.word	0x20000178

0800594c <_isatty_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	2300      	movs	r3, #0
 8005950:	4c05      	ldr	r4, [pc, #20]	; (8005968 <_isatty_r+0x1c>)
 8005952:	4605      	mov	r5, r0
 8005954:	4608      	mov	r0, r1
 8005956:	6023      	str	r3, [r4, #0]
 8005958:	f7fc f882 	bl	8001a60 <_isatty>
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	d102      	bne.n	8005966 <_isatty_r+0x1a>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	b103      	cbz	r3, 8005966 <_isatty_r+0x1a>
 8005964:	602b      	str	r3, [r5, #0]
 8005966:	bd38      	pop	{r3, r4, r5, pc}
 8005968:	20000178 	.word	0x20000178

0800596c <_lseek_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	4605      	mov	r5, r0
 8005970:	4608      	mov	r0, r1
 8005972:	4611      	mov	r1, r2
 8005974:	2200      	movs	r2, #0
 8005976:	4c05      	ldr	r4, [pc, #20]	; (800598c <_lseek_r+0x20>)
 8005978:	6022      	str	r2, [r4, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	f7fc f87a 	bl	8001a74 <_lseek>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d102      	bne.n	800598a <_lseek_r+0x1e>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	b103      	cbz	r3, 800598a <_lseek_r+0x1e>
 8005988:	602b      	str	r3, [r5, #0]
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	20000178 	.word	0x20000178

08005990 <__malloc_lock>:
 8005990:	4770      	bx	lr

08005992 <__malloc_unlock>:
 8005992:	4770      	bx	lr

08005994 <_read_r>:
 8005994:	b538      	push	{r3, r4, r5, lr}
 8005996:	4605      	mov	r5, r0
 8005998:	4608      	mov	r0, r1
 800599a:	4611      	mov	r1, r2
 800599c:	2200      	movs	r2, #0
 800599e:	4c05      	ldr	r4, [pc, #20]	; (80059b4 <_read_r+0x20>)
 80059a0:	6022      	str	r2, [r4, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	f7fb fff8 	bl	8001998 <_read>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	d102      	bne.n	80059b2 <_read_r+0x1e>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	b103      	cbz	r3, 80059b2 <_read_r+0x1e>
 80059b0:	602b      	str	r3, [r5, #0]
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	20000178 	.word	0x20000178

080059b8 <cosf>:
 80059b8:	b507      	push	{r0, r1, r2, lr}
 80059ba:	4a18      	ldr	r2, [pc, #96]	; (8005a1c <cosf+0x64>)
 80059bc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80059c0:	4293      	cmp	r3, r2
 80059c2:	4601      	mov	r1, r0
 80059c4:	dc03      	bgt.n	80059ce <cosf+0x16>
 80059c6:	2100      	movs	r1, #0
 80059c8:	f000 f9f8 	bl	8005dbc <__kernel_cosf>
 80059cc:	e004      	b.n	80059d8 <cosf+0x20>
 80059ce:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80059d2:	db04      	blt.n	80059de <cosf+0x26>
 80059d4:	f7fa ffde 	bl	8000994 <__aeabi_fsub>
 80059d8:	b003      	add	sp, #12
 80059da:	f85d fb04 	ldr.w	pc, [sp], #4
 80059de:	4669      	mov	r1, sp
 80059e0:	f000 f894 	bl	8005b0c <__ieee754_rem_pio2f>
 80059e4:	f000 0203 	and.w	r2, r0, #3
 80059e8:	2a01      	cmp	r2, #1
 80059ea:	d005      	beq.n	80059f8 <cosf+0x40>
 80059ec:	2a02      	cmp	r2, #2
 80059ee:	d00a      	beq.n	8005a06 <cosf+0x4e>
 80059f0:	b972      	cbnz	r2, 8005a10 <cosf+0x58>
 80059f2:	9901      	ldr	r1, [sp, #4]
 80059f4:	9800      	ldr	r0, [sp, #0]
 80059f6:	e7e7      	b.n	80059c8 <cosf+0x10>
 80059f8:	9901      	ldr	r1, [sp, #4]
 80059fa:	9800      	ldr	r0, [sp, #0]
 80059fc:	f000 fcfc 	bl	80063f8 <__kernel_sinf>
 8005a00:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005a04:	e7e8      	b.n	80059d8 <cosf+0x20>
 8005a06:	9901      	ldr	r1, [sp, #4]
 8005a08:	9800      	ldr	r0, [sp, #0]
 8005a0a:	f000 f9d7 	bl	8005dbc <__kernel_cosf>
 8005a0e:	e7f7      	b.n	8005a00 <cosf+0x48>
 8005a10:	2201      	movs	r2, #1
 8005a12:	9901      	ldr	r1, [sp, #4]
 8005a14:	9800      	ldr	r0, [sp, #0]
 8005a16:	f000 fcef 	bl	80063f8 <__kernel_sinf>
 8005a1a:	e7dd      	b.n	80059d8 <cosf+0x20>
 8005a1c:	3f490fd8 	.word	0x3f490fd8

08005a20 <floorf>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8005a26:	0df5      	lsrs	r5, r6, #23
 8005a28:	3d7f      	subs	r5, #127	; 0x7f
 8005a2a:	2d16      	cmp	r5, #22
 8005a2c:	4601      	mov	r1, r0
 8005a2e:	4604      	mov	r4, r0
 8005a30:	dc26      	bgt.n	8005a80 <floorf+0x60>
 8005a32:	2d00      	cmp	r5, #0
 8005a34:	da0e      	bge.n	8005a54 <floorf+0x34>
 8005a36:	4917      	ldr	r1, [pc, #92]	; (8005a94 <floorf+0x74>)
 8005a38:	f7fa ffae 	bl	8000998 <__addsf3>
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	f7fb fa6f 	bl	8000f20 <__aeabi_fcmpgt>
 8005a42:	b128      	cbz	r0, 8005a50 <floorf+0x30>
 8005a44:	2c00      	cmp	r4, #0
 8005a46:	da23      	bge.n	8005a90 <floorf+0x70>
 8005a48:	4b13      	ldr	r3, [pc, #76]	; (8005a98 <floorf+0x78>)
 8005a4a:	2e00      	cmp	r6, #0
 8005a4c:	bf18      	it	ne
 8005a4e:	461c      	movne	r4, r3
 8005a50:	4621      	mov	r1, r4
 8005a52:	e01b      	b.n	8005a8c <floorf+0x6c>
 8005a54:	4e11      	ldr	r6, [pc, #68]	; (8005a9c <floorf+0x7c>)
 8005a56:	412e      	asrs	r6, r5
 8005a58:	4230      	tst	r0, r6
 8005a5a:	d017      	beq.n	8005a8c <floorf+0x6c>
 8005a5c:	490d      	ldr	r1, [pc, #52]	; (8005a94 <floorf+0x74>)
 8005a5e:	f7fa ff9b 	bl	8000998 <__addsf3>
 8005a62:	2100      	movs	r1, #0
 8005a64:	f7fb fa5c 	bl	8000f20 <__aeabi_fcmpgt>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d0f1      	beq.n	8005a50 <floorf+0x30>
 8005a6c:	2c00      	cmp	r4, #0
 8005a6e:	bfbe      	ittt	lt
 8005a70:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8005a74:	fa43 f505 	asrlt.w	r5, r3, r5
 8005a78:	1964      	addlt	r4, r4, r5
 8005a7a:	ea24 0406 	bic.w	r4, r4, r6
 8005a7e:	e7e7      	b.n	8005a50 <floorf+0x30>
 8005a80:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005a84:	d302      	bcc.n	8005a8c <floorf+0x6c>
 8005a86:	f7fa ff87 	bl	8000998 <__addsf3>
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	2400      	movs	r4, #0
 8005a92:	e7dd      	b.n	8005a50 <floorf+0x30>
 8005a94:	7149f2ca 	.word	0x7149f2ca
 8005a98:	bf800000 	.word	0xbf800000
 8005a9c:	007fffff 	.word	0x007fffff

08005aa0 <sinf>:
 8005aa0:	b507      	push	{r0, r1, r2, lr}
 8005aa2:	4a19      	ldr	r2, [pc, #100]	; (8005b08 <sinf+0x68>)
 8005aa4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	4601      	mov	r1, r0
 8005aac:	dc04      	bgt.n	8005ab8 <sinf+0x18>
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	f000 fca1 	bl	80063f8 <__kernel_sinf>
 8005ab6:	e004      	b.n	8005ac2 <sinf+0x22>
 8005ab8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005abc:	db04      	blt.n	8005ac8 <sinf+0x28>
 8005abe:	f7fa ff69 	bl	8000994 <__aeabi_fsub>
 8005ac2:	b003      	add	sp, #12
 8005ac4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ac8:	4669      	mov	r1, sp
 8005aca:	f000 f81f 	bl	8005b0c <__ieee754_rem_pio2f>
 8005ace:	f000 0003 	and.w	r0, r0, #3
 8005ad2:	2801      	cmp	r0, #1
 8005ad4:	d006      	beq.n	8005ae4 <sinf+0x44>
 8005ad6:	2802      	cmp	r0, #2
 8005ad8:	d009      	beq.n	8005aee <sinf+0x4e>
 8005ada:	b980      	cbnz	r0, 8005afe <sinf+0x5e>
 8005adc:	2201      	movs	r2, #1
 8005ade:	9901      	ldr	r1, [sp, #4]
 8005ae0:	9800      	ldr	r0, [sp, #0]
 8005ae2:	e7e6      	b.n	8005ab2 <sinf+0x12>
 8005ae4:	9901      	ldr	r1, [sp, #4]
 8005ae6:	9800      	ldr	r0, [sp, #0]
 8005ae8:	f000 f968 	bl	8005dbc <__kernel_cosf>
 8005aec:	e7e9      	b.n	8005ac2 <sinf+0x22>
 8005aee:	2201      	movs	r2, #1
 8005af0:	9901      	ldr	r1, [sp, #4]
 8005af2:	9800      	ldr	r0, [sp, #0]
 8005af4:	f000 fc80 	bl	80063f8 <__kernel_sinf>
 8005af8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005afc:	e7e1      	b.n	8005ac2 <sinf+0x22>
 8005afe:	9901      	ldr	r1, [sp, #4]
 8005b00:	9800      	ldr	r0, [sp, #0]
 8005b02:	f000 f95b 	bl	8005dbc <__kernel_cosf>
 8005b06:	e7f7      	b.n	8005af8 <sinf+0x58>
 8005b08:	3f490fd8 	.word	0x3f490fd8

08005b0c <__ieee754_rem_pio2f>:
 8005b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	4a9d      	ldr	r2, [pc, #628]	; (8005d88 <__ieee754_rem_pio2f+0x27c>)
 8005b12:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8005b16:	4295      	cmp	r5, r2
 8005b18:	b087      	sub	sp, #28
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	4607      	mov	r7, r0
 8005b1e:	dc04      	bgt.n	8005b2a <__ieee754_rem_pio2f+0x1e>
 8005b20:	2300      	movs	r3, #0
 8005b22:	6020      	str	r0, [r4, #0]
 8005b24:	604b      	str	r3, [r1, #4]
 8005b26:	2600      	movs	r6, #0
 8005b28:	e01a      	b.n	8005b60 <__ieee754_rem_pio2f+0x54>
 8005b2a:	4a98      	ldr	r2, [pc, #608]	; (8005d8c <__ieee754_rem_pio2f+0x280>)
 8005b2c:	4295      	cmp	r5, r2
 8005b2e:	dc4b      	bgt.n	8005bc8 <__ieee754_rem_pio2f+0xbc>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	f025 050f 	bic.w	r5, r5, #15
 8005b36:	4996      	ldr	r1, [pc, #600]	; (8005d90 <__ieee754_rem_pio2f+0x284>)
 8005b38:	4e96      	ldr	r6, [pc, #600]	; (8005d94 <__ieee754_rem_pio2f+0x288>)
 8005b3a:	dd23      	ble.n	8005b84 <__ieee754_rem_pio2f+0x78>
 8005b3c:	f7fa ff2a 	bl	8000994 <__aeabi_fsub>
 8005b40:	42b5      	cmp	r5, r6
 8005b42:	4607      	mov	r7, r0
 8005b44:	d010      	beq.n	8005b68 <__ieee754_rem_pio2f+0x5c>
 8005b46:	4994      	ldr	r1, [pc, #592]	; (8005d98 <__ieee754_rem_pio2f+0x28c>)
 8005b48:	f7fa ff24 	bl	8000994 <__aeabi_fsub>
 8005b4c:	4601      	mov	r1, r0
 8005b4e:	6020      	str	r0, [r4, #0]
 8005b50:	4638      	mov	r0, r7
 8005b52:	f7fa ff1f 	bl	8000994 <__aeabi_fsub>
 8005b56:	4990      	ldr	r1, [pc, #576]	; (8005d98 <__ieee754_rem_pio2f+0x28c>)
 8005b58:	f7fa ff1c 	bl	8000994 <__aeabi_fsub>
 8005b5c:	2601      	movs	r6, #1
 8005b5e:	6060      	str	r0, [r4, #4]
 8005b60:	4630      	mov	r0, r6
 8005b62:	b007      	add	sp, #28
 8005b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b68:	498c      	ldr	r1, [pc, #560]	; (8005d9c <__ieee754_rem_pio2f+0x290>)
 8005b6a:	f7fa ff13 	bl	8000994 <__aeabi_fsub>
 8005b6e:	498c      	ldr	r1, [pc, #560]	; (8005da0 <__ieee754_rem_pio2f+0x294>)
 8005b70:	4605      	mov	r5, r0
 8005b72:	f7fa ff0f 	bl	8000994 <__aeabi_fsub>
 8005b76:	4601      	mov	r1, r0
 8005b78:	6020      	str	r0, [r4, #0]
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f7fa ff0a 	bl	8000994 <__aeabi_fsub>
 8005b80:	4987      	ldr	r1, [pc, #540]	; (8005da0 <__ieee754_rem_pio2f+0x294>)
 8005b82:	e7e9      	b.n	8005b58 <__ieee754_rem_pio2f+0x4c>
 8005b84:	f7fa ff08 	bl	8000998 <__addsf3>
 8005b88:	42b5      	cmp	r5, r6
 8005b8a:	4607      	mov	r7, r0
 8005b8c:	d00e      	beq.n	8005bac <__ieee754_rem_pio2f+0xa0>
 8005b8e:	4982      	ldr	r1, [pc, #520]	; (8005d98 <__ieee754_rem_pio2f+0x28c>)
 8005b90:	f7fa ff02 	bl	8000998 <__addsf3>
 8005b94:	4601      	mov	r1, r0
 8005b96:	6020      	str	r0, [r4, #0]
 8005b98:	4638      	mov	r0, r7
 8005b9a:	f7fa fefb 	bl	8000994 <__aeabi_fsub>
 8005b9e:	497e      	ldr	r1, [pc, #504]	; (8005d98 <__ieee754_rem_pio2f+0x28c>)
 8005ba0:	f7fa fefa 	bl	8000998 <__addsf3>
 8005ba4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005ba8:	6060      	str	r0, [r4, #4]
 8005baa:	e7d9      	b.n	8005b60 <__ieee754_rem_pio2f+0x54>
 8005bac:	497b      	ldr	r1, [pc, #492]	; (8005d9c <__ieee754_rem_pio2f+0x290>)
 8005bae:	f7fa fef3 	bl	8000998 <__addsf3>
 8005bb2:	497b      	ldr	r1, [pc, #492]	; (8005da0 <__ieee754_rem_pio2f+0x294>)
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	f7fa feef 	bl	8000998 <__addsf3>
 8005bba:	4601      	mov	r1, r0
 8005bbc:	6020      	str	r0, [r4, #0]
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f7fa fee8 	bl	8000994 <__aeabi_fsub>
 8005bc4:	4976      	ldr	r1, [pc, #472]	; (8005da0 <__ieee754_rem_pio2f+0x294>)
 8005bc6:	e7eb      	b.n	8005ba0 <__ieee754_rem_pio2f+0x94>
 8005bc8:	4a76      	ldr	r2, [pc, #472]	; (8005da4 <__ieee754_rem_pio2f+0x298>)
 8005bca:	4295      	cmp	r5, r2
 8005bcc:	f300 808c 	bgt.w	8005ce8 <__ieee754_rem_pio2f+0x1dc>
 8005bd0:	f000 fc88 	bl	80064e4 <fabsf>
 8005bd4:	4974      	ldr	r1, [pc, #464]	; (8005da8 <__ieee754_rem_pio2f+0x29c>)
 8005bd6:	4680      	mov	r8, r0
 8005bd8:	f7fa ffe6 	bl	8000ba8 <__aeabi_fmul>
 8005bdc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005be0:	f7fa feda 	bl	8000998 <__addsf3>
 8005be4:	f7fb f9a6 	bl	8000f34 <__aeabi_f2iz>
 8005be8:	4606      	mov	r6, r0
 8005bea:	f7fa ff89 	bl	8000b00 <__aeabi_i2f>
 8005bee:	4968      	ldr	r1, [pc, #416]	; (8005d90 <__ieee754_rem_pio2f+0x284>)
 8005bf0:	4682      	mov	sl, r0
 8005bf2:	f7fa ffd9 	bl	8000ba8 <__aeabi_fmul>
 8005bf6:	4601      	mov	r1, r0
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	f7fa fecb 	bl	8000994 <__aeabi_fsub>
 8005bfe:	4966      	ldr	r1, [pc, #408]	; (8005d98 <__ieee754_rem_pio2f+0x28c>)
 8005c00:	4680      	mov	r8, r0
 8005c02:	4650      	mov	r0, sl
 8005c04:	f7fa ffd0 	bl	8000ba8 <__aeabi_fmul>
 8005c08:	2e1f      	cmp	r6, #31
 8005c0a:	4681      	mov	r9, r0
 8005c0c:	dc0c      	bgt.n	8005c28 <__ieee754_rem_pio2f+0x11c>
 8005c0e:	4a67      	ldr	r2, [pc, #412]	; (8005dac <__ieee754_rem_pio2f+0x2a0>)
 8005c10:	1e71      	subs	r1, r6, #1
 8005c12:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005c16:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d004      	beq.n	8005c28 <__ieee754_rem_pio2f+0x11c>
 8005c1e:	4649      	mov	r1, r9
 8005c20:	4640      	mov	r0, r8
 8005c22:	f7fa feb7 	bl	8000994 <__aeabi_fsub>
 8005c26:	e009      	b.n	8005c3c <__ieee754_rem_pio2f+0x130>
 8005c28:	4649      	mov	r1, r9
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	f7fa feb2 	bl	8000994 <__aeabi_fsub>
 8005c30:	15ed      	asrs	r5, r5, #23
 8005c32:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005c36:	1aeb      	subs	r3, r5, r3
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	dc01      	bgt.n	8005c40 <__ieee754_rem_pio2f+0x134>
 8005c3c:	6020      	str	r0, [r4, #0]
 8005c3e:	e024      	b.n	8005c8a <__ieee754_rem_pio2f+0x17e>
 8005c40:	4956      	ldr	r1, [pc, #344]	; (8005d9c <__ieee754_rem_pio2f+0x290>)
 8005c42:	4650      	mov	r0, sl
 8005c44:	f7fa ffb0 	bl	8000ba8 <__aeabi_fmul>
 8005c48:	4681      	mov	r9, r0
 8005c4a:	4601      	mov	r1, r0
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	f7fa fea1 	bl	8000994 <__aeabi_fsub>
 8005c52:	4601      	mov	r1, r0
 8005c54:	4683      	mov	fp, r0
 8005c56:	4640      	mov	r0, r8
 8005c58:	f7fa fe9c 	bl	8000994 <__aeabi_fsub>
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	f7fa fe99 	bl	8000994 <__aeabi_fsub>
 8005c62:	4680      	mov	r8, r0
 8005c64:	494e      	ldr	r1, [pc, #312]	; (8005da0 <__ieee754_rem_pio2f+0x294>)
 8005c66:	4650      	mov	r0, sl
 8005c68:	f7fa ff9e 	bl	8000ba8 <__aeabi_fmul>
 8005c6c:	4641      	mov	r1, r8
 8005c6e:	f7fa fe91 	bl	8000994 <__aeabi_fsub>
 8005c72:	4601      	mov	r1, r0
 8005c74:	4681      	mov	r9, r0
 8005c76:	4658      	mov	r0, fp
 8005c78:	f7fa fe8c 	bl	8000994 <__aeabi_fsub>
 8005c7c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8005c80:	1aed      	subs	r5, r5, r3
 8005c82:	2d19      	cmp	r5, #25
 8005c84:	dc15      	bgt.n	8005cb2 <__ieee754_rem_pio2f+0x1a6>
 8005c86:	46d8      	mov	r8, fp
 8005c88:	6020      	str	r0, [r4, #0]
 8005c8a:	6825      	ldr	r5, [r4, #0]
 8005c8c:	4640      	mov	r0, r8
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7fa fe80 	bl	8000994 <__aeabi_fsub>
 8005c94:	4649      	mov	r1, r9
 8005c96:	f7fa fe7d 	bl	8000994 <__aeabi_fsub>
 8005c9a:	2f00      	cmp	r7, #0
 8005c9c:	6060      	str	r0, [r4, #4]
 8005c9e:	f6bf af5f 	bge.w	8005b60 <__ieee754_rem_pio2f+0x54>
 8005ca2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005ca6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005caa:	6025      	str	r5, [r4, #0]
 8005cac:	6060      	str	r0, [r4, #4]
 8005cae:	4276      	negs	r6, r6
 8005cb0:	e756      	b.n	8005b60 <__ieee754_rem_pio2f+0x54>
 8005cb2:	493f      	ldr	r1, [pc, #252]	; (8005db0 <__ieee754_rem_pio2f+0x2a4>)
 8005cb4:	4650      	mov	r0, sl
 8005cb6:	f7fa ff77 	bl	8000ba8 <__aeabi_fmul>
 8005cba:	4605      	mov	r5, r0
 8005cbc:	4601      	mov	r1, r0
 8005cbe:	4658      	mov	r0, fp
 8005cc0:	f7fa fe68 	bl	8000994 <__aeabi_fsub>
 8005cc4:	4601      	mov	r1, r0
 8005cc6:	4680      	mov	r8, r0
 8005cc8:	4658      	mov	r0, fp
 8005cca:	f7fa fe63 	bl	8000994 <__aeabi_fsub>
 8005cce:	4629      	mov	r1, r5
 8005cd0:	f7fa fe60 	bl	8000994 <__aeabi_fsub>
 8005cd4:	4605      	mov	r5, r0
 8005cd6:	4937      	ldr	r1, [pc, #220]	; (8005db4 <__ieee754_rem_pio2f+0x2a8>)
 8005cd8:	4650      	mov	r0, sl
 8005cda:	f7fa ff65 	bl	8000ba8 <__aeabi_fmul>
 8005cde:	4629      	mov	r1, r5
 8005ce0:	f7fa fe58 	bl	8000994 <__aeabi_fsub>
 8005ce4:	4681      	mov	r9, r0
 8005ce6:	e79a      	b.n	8005c1e <__ieee754_rem_pio2f+0x112>
 8005ce8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005cec:	db05      	blt.n	8005cfa <__ieee754_rem_pio2f+0x1ee>
 8005cee:	4601      	mov	r1, r0
 8005cf0:	f7fa fe50 	bl	8000994 <__aeabi_fsub>
 8005cf4:	6060      	str	r0, [r4, #4]
 8005cf6:	6020      	str	r0, [r4, #0]
 8005cf8:	e715      	b.n	8005b26 <__ieee754_rem_pio2f+0x1a>
 8005cfa:	15ee      	asrs	r6, r5, #23
 8005cfc:	3e86      	subs	r6, #134	; 0x86
 8005cfe:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 8005d02:	4628      	mov	r0, r5
 8005d04:	f7fb f916 	bl	8000f34 <__aeabi_f2iz>
 8005d08:	f7fa fefa 	bl	8000b00 <__aeabi_i2f>
 8005d0c:	4601      	mov	r1, r0
 8005d0e:	9003      	str	r0, [sp, #12]
 8005d10:	4628      	mov	r0, r5
 8005d12:	f7fa fe3f 	bl	8000994 <__aeabi_fsub>
 8005d16:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005d1a:	f7fa ff45 	bl	8000ba8 <__aeabi_fmul>
 8005d1e:	4680      	mov	r8, r0
 8005d20:	f7fb f908 	bl	8000f34 <__aeabi_f2iz>
 8005d24:	f7fa feec 	bl	8000b00 <__aeabi_i2f>
 8005d28:	4601      	mov	r1, r0
 8005d2a:	9004      	str	r0, [sp, #16]
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	4640      	mov	r0, r8
 8005d30:	f7fa fe30 	bl	8000994 <__aeabi_fsub>
 8005d34:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8005d38:	f7fa ff36 	bl	8000ba8 <__aeabi_fmul>
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	9005      	str	r0, [sp, #20]
 8005d40:	f7fb f8c6 	bl	8000ed0 <__aeabi_fcmpeq>
 8005d44:	b1e8      	cbz	r0, 8005d82 <__ieee754_rem_pio2f+0x276>
 8005d46:	2100      	movs	r1, #0
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f7fb f8c1 	bl	8000ed0 <__aeabi_fcmpeq>
 8005d4e:	2800      	cmp	r0, #0
 8005d50:	bf14      	ite	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	2302      	moveq	r3, #2
 8005d56:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <__ieee754_rem_pio2f+0x2ac>)
 8005d58:	4621      	mov	r1, r4
 8005d5a:	9201      	str	r2, [sp, #4]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	a803      	add	r0, sp, #12
 8005d60:	9200      	str	r2, [sp, #0]
 8005d62:	4632      	mov	r2, r6
 8005d64:	f000 f8aa 	bl	8005ebc <__kernel_rem_pio2f>
 8005d68:	2f00      	cmp	r7, #0
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	f6bf aef8 	bge.w	8005b60 <__ieee754_rem_pio2f+0x54>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d76:	6023      	str	r3, [r4, #0]
 8005d78:	6863      	ldr	r3, [r4, #4]
 8005d7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d7e:	6063      	str	r3, [r4, #4]
 8005d80:	e795      	b.n	8005cae <__ieee754_rem_pio2f+0x1a2>
 8005d82:	2303      	movs	r3, #3
 8005d84:	e7e7      	b.n	8005d56 <__ieee754_rem_pio2f+0x24a>
 8005d86:	bf00      	nop
 8005d88:	3f490fd8 	.word	0x3f490fd8
 8005d8c:	4016cbe3 	.word	0x4016cbe3
 8005d90:	3fc90f80 	.word	0x3fc90f80
 8005d94:	3fc90fd0 	.word	0x3fc90fd0
 8005d98:	37354443 	.word	0x37354443
 8005d9c:	37354400 	.word	0x37354400
 8005da0:	2e85a308 	.word	0x2e85a308
 8005da4:	43490f80 	.word	0x43490f80
 8005da8:	3f22f984 	.word	0x3f22f984
 8005dac:	08006678 	.word	0x08006678
 8005db0:	2e85a300 	.word	0x2e85a300
 8005db4:	248d3132 	.word	0x248d3132
 8005db8:	080066f8 	.word	0x080066f8

08005dbc <__kernel_cosf>:
 8005dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc0:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8005dc4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8005dc8:	4606      	mov	r6, r0
 8005dca:	4688      	mov	r8, r1
 8005dcc:	da03      	bge.n	8005dd6 <__kernel_cosf+0x1a>
 8005dce:	f7fb f8b1 	bl	8000f34 <__aeabi_f2iz>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d05c      	beq.n	8005e90 <__kernel_cosf+0xd4>
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f7fa fee5 	bl	8000ba8 <__aeabi_fmul>
 8005dde:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005de2:	4605      	mov	r5, r0
 8005de4:	f7fa fee0 	bl	8000ba8 <__aeabi_fmul>
 8005de8:	492b      	ldr	r1, [pc, #172]	; (8005e98 <__kernel_cosf+0xdc>)
 8005dea:	4607      	mov	r7, r0
 8005dec:	4628      	mov	r0, r5
 8005dee:	f7fa fedb 	bl	8000ba8 <__aeabi_fmul>
 8005df2:	492a      	ldr	r1, [pc, #168]	; (8005e9c <__kernel_cosf+0xe0>)
 8005df4:	f7fa fdd0 	bl	8000998 <__addsf3>
 8005df8:	4629      	mov	r1, r5
 8005dfa:	f7fa fed5 	bl	8000ba8 <__aeabi_fmul>
 8005dfe:	4928      	ldr	r1, [pc, #160]	; (8005ea0 <__kernel_cosf+0xe4>)
 8005e00:	f7fa fdc8 	bl	8000994 <__aeabi_fsub>
 8005e04:	4629      	mov	r1, r5
 8005e06:	f7fa fecf 	bl	8000ba8 <__aeabi_fmul>
 8005e0a:	4926      	ldr	r1, [pc, #152]	; (8005ea4 <__kernel_cosf+0xe8>)
 8005e0c:	f7fa fdc4 	bl	8000998 <__addsf3>
 8005e10:	4629      	mov	r1, r5
 8005e12:	f7fa fec9 	bl	8000ba8 <__aeabi_fmul>
 8005e16:	4924      	ldr	r1, [pc, #144]	; (8005ea8 <__kernel_cosf+0xec>)
 8005e18:	f7fa fdbc 	bl	8000994 <__aeabi_fsub>
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	f7fa fec3 	bl	8000ba8 <__aeabi_fmul>
 8005e22:	4922      	ldr	r1, [pc, #136]	; (8005eac <__kernel_cosf+0xf0>)
 8005e24:	f7fa fdb8 	bl	8000998 <__addsf3>
 8005e28:	4629      	mov	r1, r5
 8005e2a:	f7fa febd 	bl	8000ba8 <__aeabi_fmul>
 8005e2e:	4629      	mov	r1, r5
 8005e30:	f7fa feba 	bl	8000ba8 <__aeabi_fmul>
 8005e34:	4641      	mov	r1, r8
 8005e36:	4605      	mov	r5, r0
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f7fa feb5 	bl	8000ba8 <__aeabi_fmul>
 8005e3e:	4601      	mov	r1, r0
 8005e40:	4628      	mov	r0, r5
 8005e42:	f7fa fda7 	bl	8000994 <__aeabi_fsub>
 8005e46:	4b1a      	ldr	r3, [pc, #104]	; (8005eb0 <__kernel_cosf+0xf4>)
 8005e48:	4605      	mov	r5, r0
 8005e4a:	429c      	cmp	r4, r3
 8005e4c:	dc0a      	bgt.n	8005e64 <__kernel_cosf+0xa8>
 8005e4e:	4601      	mov	r1, r0
 8005e50:	4638      	mov	r0, r7
 8005e52:	f7fa fd9f 	bl	8000994 <__aeabi_fsub>
 8005e56:	4601      	mov	r1, r0
 8005e58:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005e5c:	f7fa fd9a 	bl	8000994 <__aeabi_fsub>
 8005e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e64:	4b13      	ldr	r3, [pc, #76]	; (8005eb4 <__kernel_cosf+0xf8>)
 8005e66:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005e6a:	429c      	cmp	r4, r3
 8005e6c:	bfcc      	ite	gt
 8005e6e:	4c12      	ldrgt	r4, [pc, #72]	; (8005eb8 <__kernel_cosf+0xfc>)
 8005e70:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8005e74:	4621      	mov	r1, r4
 8005e76:	f7fa fd8d 	bl	8000994 <__aeabi_fsub>
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	4638      	mov	r0, r7
 8005e80:	f7fa fd88 	bl	8000994 <__aeabi_fsub>
 8005e84:	4629      	mov	r1, r5
 8005e86:	f7fa fd85 	bl	8000994 <__aeabi_fsub>
 8005e8a:	4601      	mov	r1, r0
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	e7e5      	b.n	8005e5c <__kernel_cosf+0xa0>
 8005e90:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005e94:	e7e4      	b.n	8005e60 <__kernel_cosf+0xa4>
 8005e96:	bf00      	nop
 8005e98:	ad47d74e 	.word	0xad47d74e
 8005e9c:	310f74f6 	.word	0x310f74f6
 8005ea0:	3493f27c 	.word	0x3493f27c
 8005ea4:	37d00d01 	.word	0x37d00d01
 8005ea8:	3ab60b61 	.word	0x3ab60b61
 8005eac:	3d2aaaab 	.word	0x3d2aaaab
 8005eb0:	3e999999 	.word	0x3e999999
 8005eb4:	3f480000 	.word	0x3f480000
 8005eb8:	3e900000 	.word	0x3e900000

08005ebc <__kernel_rem_pio2f>:
 8005ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec0:	b0d9      	sub	sp, #356	; 0x164
 8005ec2:	9304      	str	r3, [sp, #16]
 8005ec4:	9101      	str	r1, [sp, #4]
 8005ec6:	4bc3      	ldr	r3, [pc, #780]	; (80061d4 <__kernel_rem_pio2f+0x318>)
 8005ec8:	9962      	ldr	r1, [sp, #392]	; 0x188
 8005eca:	1ed4      	subs	r4, r2, #3
 8005ecc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005ed0:	2500      	movs	r5, #0
 8005ed2:	9302      	str	r3, [sp, #8]
 8005ed4:	9b04      	ldr	r3, [sp, #16]
 8005ed6:	f04f 0a00 	mov.w	sl, #0
 8005eda:	3b01      	subs	r3, #1
 8005edc:	9303      	str	r3, [sp, #12]
 8005ede:	2308      	movs	r3, #8
 8005ee0:	fb94 f4f3 	sdiv	r4, r4, r3
 8005ee4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005ee8:	1c66      	adds	r6, r4, #1
 8005eea:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8005eee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005ef2:	eb03 0802 	add.w	r8, r3, r2
 8005ef6:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8005ef8:	1aa7      	subs	r7, r4, r2
 8005efa:	9005      	str	r0, [sp, #20]
 8005efc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005f00:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 8005f04:	4545      	cmp	r5, r8
 8005f06:	dd7f      	ble.n	8006008 <__kernel_rem_pio2f+0x14c>
 8005f08:	f04f 0800 	mov.w	r8, #0
 8005f0c:	f04f 0a00 	mov.w	sl, #0
 8005f10:	f06f 0b03 	mvn.w	fp, #3
 8005f14:	9b04      	ldr	r3, [sp, #16]
 8005f16:	aa1c      	add	r2, sp, #112	; 0x70
 8005f18:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005f1c:	ab44      	add	r3, sp, #272	; 0x110
 8005f1e:	9a02      	ldr	r2, [sp, #8]
 8005f20:	4590      	cmp	r8, r2
 8005f22:	f340 8097 	ble.w	8006054 <__kernel_rem_pio2f+0x198>
 8005f26:	4613      	mov	r3, r2
 8005f28:	aa08      	add	r2, sp, #32
 8005f2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f2e:	9307      	str	r3, [sp, #28]
 8005f30:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8005f32:	9f02      	ldr	r7, [sp, #8]
 8005f34:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005f38:	9306      	str	r3, [sp, #24]
 8005f3a:	46ba      	mov	sl, r7
 8005f3c:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8005f40:	ab58      	add	r3, sp, #352	; 0x160
 8005f42:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8005f46:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8005f4a:	ad07      	add	r5, sp, #28
 8005f4c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8005f50:	f1ba 0f00 	cmp.w	sl, #0
 8005f54:	f300 8081 	bgt.w	800605a <__kernel_rem_pio2f+0x19e>
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 fac6 	bl	80064ec <scalbnf>
 8005f60:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8005f64:	4604      	mov	r4, r0
 8005f66:	f7fa fe1f 	bl	8000ba8 <__aeabi_fmul>
 8005f6a:	f7ff fd59 	bl	8005a20 <floorf>
 8005f6e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8005f72:	f7fa fe19 	bl	8000ba8 <__aeabi_fmul>
 8005f76:	4601      	mov	r1, r0
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7fa fd0b 	bl	8000994 <__aeabi_fsub>
 8005f7e:	4604      	mov	r4, r0
 8005f80:	f7fa ffd8 	bl	8000f34 <__aeabi_f2iz>
 8005f84:	4681      	mov	r9, r0
 8005f86:	f7fa fdbb 	bl	8000b00 <__aeabi_i2f>
 8005f8a:	4601      	mov	r1, r0
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7fa fd01 	bl	8000994 <__aeabi_fsub>
 8005f92:	2e00      	cmp	r6, #0
 8005f94:	4604      	mov	r4, r0
 8005f96:	dd7e      	ble.n	8006096 <__kernel_rem_pio2f+0x1da>
 8005f98:	1e7b      	subs	r3, r7, #1
 8005f9a:	aa08      	add	r2, sp, #32
 8005f9c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8005fa0:	f1c6 0208 	rsb	r2, r6, #8
 8005fa4:	fa45 f002 	asr.w	r0, r5, r2
 8005fa8:	4481      	add	r9, r0
 8005faa:	4090      	lsls	r0, r2
 8005fac:	1a2d      	subs	r5, r5, r0
 8005fae:	aa08      	add	r2, sp, #32
 8005fb0:	f1c6 0007 	rsb	r0, r6, #7
 8005fb4:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8005fb8:	4105      	asrs	r5, r0
 8005fba:	2d00      	cmp	r5, #0
 8005fbc:	dd79      	ble.n	80060b2 <__kernel_rem_pio2f+0x1f6>
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	4690      	mov	r8, r2
 8005fc2:	f109 0901 	add.w	r9, r9, #1
 8005fc6:	4297      	cmp	r7, r2
 8005fc8:	f300 80ae 	bgt.w	8006128 <__kernel_rem_pio2f+0x26c>
 8005fcc:	2e00      	cmp	r6, #0
 8005fce:	dd05      	ble.n	8005fdc <__kernel_rem_pio2f+0x120>
 8005fd0:	2e01      	cmp	r6, #1
 8005fd2:	f000 80c0 	beq.w	8006156 <__kernel_rem_pio2f+0x29a>
 8005fd6:	2e02      	cmp	r6, #2
 8005fd8:	f000 80c7 	beq.w	800616a <__kernel_rem_pio2f+0x2ae>
 8005fdc:	2d02      	cmp	r5, #2
 8005fde:	d168      	bne.n	80060b2 <__kernel_rem_pio2f+0x1f6>
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005fe6:	f7fa fcd5 	bl	8000994 <__aeabi_fsub>
 8005fea:	4604      	mov	r4, r0
 8005fec:	f1b8 0f00 	cmp.w	r8, #0
 8005ff0:	d05f      	beq.n	80060b2 <__kernel_rem_pio2f+0x1f6>
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005ff8:	f000 fa78 	bl	80064ec <scalbnf>
 8005ffc:	4601      	mov	r1, r0
 8005ffe:	4620      	mov	r0, r4
 8006000:	f7fa fcc8 	bl	8000994 <__aeabi_fsub>
 8006004:	4604      	mov	r4, r0
 8006006:	e054      	b.n	80060b2 <__kernel_rem_pio2f+0x1f6>
 8006008:	42ef      	cmn	r7, r5
 800600a:	d407      	bmi.n	800601c <__kernel_rem_pio2f+0x160>
 800600c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006010:	f7fa fd76 	bl	8000b00 <__aeabi_i2f>
 8006014:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8006018:	3501      	adds	r5, #1
 800601a:	e773      	b.n	8005f04 <__kernel_rem_pio2f+0x48>
 800601c:	4650      	mov	r0, sl
 800601e:	e7f9      	b.n	8006014 <__kernel_rem_pio2f+0x158>
 8006020:	fb0b 5207 	mla	r2, fp, r7, r5
 8006024:	9306      	str	r3, [sp, #24]
 8006026:	9b05      	ldr	r3, [sp, #20]
 8006028:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800602c:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8006030:	f7fa fdba 	bl	8000ba8 <__aeabi_fmul>
 8006034:	4601      	mov	r1, r0
 8006036:	4648      	mov	r0, r9
 8006038:	f7fa fcae 	bl	8000998 <__addsf3>
 800603c:	4681      	mov	r9, r0
 800603e:	9b06      	ldr	r3, [sp, #24]
 8006040:	3701      	adds	r7, #1
 8006042:	9a03      	ldr	r2, [sp, #12]
 8006044:	4297      	cmp	r7, r2
 8006046:	ddeb      	ble.n	8006020 <__kernel_rem_pio2f+0x164>
 8006048:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 800604c:	3504      	adds	r5, #4
 800604e:	f108 0801 	add.w	r8, r8, #1
 8006052:	e764      	b.n	8005f1e <__kernel_rem_pio2f+0x62>
 8006054:	46d1      	mov	r9, sl
 8006056:	2700      	movs	r7, #0
 8006058:	e7f3      	b.n	8006042 <__kernel_rem_pio2f+0x186>
 800605a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800605e:	4620      	mov	r0, r4
 8006060:	f7fa fda2 	bl	8000ba8 <__aeabi_fmul>
 8006064:	f7fa ff66 	bl	8000f34 <__aeabi_f2iz>
 8006068:	f7fa fd4a 	bl	8000b00 <__aeabi_i2f>
 800606c:	4641      	mov	r1, r8
 800606e:	4683      	mov	fp, r0
 8006070:	f7fa fd9a 	bl	8000ba8 <__aeabi_fmul>
 8006074:	4601      	mov	r1, r0
 8006076:	4620      	mov	r0, r4
 8006078:	f7fa fc8c 	bl	8000994 <__aeabi_fsub>
 800607c:	f7fa ff5a 	bl	8000f34 <__aeabi_f2iz>
 8006080:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006084:	f845 0f04 	str.w	r0, [r5, #4]!
 8006088:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800608c:	4658      	mov	r0, fp
 800608e:	f7fa fc83 	bl	8000998 <__addsf3>
 8006092:	4604      	mov	r4, r0
 8006094:	e75c      	b.n	8005f50 <__kernel_rem_pio2f+0x94>
 8006096:	d105      	bne.n	80060a4 <__kernel_rem_pio2f+0x1e8>
 8006098:	1e7b      	subs	r3, r7, #1
 800609a:	aa08      	add	r2, sp, #32
 800609c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80060a0:	122d      	asrs	r5, r5, #8
 80060a2:	e78a      	b.n	8005fba <__kernel_rem_pio2f+0xfe>
 80060a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80060a8:	f7fa ff30 	bl	8000f0c <__aeabi_fcmpge>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d139      	bne.n	8006124 <__kernel_rem_pio2f+0x268>
 80060b0:	4605      	mov	r5, r0
 80060b2:	2100      	movs	r1, #0
 80060b4:	4620      	mov	r0, r4
 80060b6:	f7fa ff0b 	bl	8000ed0 <__aeabi_fcmpeq>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	f000 80a0 	beq.w	8006200 <__kernel_rem_pio2f+0x344>
 80060c0:	1e7c      	subs	r4, r7, #1
 80060c2:	4623      	mov	r3, r4
 80060c4:	2200      	movs	r2, #0
 80060c6:	9902      	ldr	r1, [sp, #8]
 80060c8:	428b      	cmp	r3, r1
 80060ca:	da55      	bge.n	8006178 <__kernel_rem_pio2f+0x2bc>
 80060cc:	2a00      	cmp	r2, #0
 80060ce:	d07e      	beq.n	80061ce <__kernel_rem_pio2f+0x312>
 80060d0:	ab08      	add	r3, sp, #32
 80060d2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80060d6:	3e08      	subs	r6, #8
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 808f 	beq.w	80061fc <__kernel_rem_pio2f+0x340>
 80060de:	4631      	mov	r1, r6
 80060e0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80060e4:	f000 fa02 	bl	80064ec <scalbnf>
 80060e8:	46a0      	mov	r8, r4
 80060ea:	4682      	mov	sl, r0
 80060ec:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 80060f0:	af44      	add	r7, sp, #272	; 0x110
 80060f2:	f1b8 0f00 	cmp.w	r8, #0
 80060f6:	f280 80b5 	bge.w	8006264 <__kernel_rem_pio2f+0x3a8>
 80060fa:	f04f 0a00 	mov.w	sl, #0
 80060fe:	2300      	movs	r3, #0
 8006100:	00a6      	lsls	r6, r4, #2
 8006102:	4a35      	ldr	r2, [pc, #212]	; (80061d8 <__kernel_rem_pio2f+0x31c>)
 8006104:	4437      	add	r7, r6
 8006106:	eba4 010a 	sub.w	r1, r4, sl
 800610a:	2900      	cmp	r1, #0
 800610c:	f280 80db 	bge.w	80062c6 <__kernel_rem_pio2f+0x40a>
 8006110:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8006112:	2b03      	cmp	r3, #3
 8006114:	f200 80ff 	bhi.w	8006316 <__kernel_rem_pio2f+0x45a>
 8006118:	e8df f013 	tbh	[pc, r3, lsl #1]
 800611c:	01200102 	.word	0x01200102
 8006120:	00d90120 	.word	0x00d90120
 8006124:	2502      	movs	r5, #2
 8006126:	e74a      	b.n	8005fbe <__kernel_rem_pio2f+0x102>
 8006128:	ab08      	add	r3, sp, #32
 800612a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612e:	f1b8 0f00 	cmp.w	r8, #0
 8006132:	d109      	bne.n	8006148 <__kernel_rem_pio2f+0x28c>
 8006134:	b12b      	cbz	r3, 8006142 <__kernel_rem_pio2f+0x286>
 8006136:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800613a:	a908      	add	r1, sp, #32
 800613c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006140:	2301      	movs	r3, #1
 8006142:	3201      	adds	r2, #1
 8006144:	4698      	mov	r8, r3
 8006146:	e73e      	b.n	8005fc6 <__kernel_rem_pio2f+0x10a>
 8006148:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800614c:	a908      	add	r1, sp, #32
 800614e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006152:	4643      	mov	r3, r8
 8006154:	e7f5      	b.n	8006142 <__kernel_rem_pio2f+0x286>
 8006156:	1e7a      	subs	r2, r7, #1
 8006158:	ab08      	add	r3, sp, #32
 800615a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006162:	a908      	add	r1, sp, #32
 8006164:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006168:	e738      	b.n	8005fdc <__kernel_rem_pio2f+0x120>
 800616a:	1e7a      	subs	r2, r7, #1
 800616c:	ab08      	add	r3, sp, #32
 800616e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006176:	e7f4      	b.n	8006162 <__kernel_rem_pio2f+0x2a6>
 8006178:	a908      	add	r1, sp, #32
 800617a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800617e:	3b01      	subs	r3, #1
 8006180:	430a      	orrs	r2, r1
 8006182:	e7a0      	b.n	80060c6 <__kernel_rem_pio2f+0x20a>
 8006184:	3301      	adds	r3, #1
 8006186:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800618a:	2900      	cmp	r1, #0
 800618c:	d0fa      	beq.n	8006184 <__kernel_rem_pio2f+0x2c8>
 800618e:	f06f 0803 	mvn.w	r8, #3
 8006192:	9a04      	ldr	r2, [sp, #16]
 8006194:	1c7d      	adds	r5, r7, #1
 8006196:	18bc      	adds	r4, r7, r2
 8006198:	aa1c      	add	r2, sp, #112	; 0x70
 800619a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800619e:	441f      	add	r7, r3
 80061a0:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80061a4:	42af      	cmp	r7, r5
 80061a6:	f6ff aec8 	blt.w	8005f3a <__kernel_rem_pio2f+0x7e>
 80061aa:	9b06      	ldr	r3, [sp, #24]
 80061ac:	f04f 0a00 	mov.w	sl, #0
 80061b0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061b4:	f7fa fca4 	bl	8000b00 <__aeabi_i2f>
 80061b8:	f04f 0b00 	mov.w	fp, #0
 80061bc:	6020      	str	r0, [r4, #0]
 80061be:	9b03      	ldr	r3, [sp, #12]
 80061c0:	459a      	cmp	sl, r3
 80061c2:	dd0b      	ble.n	80061dc <__kernel_rem_pio2f+0x320>
 80061c4:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 80061c8:	3404      	adds	r4, #4
 80061ca:	3501      	adds	r5, #1
 80061cc:	e7ea      	b.n	80061a4 <__kernel_rem_pio2f+0x2e8>
 80061ce:	9a07      	ldr	r2, [sp, #28]
 80061d0:	2301      	movs	r3, #1
 80061d2:	e7d8      	b.n	8006186 <__kernel_rem_pio2f+0x2ca>
 80061d4:	08006a3c 	.word	0x08006a3c
 80061d8:	08006a10 	.word	0x08006a10
 80061dc:	fb08 f30a 	mul.w	r3, r8, sl
 80061e0:	9a05      	ldr	r2, [sp, #20]
 80061e2:	58e0      	ldr	r0, [r4, r3]
 80061e4:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 80061e8:	f7fa fcde 	bl	8000ba8 <__aeabi_fmul>
 80061ec:	4601      	mov	r1, r0
 80061ee:	4658      	mov	r0, fp
 80061f0:	f7fa fbd2 	bl	8000998 <__addsf3>
 80061f4:	f10a 0a01 	add.w	sl, sl, #1
 80061f8:	4683      	mov	fp, r0
 80061fa:	e7e0      	b.n	80061be <__kernel_rem_pio2f+0x302>
 80061fc:	3c01      	subs	r4, #1
 80061fe:	e767      	b.n	80060d0 <__kernel_rem_pio2f+0x214>
 8006200:	4271      	negs	r1, r6
 8006202:	4620      	mov	r0, r4
 8006204:	f000 f972 	bl	80064ec <scalbnf>
 8006208:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800620c:	4604      	mov	r4, r0
 800620e:	f7fa fe7d 	bl	8000f0c <__aeabi_fcmpge>
 8006212:	b1f8      	cbz	r0, 8006254 <__kernel_rem_pio2f+0x398>
 8006214:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8006218:	4620      	mov	r0, r4
 800621a:	f7fa fcc5 	bl	8000ba8 <__aeabi_fmul>
 800621e:	f7fa fe89 	bl	8000f34 <__aeabi_f2iz>
 8006222:	f7fa fc6d 	bl	8000b00 <__aeabi_i2f>
 8006226:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800622a:	4680      	mov	r8, r0
 800622c:	f7fa fcbc 	bl	8000ba8 <__aeabi_fmul>
 8006230:	4601      	mov	r1, r0
 8006232:	4620      	mov	r0, r4
 8006234:	f7fa fbae 	bl	8000994 <__aeabi_fsub>
 8006238:	f7fa fe7c 	bl	8000f34 <__aeabi_f2iz>
 800623c:	ab08      	add	r3, sp, #32
 800623e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006242:	4640      	mov	r0, r8
 8006244:	f7fa fe76 	bl	8000f34 <__aeabi_f2iz>
 8006248:	1c7c      	adds	r4, r7, #1
 800624a:	ab08      	add	r3, sp, #32
 800624c:	3608      	adds	r6, #8
 800624e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006252:	e744      	b.n	80060de <__kernel_rem_pio2f+0x222>
 8006254:	4620      	mov	r0, r4
 8006256:	f7fa fe6d 	bl	8000f34 <__aeabi_f2iz>
 800625a:	ab08      	add	r3, sp, #32
 800625c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006260:	463c      	mov	r4, r7
 8006262:	e73c      	b.n	80060de <__kernel_rem_pio2f+0x222>
 8006264:	ab08      	add	r3, sp, #32
 8006266:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800626a:	f7fa fc49 	bl	8000b00 <__aeabi_i2f>
 800626e:	4651      	mov	r1, sl
 8006270:	f7fa fc9a 	bl	8000ba8 <__aeabi_fmul>
 8006274:	4631      	mov	r1, r6
 8006276:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 800627a:	4650      	mov	r0, sl
 800627c:	f7fa fc94 	bl	8000ba8 <__aeabi_fmul>
 8006280:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006284:	4682      	mov	sl, r0
 8006286:	e734      	b.n	80060f2 <__kernel_rem_pio2f+0x236>
 8006288:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 800628c:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8006290:	9304      	str	r3, [sp, #16]
 8006292:	9203      	str	r2, [sp, #12]
 8006294:	f7fa fc88 	bl	8000ba8 <__aeabi_fmul>
 8006298:	4601      	mov	r1, r0
 800629a:	4658      	mov	r0, fp
 800629c:	f7fa fb7c 	bl	8000998 <__addsf3>
 80062a0:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80062a4:	4683      	mov	fp, r0
 80062a6:	f108 0801 	add.w	r8, r8, #1
 80062aa:	9902      	ldr	r1, [sp, #8]
 80062ac:	4588      	cmp	r8, r1
 80062ae:	dc01      	bgt.n	80062b4 <__kernel_rem_pio2f+0x3f8>
 80062b0:	45c2      	cmp	sl, r8
 80062b2:	dae9      	bge.n	8006288 <__kernel_rem_pio2f+0x3cc>
 80062b4:	a958      	add	r1, sp, #352	; 0x160
 80062b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062ba:	f841 bca0 	str.w	fp, [r1, #-160]
 80062be:	f10a 0a01 	add.w	sl, sl, #1
 80062c2:	3f04      	subs	r7, #4
 80062c4:	e71f      	b.n	8006106 <__kernel_rem_pio2f+0x24a>
 80062c6:	469b      	mov	fp, r3
 80062c8:	f04f 0800 	mov.w	r8, #0
 80062cc:	e7ed      	b.n	80062aa <__kernel_rem_pio2f+0x3ee>
 80062ce:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 80062d2:	4456      	add	r6, sl
 80062d4:	4637      	mov	r7, r6
 80062d6:	46a0      	mov	r8, r4
 80062d8:	f1b8 0f00 	cmp.w	r8, #0
 80062dc:	dc4a      	bgt.n	8006374 <__kernel_rem_pio2f+0x4b8>
 80062de:	4627      	mov	r7, r4
 80062e0:	2f01      	cmp	r7, #1
 80062e2:	dc60      	bgt.n	80063a6 <__kernel_rem_pio2f+0x4ea>
 80062e4:	2000      	movs	r0, #0
 80062e6:	2c01      	cmp	r4, #1
 80062e8:	dc74      	bgt.n	80063d4 <__kernel_rem_pio2f+0x518>
 80062ea:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80062ec:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80062ee:	2d00      	cmp	r5, #0
 80062f0:	d176      	bne.n	80063e0 <__kernel_rem_pio2f+0x524>
 80062f2:	9901      	ldr	r1, [sp, #4]
 80062f4:	600a      	str	r2, [r1, #0]
 80062f6:	460a      	mov	r2, r1
 80062f8:	604b      	str	r3, [r1, #4]
 80062fa:	6090      	str	r0, [r2, #8]
 80062fc:	e00b      	b.n	8006316 <__kernel_rem_pio2f+0x45a>
 80062fe:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8006302:	f7fa fb49 	bl	8000998 <__addsf3>
 8006306:	3c01      	subs	r4, #1
 8006308:	2c00      	cmp	r4, #0
 800630a:	daf8      	bge.n	80062fe <__kernel_rem_pio2f+0x442>
 800630c:	b10d      	cbz	r5, 8006312 <__kernel_rem_pio2f+0x456>
 800630e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006312:	9b01      	ldr	r3, [sp, #4]
 8006314:	6018      	str	r0, [r3, #0]
 8006316:	f009 0007 	and.w	r0, r9, #7
 800631a:	b059      	add	sp, #356	; 0x164
 800631c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006320:	2000      	movs	r0, #0
 8006322:	ae30      	add	r6, sp, #192	; 0xc0
 8006324:	e7f0      	b.n	8006308 <__kernel_rem_pio2f+0x44c>
 8006326:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800632a:	f7fa fb35 	bl	8000998 <__addsf3>
 800632e:	3e01      	subs	r6, #1
 8006330:	2e00      	cmp	r6, #0
 8006332:	daf8      	bge.n	8006326 <__kernel_rem_pio2f+0x46a>
 8006334:	b1b5      	cbz	r5, 8006364 <__kernel_rem_pio2f+0x4a8>
 8006336:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800633a:	9a01      	ldr	r2, [sp, #4]
 800633c:	af58      	add	r7, sp, #352	; 0x160
 800633e:	4601      	mov	r1, r0
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8006346:	f7fa fb25 	bl	8000994 <__aeabi_fsub>
 800634a:	2601      	movs	r6, #1
 800634c:	42b4      	cmp	r4, r6
 800634e:	da0b      	bge.n	8006368 <__kernel_rem_pio2f+0x4ac>
 8006350:	b10d      	cbz	r5, 8006356 <__kernel_rem_pio2f+0x49a>
 8006352:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006356:	9b01      	ldr	r3, [sp, #4]
 8006358:	6058      	str	r0, [r3, #4]
 800635a:	e7dc      	b.n	8006316 <__kernel_rem_pio2f+0x45a>
 800635c:	4626      	mov	r6, r4
 800635e:	2000      	movs	r0, #0
 8006360:	af30      	add	r7, sp, #192	; 0xc0
 8006362:	e7e5      	b.n	8006330 <__kernel_rem_pio2f+0x474>
 8006364:	4603      	mov	r3, r0
 8006366:	e7e8      	b.n	800633a <__kernel_rem_pio2f+0x47e>
 8006368:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800636c:	f7fa fb14 	bl	8000998 <__addsf3>
 8006370:	3601      	adds	r6, #1
 8006372:	e7eb      	b.n	800634c <__kernel_rem_pio2f+0x490>
 8006374:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8006378:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4610      	mov	r0, r2
 8006380:	4619      	mov	r1, r3
 8006382:	9303      	str	r3, [sp, #12]
 8006384:	9202      	str	r2, [sp, #8]
 8006386:	f7fa fb07 	bl	8000998 <__addsf3>
 800638a:	9a02      	ldr	r2, [sp, #8]
 800638c:	4601      	mov	r1, r0
 800638e:	4683      	mov	fp, r0
 8006390:	4610      	mov	r0, r2
 8006392:	f7fa faff 	bl	8000994 <__aeabi_fsub>
 8006396:	9b03      	ldr	r3, [sp, #12]
 8006398:	4619      	mov	r1, r3
 800639a:	f7fa fafd 	bl	8000998 <__addsf3>
 800639e:	f8c7 b000 	str.w	fp, [r7]
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	e798      	b.n	80062d8 <__kernel_rem_pio2f+0x41c>
 80063a6:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 80063aa:	3f01      	subs	r7, #1
 80063ac:	f8d6 b004 	ldr.w	fp, [r6, #4]
 80063b0:	4618      	mov	r0, r3
 80063b2:	4659      	mov	r1, fp
 80063b4:	9302      	str	r3, [sp, #8]
 80063b6:	f7fa faef 	bl	8000998 <__addsf3>
 80063ba:	9b02      	ldr	r3, [sp, #8]
 80063bc:	4601      	mov	r1, r0
 80063be:	4680      	mov	r8, r0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fa fae7 	bl	8000994 <__aeabi_fsub>
 80063c6:	4659      	mov	r1, fp
 80063c8:	f7fa fae6 	bl	8000998 <__addsf3>
 80063cc:	f8c6 8000 	str.w	r8, [r6]
 80063d0:	6070      	str	r0, [r6, #4]
 80063d2:	e785      	b.n	80062e0 <__kernel_rem_pio2f+0x424>
 80063d4:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 80063d8:	f7fa fade 	bl	8000998 <__addsf3>
 80063dc:	3c01      	subs	r4, #1
 80063de:	e782      	b.n	80062e6 <__kernel_rem_pio2f+0x42a>
 80063e0:	9901      	ldr	r1, [sp, #4]
 80063e2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80063e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80063ea:	600a      	str	r2, [r1, #0]
 80063ec:	604b      	str	r3, [r1, #4]
 80063ee:	460a      	mov	r2, r1
 80063f0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80063f4:	e781      	b.n	80062fa <__kernel_rem_pio2f+0x43e>
 80063f6:	bf00      	nop

080063f8 <__kernel_sinf>:
 80063f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063fc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8006400:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006404:	4604      	mov	r4, r0
 8006406:	460f      	mov	r7, r1
 8006408:	4691      	mov	r9, r2
 800640a:	da03      	bge.n	8006414 <__kernel_sinf+0x1c>
 800640c:	f7fa fd92 	bl	8000f34 <__aeabi_f2iz>
 8006410:	2800      	cmp	r0, #0
 8006412:	d035      	beq.n	8006480 <__kernel_sinf+0x88>
 8006414:	4621      	mov	r1, r4
 8006416:	4620      	mov	r0, r4
 8006418:	f7fa fbc6 	bl	8000ba8 <__aeabi_fmul>
 800641c:	4605      	mov	r5, r0
 800641e:	4601      	mov	r1, r0
 8006420:	4620      	mov	r0, r4
 8006422:	f7fa fbc1 	bl	8000ba8 <__aeabi_fmul>
 8006426:	4929      	ldr	r1, [pc, #164]	; (80064cc <__kernel_sinf+0xd4>)
 8006428:	4606      	mov	r6, r0
 800642a:	4628      	mov	r0, r5
 800642c:	f7fa fbbc 	bl	8000ba8 <__aeabi_fmul>
 8006430:	4927      	ldr	r1, [pc, #156]	; (80064d0 <__kernel_sinf+0xd8>)
 8006432:	f7fa faaf 	bl	8000994 <__aeabi_fsub>
 8006436:	4629      	mov	r1, r5
 8006438:	f7fa fbb6 	bl	8000ba8 <__aeabi_fmul>
 800643c:	4925      	ldr	r1, [pc, #148]	; (80064d4 <__kernel_sinf+0xdc>)
 800643e:	f7fa faab 	bl	8000998 <__addsf3>
 8006442:	4629      	mov	r1, r5
 8006444:	f7fa fbb0 	bl	8000ba8 <__aeabi_fmul>
 8006448:	4923      	ldr	r1, [pc, #140]	; (80064d8 <__kernel_sinf+0xe0>)
 800644a:	f7fa faa3 	bl	8000994 <__aeabi_fsub>
 800644e:	4629      	mov	r1, r5
 8006450:	f7fa fbaa 	bl	8000ba8 <__aeabi_fmul>
 8006454:	4921      	ldr	r1, [pc, #132]	; (80064dc <__kernel_sinf+0xe4>)
 8006456:	f7fa fa9f 	bl	8000998 <__addsf3>
 800645a:	4680      	mov	r8, r0
 800645c:	f1b9 0f00 	cmp.w	r9, #0
 8006460:	d111      	bne.n	8006486 <__kernel_sinf+0x8e>
 8006462:	4601      	mov	r1, r0
 8006464:	4628      	mov	r0, r5
 8006466:	f7fa fb9f 	bl	8000ba8 <__aeabi_fmul>
 800646a:	491d      	ldr	r1, [pc, #116]	; (80064e0 <__kernel_sinf+0xe8>)
 800646c:	f7fa fa92 	bl	8000994 <__aeabi_fsub>
 8006470:	4631      	mov	r1, r6
 8006472:	f7fa fb99 	bl	8000ba8 <__aeabi_fmul>
 8006476:	4601      	mov	r1, r0
 8006478:	4620      	mov	r0, r4
 800647a:	f7fa fa8d 	bl	8000998 <__addsf3>
 800647e:	4604      	mov	r4, r0
 8006480:	4620      	mov	r0, r4
 8006482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006486:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800648a:	4638      	mov	r0, r7
 800648c:	f7fa fb8c 	bl	8000ba8 <__aeabi_fmul>
 8006490:	4641      	mov	r1, r8
 8006492:	4681      	mov	r9, r0
 8006494:	4630      	mov	r0, r6
 8006496:	f7fa fb87 	bl	8000ba8 <__aeabi_fmul>
 800649a:	4601      	mov	r1, r0
 800649c:	4648      	mov	r0, r9
 800649e:	f7fa fa79 	bl	8000994 <__aeabi_fsub>
 80064a2:	4629      	mov	r1, r5
 80064a4:	f7fa fb80 	bl	8000ba8 <__aeabi_fmul>
 80064a8:	4639      	mov	r1, r7
 80064aa:	f7fa fa73 	bl	8000994 <__aeabi_fsub>
 80064ae:	490c      	ldr	r1, [pc, #48]	; (80064e0 <__kernel_sinf+0xe8>)
 80064b0:	4605      	mov	r5, r0
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7fa fb78 	bl	8000ba8 <__aeabi_fmul>
 80064b8:	4601      	mov	r1, r0
 80064ba:	4628      	mov	r0, r5
 80064bc:	f7fa fa6c 	bl	8000998 <__addsf3>
 80064c0:	4601      	mov	r1, r0
 80064c2:	4620      	mov	r0, r4
 80064c4:	f7fa fa66 	bl	8000994 <__aeabi_fsub>
 80064c8:	e7d9      	b.n	800647e <__kernel_sinf+0x86>
 80064ca:	bf00      	nop
 80064cc:	2f2ec9d3 	.word	0x2f2ec9d3
 80064d0:	32d72f34 	.word	0x32d72f34
 80064d4:	3638ef1b 	.word	0x3638ef1b
 80064d8:	39500d01 	.word	0x39500d01
 80064dc:	3c088889 	.word	0x3c088889
 80064e0:	3e2aaaab 	.word	0x3e2aaaab

080064e4 <fabsf>:
 80064e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80064e8:	4770      	bx	lr
	...

080064ec <scalbnf>:
 80064ec:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 80064f0:	b510      	push	{r4, lr}
 80064f2:	4602      	mov	r2, r0
 80064f4:	460c      	mov	r4, r1
 80064f6:	4601      	mov	r1, r0
 80064f8:	d027      	beq.n	800654a <scalbnf+0x5e>
 80064fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80064fe:	d303      	bcc.n	8006508 <scalbnf+0x1c>
 8006500:	f7fa fa4a 	bl	8000998 <__addsf3>
 8006504:	4602      	mov	r2, r0
 8006506:	e020      	b.n	800654a <scalbnf+0x5e>
 8006508:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800650c:	d215      	bcs.n	800653a <scalbnf+0x4e>
 800650e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8006512:	f7fa fb49 	bl	8000ba8 <__aeabi_fmul>
 8006516:	4b18      	ldr	r3, [pc, #96]	; (8006578 <scalbnf+0x8c>)
 8006518:	4602      	mov	r2, r0
 800651a:	429c      	cmp	r4, r3
 800651c:	db22      	blt.n	8006564 <scalbnf+0x78>
 800651e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006522:	3b19      	subs	r3, #25
 8006524:	4423      	add	r3, r4
 8006526:	2bfe      	cmp	r3, #254	; 0xfe
 8006528:	dd09      	ble.n	800653e <scalbnf+0x52>
 800652a:	4611      	mov	r1, r2
 800652c:	4813      	ldr	r0, [pc, #76]	; (800657c <scalbnf+0x90>)
 800652e:	f000 f829 	bl	8006584 <copysignf>
 8006532:	4912      	ldr	r1, [pc, #72]	; (800657c <scalbnf+0x90>)
 8006534:	f7fa fb38 	bl	8000ba8 <__aeabi_fmul>
 8006538:	e7e4      	b.n	8006504 <scalbnf+0x18>
 800653a:	0ddb      	lsrs	r3, r3, #23
 800653c:	e7f2      	b.n	8006524 <scalbnf+0x38>
 800653e:	2b00      	cmp	r3, #0
 8006540:	dd05      	ble.n	800654e <scalbnf+0x62>
 8006542:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8006546:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800654a:	4610      	mov	r0, r2
 800654c:	bd10      	pop	{r4, pc}
 800654e:	f113 0f16 	cmn.w	r3, #22
 8006552:	da09      	bge.n	8006568 <scalbnf+0x7c>
 8006554:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006558:	429c      	cmp	r4, r3
 800655a:	4611      	mov	r1, r2
 800655c:	dce6      	bgt.n	800652c <scalbnf+0x40>
 800655e:	4808      	ldr	r0, [pc, #32]	; (8006580 <scalbnf+0x94>)
 8006560:	f000 f810 	bl	8006584 <copysignf>
 8006564:	4906      	ldr	r1, [pc, #24]	; (8006580 <scalbnf+0x94>)
 8006566:	e7e5      	b.n	8006534 <scalbnf+0x48>
 8006568:	3319      	adds	r3, #25
 800656a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800656e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8006572:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8006576:	e7dd      	b.n	8006534 <scalbnf+0x48>
 8006578:	ffff3cb0 	.word	0xffff3cb0
 800657c:	7149f2ca 	.word	0x7149f2ca
 8006580:	0da24260 	.word	0x0da24260

08006584 <copysignf>:
 8006584:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006588:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800658c:	4308      	orrs	r0, r1
 800658e:	4770      	bx	lr

08006590 <_init>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	bf00      	nop
 8006594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006596:	bc08      	pop	{r3}
 8006598:	469e      	mov	lr, r3
 800659a:	4770      	bx	lr

0800659c <_fini>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr
