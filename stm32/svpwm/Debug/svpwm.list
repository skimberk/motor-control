
svpwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08003b54  08003b54  00013b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f48  08003f48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f48  08003f48  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f48  08003f48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f48  08003f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08003f5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08003f5c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f61  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013c7  00000000  00000000  00027f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000900  00000000  00000000  00029360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000858  00000000  00000000  00029c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000138f9  00000000  00000000  0002a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005ef3  00000000  00000000  0003ddb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006eb59  00000000  00000000  00043ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b27fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b4  00000000  00000000  000b2878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b3c 	.word	0x08003b3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003b3c 	.word	0x08003b3c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__gedf2>:
 80004c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80004cc:	e006      	b.n	80004dc <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__ledf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	e002      	b.n	80004dc <__cmpdf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__cmpdf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004ec:	bf18      	it	ne
 80004ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004f2:	d01b      	beq.n	800052c <__cmpdf2+0x54>
 80004f4:	b001      	add	sp, #4
 80004f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004fa:	bf0c      	ite	eq
 80004fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000500:	ea91 0f03 	teqne	r1, r3
 8000504:	bf02      	ittt	eq
 8000506:	ea90 0f02 	teqeq	r0, r2
 800050a:	2000      	moveq	r0, #0
 800050c:	4770      	bxeq	lr
 800050e:	f110 0f00 	cmn.w	r0, #0
 8000512:	ea91 0f03 	teq	r1, r3
 8000516:	bf58      	it	pl
 8000518:	4299      	cmppl	r1, r3
 800051a:	bf08      	it	eq
 800051c:	4290      	cmpeq	r0, r2
 800051e:	bf2c      	ite	cs
 8000520:	17d8      	asrcs	r0, r3, #31
 8000522:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000526:	f040 0001 	orr.w	r0, r0, #1
 800052a:	4770      	bx	lr
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	d102      	bne.n	800053c <__cmpdf2+0x64>
 8000536:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800053a:	d107      	bne.n	800054c <__cmpdf2+0x74>
 800053c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000540:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000544:	d1d6      	bne.n	80004f4 <__cmpdf2+0x1c>
 8000546:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800054a:	d0d3      	beq.n	80004f4 <__cmpdf2+0x1c>
 800054c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <__aeabi_cdrcmple>:
 8000554:	4684      	mov	ip, r0
 8000556:	4610      	mov	r0, r2
 8000558:	4662      	mov	r2, ip
 800055a:	468c      	mov	ip, r1
 800055c:	4619      	mov	r1, r3
 800055e:	4663      	mov	r3, ip
 8000560:	e000      	b.n	8000564 <__aeabi_cdcmpeq>
 8000562:	bf00      	nop

08000564 <__aeabi_cdcmpeq>:
 8000564:	b501      	push	{r0, lr}
 8000566:	f7ff ffb7 	bl	80004d8 <__cmpdf2>
 800056a:	2800      	cmp	r0, #0
 800056c:	bf48      	it	mi
 800056e:	f110 0f00 	cmnmi.w	r0, #0
 8000572:	bd01      	pop	{r0, pc}

08000574 <__aeabi_dcmpeq>:
 8000574:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000578:	f7ff fff4 	bl	8000564 <__aeabi_cdcmpeq>
 800057c:	bf0c      	ite	eq
 800057e:	2001      	moveq	r0, #1
 8000580:	2000      	movne	r0, #0
 8000582:	f85d fb08 	ldr.w	pc, [sp], #8
 8000586:	bf00      	nop

08000588 <__aeabi_dcmplt>:
 8000588:	f84d ed08 	str.w	lr, [sp, #-8]!
 800058c:	f7ff ffea 	bl	8000564 <__aeabi_cdcmpeq>
 8000590:	bf34      	ite	cc
 8000592:	2001      	movcc	r0, #1
 8000594:	2000      	movcs	r0, #0
 8000596:	f85d fb08 	ldr.w	pc, [sp], #8
 800059a:	bf00      	nop

0800059c <__aeabi_dcmple>:
 800059c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005a0:	f7ff ffe0 	bl	8000564 <__aeabi_cdcmpeq>
 80005a4:	bf94      	ite	ls
 80005a6:	2001      	movls	r0, #1
 80005a8:	2000      	movhi	r0, #0
 80005aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ae:	bf00      	nop

080005b0 <__aeabi_dcmpge>:
 80005b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b4:	f7ff ffce 	bl	8000554 <__aeabi_cdrcmple>
 80005b8:	bf94      	ite	ls
 80005ba:	2001      	movls	r0, #1
 80005bc:	2000      	movhi	r0, #0
 80005be:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c2:	bf00      	nop

080005c4 <__aeabi_dcmpgt>:
 80005c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c8:	f7ff ffc4 	bl	8000554 <__aeabi_cdrcmple>
 80005cc:	bf34      	ite	cc
 80005ce:	2001      	movcc	r0, #1
 80005d0:	2000      	movcs	r0, #0
 80005d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d6:	bf00      	nop

080005d8 <__aeabi_d2f>:
 80005d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80005e0:	bf24      	itt	cs
 80005e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80005e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005ea:	d90d      	bls.n	8000608 <__aeabi_d2f+0x30>
 80005ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000600:	bf08      	it	eq
 8000602:	f020 0001 	biceq.w	r0, r0, #1
 8000606:	4770      	bx	lr
 8000608:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800060c:	d121      	bne.n	8000652 <__aeabi_d2f+0x7a>
 800060e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000612:	bfbc      	itt	lt
 8000614:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000618:	4770      	bxlt	lr
 800061a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000622:	f1c2 0218 	rsb	r2, r2, #24
 8000626:	f1c2 0c20 	rsb	ip, r2, #32
 800062a:	fa10 f30c 	lsls.w	r3, r0, ip
 800062e:	fa20 f002 	lsr.w	r0, r0, r2
 8000632:	bf18      	it	ne
 8000634:	f040 0001 	orrne.w	r0, r0, #1
 8000638:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800063c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000640:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000644:	ea40 000c 	orr.w	r0, r0, ip
 8000648:	fa23 f302 	lsr.w	r3, r3, r2
 800064c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000650:	e7cc      	b.n	80005ec <__aeabi_d2f+0x14>
 8000652:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000656:	d107      	bne.n	8000668 <__aeabi_d2f+0x90>
 8000658:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800065c:	bf1e      	ittt	ne
 800065e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000662:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000666:	4770      	bxne	lr
 8000668:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800066c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_frsub>:
 8000678:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800067c:	e002      	b.n	8000684 <__addsf3>
 800067e:	bf00      	nop

08000680 <__aeabi_fsub>:
 8000680:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000684 <__addsf3>:
 8000684:	0042      	lsls	r2, r0, #1
 8000686:	bf1f      	itttt	ne
 8000688:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800068c:	ea92 0f03 	teqne	r2, r3
 8000690:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000694:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000698:	d06a      	beq.n	8000770 <__addsf3+0xec>
 800069a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800069e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80006a2:	bfc1      	itttt	gt
 80006a4:	18d2      	addgt	r2, r2, r3
 80006a6:	4041      	eorgt	r1, r0
 80006a8:	4048      	eorgt	r0, r1
 80006aa:	4041      	eorgt	r1, r0
 80006ac:	bfb8      	it	lt
 80006ae:	425b      	neglt	r3, r3
 80006b0:	2b19      	cmp	r3, #25
 80006b2:	bf88      	it	hi
 80006b4:	4770      	bxhi	lr
 80006b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4240      	negne	r0, r0
 80006c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006d2:	bf18      	it	ne
 80006d4:	4249      	negne	r1, r1
 80006d6:	ea92 0f03 	teq	r2, r3
 80006da:	d03f      	beq.n	800075c <__addsf3+0xd8>
 80006dc:	f1a2 0201 	sub.w	r2, r2, #1
 80006e0:	fa41 fc03 	asr.w	ip, r1, r3
 80006e4:	eb10 000c 	adds.w	r0, r0, ip
 80006e8:	f1c3 0320 	rsb	r3, r3, #32
 80006ec:	fa01 f103 	lsl.w	r1, r1, r3
 80006f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006f4:	d502      	bpl.n	80006fc <__addsf3+0x78>
 80006f6:	4249      	negs	r1, r1
 80006f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000700:	d313      	bcc.n	800072a <__addsf3+0xa6>
 8000702:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000706:	d306      	bcc.n	8000716 <__addsf3+0x92>
 8000708:	0840      	lsrs	r0, r0, #1
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	f102 0201 	add.w	r2, r2, #1
 8000712:	2afe      	cmp	r2, #254	; 0xfe
 8000714:	d251      	bcs.n	80007ba <__addsf3+0x136>
 8000716:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800071a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800071e:	bf08      	it	eq
 8000720:	f020 0001 	biceq.w	r0, r0, #1
 8000724:	ea40 0003 	orr.w	r0, r0, r3
 8000728:	4770      	bx	lr
 800072a:	0049      	lsls	r1, r1, #1
 800072c:	eb40 0000 	adc.w	r0, r0, r0
 8000730:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000734:	f1a2 0201 	sub.w	r2, r2, #1
 8000738:	d1ed      	bne.n	8000716 <__addsf3+0x92>
 800073a:	fab0 fc80 	clz	ip, r0
 800073e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000742:	ebb2 020c 	subs.w	r2, r2, ip
 8000746:	fa00 f00c 	lsl.w	r0, r0, ip
 800074a:	bfaa      	itet	ge
 800074c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000750:	4252      	neglt	r2, r2
 8000752:	4318      	orrge	r0, r3
 8000754:	bfbc      	itt	lt
 8000756:	40d0      	lsrlt	r0, r2
 8000758:	4318      	orrlt	r0, r3
 800075a:	4770      	bx	lr
 800075c:	f092 0f00 	teq	r2, #0
 8000760:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000764:	bf06      	itte	eq
 8000766:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800076a:	3201      	addeq	r2, #1
 800076c:	3b01      	subne	r3, #1
 800076e:	e7b5      	b.n	80006dc <__addsf3+0x58>
 8000770:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000774:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000778:	bf18      	it	ne
 800077a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077e:	d021      	beq.n	80007c4 <__addsf3+0x140>
 8000780:	ea92 0f03 	teq	r2, r3
 8000784:	d004      	beq.n	8000790 <__addsf3+0x10c>
 8000786:	f092 0f00 	teq	r2, #0
 800078a:	bf08      	it	eq
 800078c:	4608      	moveq	r0, r1
 800078e:	4770      	bx	lr
 8000790:	ea90 0f01 	teq	r0, r1
 8000794:	bf1c      	itt	ne
 8000796:	2000      	movne	r0, #0
 8000798:	4770      	bxne	lr
 800079a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800079e:	d104      	bne.n	80007aa <__addsf3+0x126>
 80007a0:	0040      	lsls	r0, r0, #1
 80007a2:	bf28      	it	cs
 80007a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007a8:	4770      	bx	lr
 80007aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007ae:	bf3c      	itt	cc
 80007b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007b4:	4770      	bxcc	lr
 80007b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c2:	4770      	bx	lr
 80007c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007c8:	bf16      	itet	ne
 80007ca:	4608      	movne	r0, r1
 80007cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007d0:	4601      	movne	r1, r0
 80007d2:	0242      	lsls	r2, r0, #9
 80007d4:	bf06      	itte	eq
 80007d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007da:	ea90 0f01 	teqeq	r0, r1
 80007de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_ui2f>:
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e004      	b.n	80007f4 <__aeabi_i2f+0x8>
 80007ea:	bf00      	nop

080007ec <__aeabi_i2f>:
 80007ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	ea5f 0c00 	movs.w	ip, r0
 80007f8:	bf08      	it	eq
 80007fa:	4770      	bxeq	lr
 80007fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000800:	4601      	mov	r1, r0
 8000802:	f04f 0000 	mov.w	r0, #0
 8000806:	e01c      	b.n	8000842 <__aeabi_l2f+0x2a>

08000808 <__aeabi_ul2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	e00a      	b.n	800082c <__aeabi_l2f+0x14>
 8000816:	bf00      	nop

08000818 <__aeabi_l2f>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000824:	d502      	bpl.n	800082c <__aeabi_l2f+0x14>
 8000826:	4240      	negs	r0, r0
 8000828:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800082c:	ea5f 0c01 	movs.w	ip, r1
 8000830:	bf02      	ittt	eq
 8000832:	4684      	moveq	ip, r0
 8000834:	4601      	moveq	r1, r0
 8000836:	2000      	moveq	r0, #0
 8000838:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800083c:	bf08      	it	eq
 800083e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000842:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000846:	fabc f28c 	clz	r2, ip
 800084a:	3a08      	subs	r2, #8
 800084c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000850:	db10      	blt.n	8000874 <__aeabi_l2f+0x5c>
 8000852:	fa01 fc02 	lsl.w	ip, r1, r2
 8000856:	4463      	add	r3, ip
 8000858:	fa00 fc02 	lsl.w	ip, r0, r2
 800085c:	f1c2 0220 	rsb	r2, r2, #32
 8000860:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000864:	fa20 f202 	lsr.w	r2, r0, r2
 8000868:	eb43 0002 	adc.w	r0, r3, r2
 800086c:	bf08      	it	eq
 800086e:	f020 0001 	biceq.w	r0, r0, #1
 8000872:	4770      	bx	lr
 8000874:	f102 0220 	add.w	r2, r2, #32
 8000878:	fa01 fc02 	lsl.w	ip, r1, r2
 800087c:	f1c2 0220 	rsb	r2, r2, #32
 8000880:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000884:	fa21 f202 	lsr.w	r2, r1, r2
 8000888:	eb43 0002 	adc.w	r0, r3, r2
 800088c:	bf08      	it	eq
 800088e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000892:	4770      	bx	lr

08000894 <__aeabi_fmul>:
 8000894:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000898:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800089c:	bf1e      	ittt	ne
 800089e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80008a2:	ea92 0f0c 	teqne	r2, ip
 80008a6:	ea93 0f0c 	teqne	r3, ip
 80008aa:	d06f      	beq.n	800098c <__aeabi_fmul+0xf8>
 80008ac:	441a      	add	r2, r3
 80008ae:	ea80 0c01 	eor.w	ip, r0, r1
 80008b2:	0240      	lsls	r0, r0, #9
 80008b4:	bf18      	it	ne
 80008b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008ba:	d01e      	beq.n	80008fa <__aeabi_fmul+0x66>
 80008bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008c8:	fba0 3101 	umull	r3, r1, r0, r1
 80008cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008d4:	bf3e      	ittt	cc
 80008d6:	0049      	lslcc	r1, r1, #1
 80008d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008dc:	005b      	lslcc	r3, r3, #1
 80008de:	ea40 0001 	orr.w	r0, r0, r1
 80008e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008e6:	2afd      	cmp	r2, #253	; 0xfd
 80008e8:	d81d      	bhi.n	8000926 <__aeabi_fmul+0x92>
 80008ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008f2:	bf08      	it	eq
 80008f4:	f020 0001 	biceq.w	r0, r0, #1
 80008f8:	4770      	bx	lr
 80008fa:	f090 0f00 	teq	r0, #0
 80008fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000902:	bf08      	it	eq
 8000904:	0249      	lsleq	r1, r1, #9
 8000906:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800090a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800090e:	3a7f      	subs	r2, #127	; 0x7f
 8000910:	bfc2      	ittt	gt
 8000912:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000916:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800091a:	4770      	bxgt	lr
 800091c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000920:	f04f 0300 	mov.w	r3, #0
 8000924:	3a01      	subs	r2, #1
 8000926:	dc5d      	bgt.n	80009e4 <__aeabi_fmul+0x150>
 8000928:	f112 0f19 	cmn.w	r2, #25
 800092c:	bfdc      	itt	le
 800092e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000932:	4770      	bxle	lr
 8000934:	f1c2 0200 	rsb	r2, r2, #0
 8000938:	0041      	lsls	r1, r0, #1
 800093a:	fa21 f102 	lsr.w	r1, r1, r2
 800093e:	f1c2 0220 	rsb	r2, r2, #32
 8000942:	fa00 fc02 	lsl.w	ip, r0, r2
 8000946:	ea5f 0031 	movs.w	r0, r1, rrx
 800094a:	f140 0000 	adc.w	r0, r0, #0
 800094e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000952:	bf08      	it	eq
 8000954:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000958:	4770      	bx	lr
 800095a:	f092 0f00 	teq	r2, #0
 800095e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0040      	lsleq	r0, r0, #1
 8000966:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800096a:	3a01      	subeq	r2, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xce>
 800096e:	ea40 000c 	orr.w	r0, r0, ip
 8000972:	f093 0f00 	teq	r3, #0
 8000976:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097a:	bf02      	ittt	eq
 800097c:	0049      	lsleq	r1, r1, #1
 800097e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000982:	3b01      	subeq	r3, #1
 8000984:	d0f9      	beq.n	800097a <__aeabi_fmul+0xe6>
 8000986:	ea41 010c 	orr.w	r1, r1, ip
 800098a:	e78f      	b.n	80008ac <__aeabi_fmul+0x18>
 800098c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000990:	ea92 0f0c 	teq	r2, ip
 8000994:	bf18      	it	ne
 8000996:	ea93 0f0c 	teqne	r3, ip
 800099a:	d00a      	beq.n	80009b2 <__aeabi_fmul+0x11e>
 800099c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80009a0:	bf18      	it	ne
 80009a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009a6:	d1d8      	bne.n	800095a <__aeabi_fmul+0xc6>
 80009a8:	ea80 0001 	eor.w	r0, r0, r1
 80009ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	4770      	bx	lr
 80009b2:	f090 0f00 	teq	r0, #0
 80009b6:	bf17      	itett	ne
 80009b8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009bc:	4608      	moveq	r0, r1
 80009be:	f091 0f00 	teqne	r1, #0
 80009c2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009c6:	d014      	beq.n	80009f2 <__aeabi_fmul+0x15e>
 80009c8:	ea92 0f0c 	teq	r2, ip
 80009cc:	d101      	bne.n	80009d2 <__aeabi_fmul+0x13e>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	d10f      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009d2:	ea93 0f0c 	teq	r3, ip
 80009d6:	d103      	bne.n	80009e0 <__aeabi_fmul+0x14c>
 80009d8:	024b      	lsls	r3, r1, #9
 80009da:	bf18      	it	ne
 80009dc:	4608      	movne	r0, r1
 80009de:	d108      	bne.n	80009f2 <__aeabi_fmul+0x15e>
 80009e0:	ea80 0001 	eor.w	r0, r0, r1
 80009e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f0:	4770      	bx	lr
 80009f2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bx	lr

080009fc <__aeabi_fdiv>:
 80009fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a04:	bf1e      	ittt	ne
 8000a06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a0a:	ea92 0f0c 	teqne	r2, ip
 8000a0e:	ea93 0f0c 	teqne	r3, ip
 8000a12:	d069      	beq.n	8000ae8 <__aeabi_fdiv+0xec>
 8000a14:	eba2 0203 	sub.w	r2, r2, r3
 8000a18:	ea80 0c01 	eor.w	ip, r0, r1
 8000a1c:	0249      	lsls	r1, r1, #9
 8000a1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a22:	d037      	beq.n	8000a94 <__aeabi_fdiv+0x98>
 8000a24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a34:	428b      	cmp	r3, r1
 8000a36:	bf38      	it	cc
 8000a38:	005b      	lslcc	r3, r3, #1
 8000a3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a42:	428b      	cmp	r3, r1
 8000a44:	bf24      	itt	cs
 8000a46:	1a5b      	subcs	r3, r3, r1
 8000a48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a50:	bf24      	itt	cs
 8000a52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a5e:	bf24      	itt	cs
 8000a60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a6c:	bf24      	itt	cs
 8000a6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	bf18      	it	ne
 8000a7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a7e:	d1e0      	bne.n	8000a42 <__aeabi_fdiv+0x46>
 8000a80:	2afd      	cmp	r2, #253	; 0xfd
 8000a82:	f63f af50 	bhi.w	8000926 <__aeabi_fmul+0x92>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a8c:	bf08      	it	eq
 8000a8e:	f020 0001 	biceq.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a9c:	327f      	adds	r2, #127	; 0x7f
 8000a9e:	bfc2      	ittt	gt
 8000aa0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000aa4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000aa8:	4770      	bxgt	lr
 8000aaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aae:	f04f 0300 	mov.w	r3, #0
 8000ab2:	3a01      	subs	r2, #1
 8000ab4:	e737      	b.n	8000926 <__aeabi_fmul+0x92>
 8000ab6:	f092 0f00 	teq	r2, #0
 8000aba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0040      	lsleq	r0, r0, #1
 8000ac2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ac6:	3a01      	subeq	r2, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xc2>
 8000aca:	ea40 000c 	orr.w	r0, r0, ip
 8000ace:	f093 0f00 	teq	r3, #0
 8000ad2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad6:	bf02      	ittt	eq
 8000ad8:	0049      	lsleq	r1, r1, #1
 8000ada:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ade:	3b01      	subeq	r3, #1
 8000ae0:	d0f9      	beq.n	8000ad6 <__aeabi_fdiv+0xda>
 8000ae2:	ea41 010c 	orr.w	r1, r1, ip
 8000ae6:	e795      	b.n	8000a14 <__aeabi_fdiv+0x18>
 8000ae8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000aec:	ea92 0f0c 	teq	r2, ip
 8000af0:	d108      	bne.n	8000b04 <__aeabi_fdiv+0x108>
 8000af2:	0242      	lsls	r2, r0, #9
 8000af4:	f47f af7d 	bne.w	80009f2 <__aeabi_fmul+0x15e>
 8000af8:	ea93 0f0c 	teq	r3, ip
 8000afc:	f47f af70 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e776      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b04:	ea93 0f0c 	teq	r3, ip
 8000b08:	d104      	bne.n	8000b14 <__aeabi_fdiv+0x118>
 8000b0a:	024b      	lsls	r3, r1, #9
 8000b0c:	f43f af4c 	beq.w	80009a8 <__aeabi_fmul+0x114>
 8000b10:	4608      	mov	r0, r1
 8000b12:	e76e      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b18:	bf18      	it	ne
 8000b1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b1e:	d1ca      	bne.n	8000ab6 <__aeabi_fdiv+0xba>
 8000b20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b24:	f47f af5c 	bne.w	80009e0 <__aeabi_fmul+0x14c>
 8000b28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b2c:	f47f af3c 	bne.w	80009a8 <__aeabi_fmul+0x114>
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0x15e>
 8000b32:	bf00      	nop

08000b34 <__gesf2>:
 8000b34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b38:	e006      	b.n	8000b48 <__cmpsf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__lesf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	e002      	b.n	8000b48 <__cmpsf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__cmpsf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b58:	bf18      	it	ne
 8000b5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5e:	d011      	beq.n	8000b84 <__cmpsf2+0x40>
 8000b60:	b001      	add	sp, #4
 8000b62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b66:	bf18      	it	ne
 8000b68:	ea90 0f01 	teqne	r0, r1
 8000b6c:	bf58      	it	pl
 8000b6e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b72:	bf88      	it	hi
 8000b74:	17c8      	asrhi	r0, r1, #31
 8000b76:	bf38      	it	cc
 8000b78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b7c:	bf18      	it	ne
 8000b7e:	f040 0001 	orrne.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	d102      	bne.n	8000b90 <__cmpsf2+0x4c>
 8000b8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b8e:	d105      	bne.n	8000b9c <__cmpsf2+0x58>
 8000b90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b94:	d1e4      	bne.n	8000b60 <__cmpsf2+0x1c>
 8000b96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b9a:	d0e1      	beq.n	8000b60 <__cmpsf2+0x1c>
 8000b9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_cfrcmple>:
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4661      	mov	r1, ip
 8000baa:	e7ff      	b.n	8000bac <__aeabi_cfcmpeq>

08000bac <__aeabi_cfcmpeq>:
 8000bac:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bae:	f7ff ffc9 	bl	8000b44 <__cmpsf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	bf48      	it	mi
 8000bb6:	f110 0f00 	cmnmi.w	r0, #0
 8000bba:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bbc <__aeabi_fcmpeq>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff fff4 	bl	8000bac <__aeabi_cfcmpeq>
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2001      	moveq	r0, #1
 8000bc8:	2000      	movne	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_fcmplt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffea 	bl	8000bac <__aeabi_cfcmpeq>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_fcmple>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffe0 	bl	8000bac <__aeabi_cfcmpeq>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fcmpge>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffd2 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_fcmpgt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffc8 	bl	8000ba4 <__aeabi_cfrcmple>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_f2iz>:
 8000c20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c28:	d30f      	bcc.n	8000c4a <__aeabi_f2iz+0x2a>
 8000c2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c32:	d90d      	bls.n	8000c50 <__aeabi_f2iz+0x30>
 8000c34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c3c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c40:	fa23 f002 	lsr.w	r0, r3, r2
 8000c44:	bf18      	it	ne
 8000c46:	4240      	negne	r0, r0
 8000c48:	4770      	bx	lr
 8000c4a:	f04f 0000 	mov.w	r0, #0
 8000c4e:	4770      	bx	lr
 8000c50:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c54:	d101      	bne.n	8000c5a <__aeabi_f2iz+0x3a>
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	d105      	bne.n	8000c66 <__aeabi_f2iz+0x46>
 8000c5a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c5e:	bf08      	it	eq
 8000c60:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	4770      	bx	lr
 8000c6c:	0000      	movs	r0, r0
	...

08000c70 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

float theta = 0.0f;
float thetaAdd = 0.0f;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim1_1) {
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b08d      	sub	sp, #52	; 0x34
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	float third_sector = floorf(theta / S_2_PI_3);
 8000c78:	4b75      	ldr	r3, [pc, #468]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a75      	ldr	r2, [pc, #468]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff febb 	bl	80009fc <__aeabi_fdiv>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 f99f 	bl	8002fcc <floorf>
 8000c8e:	62f8      	str	r0, [r7, #44]	; 0x2c
	float third_sector_theta = theta - third_sector * S_2_PI_3;
 8000c90:	4b6f      	ldr	r3, [pc, #444]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000c92:	681c      	ldr	r4, [r3, #0]
 8000c94:	4b6f      	ldr	r3, [pc, #444]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fdfb 	bl	8000894 <__aeabi_fmul>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f7ff fcec 	bl	8000680 <__aeabi_fsub>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28

	float x = cosf(third_sector_theta);
 8000cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cae:	f002 f959 	bl	8002f64 <cosf>
 8000cb2:	6278      	str	r0, [r7, #36]	; 0x24
	float y = sinf(third_sector_theta);
 8000cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cb6:	f002 f9c9 	bl	800304c <sinf>
 8000cba:	6238      	str	r0, [r7, #32]

	float a = SCALE_TO_ONE * (S_1_SQRT3 * y + x);
 8000cbc:	4b66      	ldr	r3, [pc, #408]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000cbe:	6a39      	ldr	r1, [r7, #32]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fde7 	bl	8000894 <__aeabi_fmul>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fcda 	bl	8000684 <__addsf3>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b61      	ldr	r3, [pc, #388]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4610      	mov	r0, r2
 8000cda:	f7ff fddb 	bl	8000894 <__aeabi_fmul>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	61fb      	str	r3, [r7, #28]
	float b = SCALE_TO_ONE * (S_2_SQRT3 * y);
 8000ce2:	4b5f      	ldr	r3, [pc, #380]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000ce4:	6a39      	ldr	r1, [r7, #32]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fdd4 	bl	8000894 <__aeabi_fmul>
 8000cec:	4603      	mov	r3, r0
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4b5a      	ldr	r3, [pc, #360]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	f7ff fdcd 	bl	8000894 <__aeabi_fmul>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	61bb      	str	r3, [r7, #24]

	float multiplyBy = 200.0f;
 8000cfe:	4b59      	ldr	r3, [pc, #356]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000d00:	617b      	str	r3, [r7, #20]
	int addTo = (2000.0f - multiplyBy) / 2.0f;
 8000d02:	6979      	ldr	r1, [r7, #20]
 8000d04:	4858      	ldr	r0, [pc, #352]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000d06:	f7ff fcbb 	bl	8000680 <__aeabi_fsub>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fe73 	bl	80009fc <__aeabi_fdiv>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff81 	bl	8000c20 <__aeabi_f2iz>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	613b      	str	r3, [r7, #16]

	int a_time = a * multiplyBy;
 8000d22:	6979      	ldr	r1, [r7, #20]
 8000d24:	69f8      	ldr	r0, [r7, #28]
 8000d26:	f7ff fdb5 	bl	8000894 <__aeabi_fmul>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff77 	bl	8000c20 <__aeabi_f2iz>
 8000d32:	4603      	mov	r3, r0
 8000d34:	60fb      	str	r3, [r7, #12]
	int b_time = b * multiplyBy;
 8000d36:	6979      	ldr	r1, [r7, #20]
 8000d38:	69b8      	ldr	r0, [r7, #24]
 8000d3a:	f7ff fdab 	bl	8000894 <__aeabi_fmul>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff6d 	bl	8000c20 <__aeabi_f2iz>
 8000d46:	4603      	mov	r3, r0
 8000d48:	60bb      	str	r3, [r7, #8]

	if (third_sector == 0) {
 8000d4a:	f04f 0100 	mov.w	r1, #0
 8000d4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d50:	f7ff ff34 	bl	8000bbc <__aeabi_fcmpeq>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d010      	beq.n	8000d7c <HAL_TIM_PeriodElapsedCallback+0x10c>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, a_time + addTo);
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	441a      	add	r2, r3
 8000d60:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, b_time + addTo);
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	441a      	add	r2, r3
 8000d6c:	4b3f      	ldr	r3, [pc, #252]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, addTo);
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d7a:	e028      	b.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x15e>
	} else if (third_sector == 1) {
 8000d7c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000d80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d82:	f7ff ff1b 	bl	8000bbc <__aeabi_fcmpeq>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d010      	beq.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x13e>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, addTo);
 8000d8c:	4b37      	ldr	r3, [pc, #220]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, a_time + addTo);
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	441a      	add	r2, r3
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, b_time + addTo);
 8000da0:	68ba      	ldr	r2, [r7, #8]
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	441a      	add	r2, r3
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dac:	e00f      	b.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x15e>
	} else { // third_sector == 2
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, b_time + addTo);
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	441a      	add	r2, r3
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, addTo);
 8000dba:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, a_time + addTo);
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	441a      	add	r2, r3
 8000dc8:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	theta += thetaAdd;
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4610      	mov	r0, r2
 8000dda:	f7ff fc53 	bl	8000684 <__addsf3>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000de4:	601a      	str	r2, [r3, #0]
	thetaAdd += 0.00000005f;
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4922      	ldr	r1, [pc, #136]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fc49 	bl	8000684 <__addsf3>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000df8:	601a      	str	r2, [r3, #0]

	if (theta >= 2.0f * M_PI) {
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fb0a 	bl	8000418 <__aeabi_f2d>
 8000e04:	a310      	add	r3, pc, #64	; (adr r3, 8000e48 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0a:	f7ff fbd1 	bl	80005b0 <__aeabi_dcmpge>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d100      	bne.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0x1a6>
		theta -= 2.0f * M_PI;
	}
}
 8000e14:	e012      	b.n	8000e3c <HAL_TIM_PeriodElapsedCallback+0x1cc>
		theta -= 2.0f * M_PI;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fafc 	bl	8000418 <__aeabi_f2d>
 8000e20:	a309      	add	r3, pc, #36	; (adr r3, 8000e48 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	f7ff f997 	bl	8000158 <__aeabi_dsub>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	460c      	mov	r4, r1
 8000e2e:	4618      	mov	r0, r3
 8000e30:	4621      	mov	r1, r4
 8000e32:	f7ff fbd1 	bl	80005d8 <__aeabi_d2f>
 8000e36:	4602      	mov	r2, r0
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000e3a:	601a      	str	r2, [r3, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	3734      	adds	r7, #52	; 0x34
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd90      	pop	{r4, r7, pc}
 8000e44:	f3af 8000 	nop.w
 8000e48:	54442d18 	.word	0x54442d18
 8000e4c:	401921fb 	.word	0x401921fb
 8000e50:	20000028 	.word	0x20000028
 8000e54:	40060a92 	.word	0x40060a92
 8000e58:	3f13cd3a 	.word	0x3f13cd3a
 8000e5c:	3f5db3d8 	.word	0x3f5db3d8
 8000e60:	3f93cd3a 	.word	0x3f93cd3a
 8000e64:	43480000 	.word	0x43480000
 8000e68:	44fa0000 	.word	0x44fa0000
 8000e6c:	20000030 	.word	0x20000030
 8000e70:	2000002c 	.word	0x2000002c
 8000e74:	3356bf95 	.word	0x3356bf95

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7c:	f000 fabc 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e80:	f000 f828 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e84:	f000 f92a 	bl	80010dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e88:	f000 f86a 	bl	8000f60 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <main+0x58>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <main+0x58>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0201 	orr.w	r2, r2, #1
 8000e9a:	60da      	str	r2, [r3, #12]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <main+0x58>)
 8000ea0:	f001 f9be 	bl	8002220 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <main+0x58>)
 8000ea8:	f001 ff3a 	bl	8002d20 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000eac:	2104      	movs	r1, #4
 8000eae:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <main+0x58>)
 8000eb0:	f001 f9b6 	bl	8002220 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <main+0x58>)
 8000eb8:	f001 ff32 	bl	8002d20 <HAL_TIMEx_PWMN_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ebc:	2108      	movs	r1, #8
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <main+0x58>)
 8000ec0:	f001 f9ae 	bl	8002220 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <main+0x58>)
 8000ec8:	f001 ff2a 	bl	8002d20 <HAL_TIMEx_PWMN_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <main+0x54>
 8000ece:	bf00      	nop
 8000ed0:	20000030 	.word	0x20000030

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b090      	sub	sp, #64	; 0x40
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0318 	add.w	r3, r7, #24
 8000ede:	2228      	movs	r2, #40	; 0x28
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f002 f836 	bl	8002f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000efa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000efe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f04:	2301      	movs	r3, #1
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f18:	f107 0318 	add.w	r3, r7, #24
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fd35 	bl	800198c <HAL_RCC_OscConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f28:	f000 f906 	bl	8001138 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f30:	2302      	movs	r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2102      	movs	r1, #2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 ffa0 	bl	8001e8c <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f52:	f000 f8f1 	bl	8001138 <Error_Handler>
  }
}
 8000f56:	bf00      	nop
 8000f58:	3740      	adds	r7, #64	; 0x40
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b096      	sub	sp, #88	; 0x58
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2220      	movs	r2, #32
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 ffdb 	bl	8002f54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f9e:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <MX_TIM1_Init+0x174>)
 8000fa0:	4a4d      	ldr	r2, [pc, #308]	; (80010d8 <MX_TIM1_Init+0x178>)
 8000fa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fa4:	4b4b      	ldr	r3, [pc, #300]	; (80010d4 <MX_TIM1_Init+0x174>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000faa:	4b4a      	ldr	r3, [pc, #296]	; (80010d4 <MX_TIM1_Init+0x174>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000fb0:	4b48      	ldr	r3, [pc, #288]	; (80010d4 <MX_TIM1_Init+0x174>)
 8000fb2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb8:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <MX_TIM1_Init+0x174>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fbe:	4b45      	ldr	r3, [pc, #276]	; (80010d4 <MX_TIM1_Init+0x174>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc4:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <MX_TIM1_Init+0x174>)
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fca:	4842      	ldr	r0, [pc, #264]	; (80010d4 <MX_TIM1_Init+0x174>)
 8000fcc:	f001 f8c8 	bl	8002160 <HAL_TIM_Base_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fd6:	f000 f8af 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fe0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	483b      	ldr	r0, [pc, #236]	; (80010d4 <MX_TIM1_Init+0x174>)
 8000fe8:	f001 fb1a 	bl	8002620 <HAL_TIM_ConfigClockSource>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ff2:	f000 f8a1 	bl	8001138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ff6:	4837      	ldr	r0, [pc, #220]	; (80010d4 <MX_TIM1_Init+0x174>)
 8000ff8:	f001 f8dd 	bl	80021b6 <HAL_TIM_PWM_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001002:	f000 f899 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800100e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001012:	4619      	mov	r1, r3
 8001014:	482f      	ldr	r0, [pc, #188]	; (80010d4 <MX_TIM1_Init+0x174>)
 8001016:	f001 fead 	bl	8002d74 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001020:	f000 f88a 	bl	8001138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001028:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001032:	2300      	movs	r3, #0
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	2200      	movs	r2, #0
 8001048:	4619      	mov	r1, r3
 800104a:	4822      	ldr	r0, [pc, #136]	; (80010d4 <MX_TIM1_Init+0x174>)
 800104c:	f001 fa22 	bl	8002494 <HAL_TIM_PWM_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001056:	f000 f86f 	bl	8001138 <Error_Handler>
  }
  sConfigOC.Pulse = 250;
 800105a:	23fa      	movs	r3, #250	; 0xfa
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	2204      	movs	r2, #4
 8001064:	4619      	mov	r1, r3
 8001066:	481b      	ldr	r0, [pc, #108]	; (80010d4 <MX_TIM1_Init+0x174>)
 8001068:	f001 fa14 	bl	8002494 <HAL_TIM_PWM_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001072:	f000 f861 	bl	8001138 <Error_Handler>
  }
  sConfigOC.Pulse = 750;
 8001076:	f240 23ee 	movw	r3, #750	; 0x2ee
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800107c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001080:	2208      	movs	r2, #8
 8001082:	4619      	mov	r1, r3
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <MX_TIM1_Init+0x174>)
 8001086:	f001 fa05 	bl	8002494 <HAL_TIM_PWM_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8001090:	f000 f852 	bl	8001138 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4619      	mov	r1, r3
 80010b6:	4807      	ldr	r0, [pc, #28]	; (80010d4 <MX_TIM1_Init+0x174>)
 80010b8:	f001 fea0 	bl	8002dfc <HAL_TIMEx_ConfigBreakDeadTime>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 80010c2:	f000 f839 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <MX_TIM1_Init+0x174>)
 80010c8:	f000 f89c 	bl	8001204 <HAL_TIM_MspPostInit>

}
 80010cc:	bf00      	nop
 80010ce:	3758      	adds	r7, #88	; 0x58
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000030 	.word	0x20000030
 80010d8:	40012c00 	.word	0x40012c00

080010dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_GPIO_Init+0x58>)
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	4a13      	ldr	r2, [pc, #76]	; (8001134 <MX_GPIO_Init+0x58>)
 80010e8:	f043 0320 	orr.w	r3, r3, #32
 80010ec:	6193      	str	r3, [r2, #24]
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_GPIO_Init+0x58>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f003 0320 	and.w	r3, r3, #32
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_GPIO_Init+0x58>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <MX_GPIO_Init+0x58>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6193      	str	r3, [r2, #24]
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_GPIO_Init+0x58>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_GPIO_Init+0x58>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <MX_GPIO_Init+0x58>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	6193      	str	r3, [r2, #24]
 800111e:	4b05      	ldr	r3, [pc, #20]	; (8001134 <MX_GPIO_Init+0x58>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	40021000 	.word	0x40021000

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_MspInit+0x5c>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <HAL_MspInit+0x5c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_MspInit+0x5c>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_MspInit+0x5c>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_MspInit+0x5c>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_MspInit+0x5c>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_MspInit+0x60>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <HAL_MspInit+0x60>)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010000 	.word	0x40010000

080011a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a11      	ldr	r2, [pc, #68]	; (80011fc <HAL_TIM_Base_MspInit+0x54>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d11b      	bne.n	80011f2 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_TIM_Base_MspInit+0x58>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_TIM_Base_MspInit+0x58>)
 80011c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011c4:	6193      	str	r3, [r2, #24]
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_TIM_Base_MspInit+0x58>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2018      	movs	r0, #24
 80011d8:	f000 fa47 	bl	800166a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80011dc:	2018      	movs	r0, #24
 80011de:	f000 fa60 	bl	80016a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2019      	movs	r0, #25
 80011e8:	f000 fa3f 	bl	800166a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011ec:	2019      	movs	r0, #25
 80011ee:	f000 fa58 	bl	80016a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40012c00 	.word	0x40012c00
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a25      	ldr	r2, [pc, #148]	; (80012b4 <HAL_TIM_MspPostInit+0xb0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d142      	bne.n	80012aa <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <HAL_TIM_MspPostInit+0xb4>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <HAL_TIM_MspPostInit+0xb4>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HAL_TIM_MspPostInit+0xb4>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <HAL_TIM_MspPostInit+0xb4>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <HAL_TIM_MspPostInit+0xb4>)
 8001242:	f043 0308 	orr.w	r3, r3, #8
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_TIM_MspPostInit+0xb4>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001254:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2302      	movs	r3, #2
 8001260:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4814      	ldr	r0, [pc, #80]	; (80012bc <HAL_TIM_MspPostInit+0xb8>)
 800126a:	f000 fa35 	bl	80016d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800126e:	2303      	movs	r3, #3
 8001270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2302      	movs	r3, #2
 8001278:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	480f      	ldr	r0, [pc, #60]	; (80012c0 <HAL_TIM_MspPostInit+0xbc>)
 8001282:	f000 fa29 	bl	80016d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <HAL_TIM_MspPostInit+0xc0>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
 80012a4:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_TIM_MspPostInit+0xc0>)
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40012c00 	.word	0x40012c00
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010800 	.word	0x40010800
 80012c0:	40010c00 	.word	0x40010c00
 80012c4:	40010000 	.word	0x40010000

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <HardFault_Handler+0x4>

080012da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <MemManage_Handler+0x4>

080012e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <BusFault_Handler+0x4>

080012e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <UsageFault_Handler+0x4>

080012ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 f8b6 	bl	8001484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM1_BRK_IRQHandler+0x10>)
 8001322:	f000 ffaf 	bl	8002284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000030 	.word	0x20000030

08001330 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <TIM1_UP_IRQHandler+0x10>)
 8001336:	f000 ffa5 	bl	8002284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000030 	.word	0x20000030

08001344 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <SystemInit+0x5c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <SystemInit+0x5c>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <SystemInit+0x5c>)
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4911      	ldr	r1, [pc, #68]	; (80013a0 <SystemInit+0x5c>)
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <SystemInit+0x60>)
 800135c:	4013      	ands	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <SystemInit+0x5c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <SystemInit+0x5c>)
 8001366:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800136a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <SystemInit+0x5c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <SystemInit+0x5c>)
 8001376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <SystemInit+0x5c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <SystemInit+0x5c>)
 8001382:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001386:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <SystemInit+0x5c>)
 800138a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800138e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <SystemInit+0x64>)
 8001392:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001396:	609a      	str	r2, [r3, #8]
#endif 
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	40021000 	.word	0x40021000
 80013a4:	f8ff0000 	.word	0xf8ff0000
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013ae:	e003      	b.n	80013b8 <LoopCopyDataInit>

080013b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013b6:	3104      	adds	r1, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013b8:	480a      	ldr	r0, [pc, #40]	; (80013e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013c0:	d3f6      	bcc.n	80013b0 <CopyDataInit>
  ldr r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013c4:	e002      	b.n	80013cc <LoopFillZerobss>

080013c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013c8:	f842 3b04 	str.w	r3, [r2], #4

080013cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013d0:	d3f9      	bcc.n	80013c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013d2:	f7ff ffb7 	bl	8001344 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f001 fd99 	bl	8002f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013da:	f7ff fd4d 	bl	8000e78 <main>
  bx lr
 80013de:	4770      	bx	lr
  ldr r3, =_sidata
 80013e0:	08003f50 	.word	0x08003f50
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80013ec:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80013f0:	20000074 	.word	0x20000074

080013f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_2_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_Init+0x28>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <HAL_Init+0x28>)
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f923 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140e:	2000      	movs	r0, #0
 8001410:	f000 f808 	bl	8001424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001414:	f7ff fe96 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40022000 	.word	0x40022000

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x54>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_InitTick+0x58>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143a:	fbb3 f3f1 	udiv	r3, r3, r1
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f93b 	bl	80016be <HAL_SYSTICK_Config>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e00e      	b.n	8001470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d80a      	bhi.n	800146e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001460:	f000 f903 	bl	800166a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <HAL_InitTick+0x5c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000000 	.word	0x20000000
 800147c:	20000008 	.word	0x20000008
 8001480:	20000004 	.word	0x20000004

08001484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_IncTick+0x1c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x20>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_IncTick+0x20>)
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000070 	.word	0x20000070

080014a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <HAL_GetTick+0x10>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000070 	.word	0x20000070

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db0b      	blt.n	800154a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	4906      	ldr	r1, [pc, #24]	; (8001554 <__NVIC_EnableIRQ+0x34>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	2001      	movs	r0, #1
 8001542:	fa00 f202 	lsl.w	r2, r0, r2
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001620:	d301      	bcc.n	8001626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001622:	2301      	movs	r3, #1
 8001624:	e00f      	b.n	8001646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <SysTick_Config+0x40>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162e:	210f      	movs	r1, #15
 8001630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001634:	f7ff ff90 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <SysTick_Config+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <SysTick_Config+0x40>)
 8001640:	2207      	movs	r2, #7
 8001642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010

08001654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff2d 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167c:	f7ff ff42 	bl	8001504 <__NVIC_GetPriorityGrouping>
 8001680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7ff ff90 	bl	80015ac <NVIC_EncodePriority>
 800168c:	4602      	mov	r2, r0
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff5f 	bl	8001558 <__NVIC_SetPriority>
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff35 	bl	8001520 <__NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffa2 	bl	8001610 <SysTick_Config>
 80016cc:	4603      	mov	r3, r0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b480      	push	{r7}
 80016da:	b08b      	sub	sp, #44	; 0x2c
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ea:	e127      	b.n	800193c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016ec:	2201      	movs	r2, #1
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 8116 	bne.w	8001936 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b12      	cmp	r3, #18
 8001710:	d034      	beq.n	800177c <HAL_GPIO_Init+0xa4>
 8001712:	2b12      	cmp	r3, #18
 8001714:	d80d      	bhi.n	8001732 <HAL_GPIO_Init+0x5a>
 8001716:	2b02      	cmp	r3, #2
 8001718:	d02b      	beq.n	8001772 <HAL_GPIO_Init+0x9a>
 800171a:	2b02      	cmp	r3, #2
 800171c:	d804      	bhi.n	8001728 <HAL_GPIO_Init+0x50>
 800171e:	2b00      	cmp	r3, #0
 8001720:	d031      	beq.n	8001786 <HAL_GPIO_Init+0xae>
 8001722:	2b01      	cmp	r3, #1
 8001724:	d01c      	beq.n	8001760 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001726:	e048      	b.n	80017ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001728:	2b03      	cmp	r3, #3
 800172a:	d043      	beq.n	80017b4 <HAL_GPIO_Init+0xdc>
 800172c:	2b11      	cmp	r3, #17
 800172e:	d01b      	beq.n	8001768 <HAL_GPIO_Init+0x90>
          break;
 8001730:	e043      	b.n	80017ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001732:	4a89      	ldr	r2, [pc, #548]	; (8001958 <HAL_GPIO_Init+0x280>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d026      	beq.n	8001786 <HAL_GPIO_Init+0xae>
 8001738:	4a87      	ldr	r2, [pc, #540]	; (8001958 <HAL_GPIO_Init+0x280>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d806      	bhi.n	800174c <HAL_GPIO_Init+0x74>
 800173e:	4a87      	ldr	r2, [pc, #540]	; (800195c <HAL_GPIO_Init+0x284>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d020      	beq.n	8001786 <HAL_GPIO_Init+0xae>
 8001744:	4a86      	ldr	r2, [pc, #536]	; (8001960 <HAL_GPIO_Init+0x288>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d01d      	beq.n	8001786 <HAL_GPIO_Init+0xae>
          break;
 800174a:	e036      	b.n	80017ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800174c:	4a85      	ldr	r2, [pc, #532]	; (8001964 <HAL_GPIO_Init+0x28c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d019      	beq.n	8001786 <HAL_GPIO_Init+0xae>
 8001752:	4a85      	ldr	r2, [pc, #532]	; (8001968 <HAL_GPIO_Init+0x290>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d016      	beq.n	8001786 <HAL_GPIO_Init+0xae>
 8001758:	4a84      	ldr	r2, [pc, #528]	; (800196c <HAL_GPIO_Init+0x294>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_GPIO_Init+0xae>
          break;
 800175e:	e02c      	b.n	80017ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	623b      	str	r3, [r7, #32]
          break;
 8001766:	e028      	b.n	80017ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	3304      	adds	r3, #4
 800176e:	623b      	str	r3, [r7, #32]
          break;
 8001770:	e023      	b.n	80017ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	3308      	adds	r3, #8
 8001778:	623b      	str	r3, [r7, #32]
          break;
 800177a:	e01e      	b.n	80017ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	330c      	adds	r3, #12
 8001782:	623b      	str	r3, [r7, #32]
          break;
 8001784:	e019      	b.n	80017ba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d102      	bne.n	8001794 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800178e:	2304      	movs	r3, #4
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e012      	b.n	80017ba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d105      	bne.n	80017a8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800179c:	2308      	movs	r3, #8
 800179e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	611a      	str	r2, [r3, #16]
          break;
 80017a6:	e008      	b.n	80017ba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a8:	2308      	movs	r3, #8
 80017aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	615a      	str	r2, [r3, #20]
          break;
 80017b2:	e002      	b.n	80017ba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2bff      	cmp	r3, #255	; 0xff
 80017be:	d801      	bhi.n	80017c4 <HAL_GPIO_Init+0xec>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	e001      	b.n	80017c8 <HAL_GPIO_Init+0xf0>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3304      	adds	r3, #4
 80017c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2bff      	cmp	r3, #255	; 0xff
 80017ce:	d802      	bhi.n	80017d6 <HAL_GPIO_Init+0xfe>
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_Init+0x104>
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	3b08      	subs	r3, #8
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	210f      	movs	r1, #15
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	401a      	ands	r2, r3
 80017ee:	6a39      	ldr	r1, [r7, #32]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	431a      	orrs	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 8096 	beq.w	8001936 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800180a:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_GPIO_Init+0x298>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_GPIO_Init+0x298>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6193      	str	r3, [r2, #24]
 8001816:	4b56      	ldr	r3, [pc, #344]	; (8001970 <HAL_GPIO_Init+0x298>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001822:	4a54      	ldr	r2, [pc, #336]	; (8001974 <HAL_GPIO_Init+0x29c>)
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	089b      	lsrs	r3, r3, #2
 8001828:	3302      	adds	r3, #2
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4013      	ands	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4b      	ldr	r2, [pc, #300]	; (8001978 <HAL_GPIO_Init+0x2a0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0x19e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4a      	ldr	r2, [pc, #296]	; (800197c <HAL_GPIO_Init+0x2a4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00d      	beq.n	8001872 <HAL_GPIO_Init+0x19a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a49      	ldr	r2, [pc, #292]	; (8001980 <HAL_GPIO_Init+0x2a8>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d007      	beq.n	800186e <HAL_GPIO_Init+0x196>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a48      	ldr	r2, [pc, #288]	; (8001984 <HAL_GPIO_Init+0x2ac>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d101      	bne.n	800186a <HAL_GPIO_Init+0x192>
 8001866:	2303      	movs	r3, #3
 8001868:	e006      	b.n	8001878 <HAL_GPIO_Init+0x1a0>
 800186a:	2304      	movs	r3, #4
 800186c:	e004      	b.n	8001878 <HAL_GPIO_Init+0x1a0>
 800186e:	2302      	movs	r3, #2
 8001870:	e002      	b.n	8001878 <HAL_GPIO_Init+0x1a0>
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_GPIO_Init+0x1a0>
 8001876:	2300      	movs	r3, #0
 8001878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187a:	f002 0203 	and.w	r2, r2, #3
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	4093      	lsls	r3, r2
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001888:	493a      	ldr	r1, [pc, #232]	; (8001974 <HAL_GPIO_Init+0x29c>)
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	3302      	adds	r3, #2
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018a2:	4b39      	ldr	r3, [pc, #228]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4938      	ldr	r1, [pc, #224]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
 80018ae:	e006      	b.n	80018be <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b0:	4b35      	ldr	r3, [pc, #212]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4933      	ldr	r1, [pc, #204]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ca:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	492e      	ldr	r1, [pc, #184]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
 80018d6:	e006      	b.n	80018e6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018d8:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	43db      	mvns	r3, r3
 80018e0:	4929      	ldr	r1, [pc, #164]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	4924      	ldr	r1, [pc, #144]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
 80018fe:	e006      	b.n	800190e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001900:	4b21      	ldr	r3, [pc, #132]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	43db      	mvns	r3, r3
 8001908:	491f      	ldr	r1, [pc, #124]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 800190a:	4013      	ands	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800191a:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	491a      	ldr	r1, [pc, #104]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	60cb      	str	r3, [r1, #12]
 8001926:	e006      	b.n	8001936 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	43db      	mvns	r3, r3
 8001930:	4915      	ldr	r1, [pc, #84]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 8001932:	4013      	ands	r3, r2
 8001934:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	3301      	adds	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	f47f aed0 	bne.w	80016ec <HAL_GPIO_Init+0x14>
  }
}
 800194c:	bf00      	nop
 800194e:	372c      	adds	r7, #44	; 0x2c
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	10210000 	.word	0x10210000
 800195c:	10110000 	.word	0x10110000
 8001960:	10120000 	.word	0x10120000
 8001964:	10310000 	.word	0x10310000
 8001968:	10320000 	.word	0x10320000
 800196c:	10220000 	.word	0x10220000
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000
 8001978:	40010800 	.word	0x40010800
 800197c:	40010c00 	.word	0x40010c00
 8001980:	40011000 	.word	0x40011000
 8001984:	40011400 	.word	0x40011400
 8001988:	40010400 	.word	0x40010400

0800198c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e26c      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8087 	beq.w	8001aba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ac:	4b92      	ldr	r3, [pc, #584]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d00c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b8:	4b8f      	ldr	r3, [pc, #572]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d112      	bne.n	80019ea <HAL_RCC_OscConfig+0x5e>
 80019c4:	4b8c      	ldr	r3, [pc, #560]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d0:	d10b      	bne.n	80019ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d2:	4b89      	ldr	r3, [pc, #548]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d06c      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x12c>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d168      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e246      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f2:	d106      	bne.n	8001a02 <HAL_RCC_OscConfig+0x76>
 80019f4:	4b80      	ldr	r3, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a7f      	ldr	r2, [pc, #508]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 80019fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	e02e      	b.n	8001a60 <HAL_RCC_OscConfig+0xd4>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x98>
 8001a0a:	4b7b      	ldr	r3, [pc, #492]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a7a      	ldr	r2, [pc, #488]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b78      	ldr	r3, [pc, #480]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a77      	ldr	r2, [pc, #476]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e01d      	b.n	8001a60 <HAL_RCC_OscConfig+0xd4>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0xbc>
 8001a2e:	4b72      	ldr	r3, [pc, #456]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a71      	ldr	r2, [pc, #452]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a6e      	ldr	r2, [pc, #440]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e00b      	b.n	8001a60 <HAL_RCC_OscConfig+0xd4>
 8001a48:	4b6b      	ldr	r3, [pc, #428]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a6a      	ldr	r2, [pc, #424]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a67      	ldr	r2, [pc, #412]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d013      	beq.n	8001a90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fd1e 	bl	80014a8 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff fd1a 	bl	80014a8 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e1fa      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	4b5d      	ldr	r3, [pc, #372]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0xe4>
 8001a8e:	e014      	b.n	8001aba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fd0a 	bl	80014a8 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a98:	f7ff fd06 	bl	80014a8 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b64      	cmp	r3, #100	; 0x64
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e1e6      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x10c>
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d063      	beq.n	8001b8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ac6:	4b4c      	ldr	r3, [pc, #304]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ad2:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d11c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x18c>
 8001ade:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d116      	bne.n	8001b18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aea:	4b43      	ldr	r3, [pc, #268]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d005      	beq.n	8001b02 <HAL_RCC_OscConfig+0x176>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d001      	beq.n	8001b02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e1ba      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b16:	e03a      	b.n	8001b8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d020      	beq.n	8001b62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b20:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7ff fcbf 	bl	80014a8 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2e:	f7ff fcbb 	bl	80014a8 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e19b      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4927      	ldr	r1, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
 8001b60:	e015      	b.n	8001b8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fc9e 	bl	80014a8 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b70:	f7ff fc9a 	bl	80014a8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e17a      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d03a      	beq.n	8001c10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d019      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff fc7e 	bl	80014a8 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fc7a 	bl	80014a8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e15a      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f000 faa8 	bl	8002124 <RCC_Delay>
 8001bd4:	e01c      	b.n	8001c10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bdc:	f7ff fc64 	bl	80014a8 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be2:	e00f      	b.n	8001c04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff fc60 	bl	80014a8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d908      	bls.n	8001c04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e140      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	42420000 	.word	0x42420000
 8001c00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c04:	4b9e      	ldr	r3, [pc, #632]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1e9      	bne.n	8001be4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80a6 	beq.w	8001d6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c22:	4b97      	ldr	r3, [pc, #604]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10d      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b94      	ldr	r3, [pc, #592]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a93      	ldr	r2, [pc, #588]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b91      	ldr	r3, [pc, #580]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	4b8e      	ldr	r3, [pc, #568]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d118      	bne.n	8001c88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c56:	4b8b      	ldr	r3, [pc, #556]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a8a      	ldr	r2, [pc, #552]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fc21 	bl	80014a8 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6a:	f7ff fc1d 	bl	80014a8 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b64      	cmp	r3, #100	; 0x64
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e0fd      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	4b81      	ldr	r3, [pc, #516]	; (8001e84 <HAL_RCC_OscConfig+0x4f8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x312>
 8001c90:	4b7b      	ldr	r3, [pc, #492]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	4a7a      	ldr	r2, [pc, #488]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6213      	str	r3, [r2, #32]
 8001c9c:	e02d      	b.n	8001cfa <HAL_RCC_OscConfig+0x36e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x334>
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a75      	ldr	r2, [pc, #468]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6213      	str	r3, [r2, #32]
 8001cb2:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a72      	ldr	r2, [pc, #456]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	6213      	str	r3, [r2, #32]
 8001cbe:	e01c      	b.n	8001cfa <HAL_RCC_OscConfig+0x36e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x356>
 8001cc8:	4b6d      	ldr	r3, [pc, #436]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a6c      	ldr	r2, [pc, #432]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	f043 0304 	orr.w	r3, r3, #4
 8001cd2:	6213      	str	r3, [r2, #32]
 8001cd4:	4b6a      	ldr	r3, [pc, #424]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4a69      	ldr	r2, [pc, #420]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6213      	str	r3, [r2, #32]
 8001ce0:	e00b      	b.n	8001cfa <HAL_RCC_OscConfig+0x36e>
 8001ce2:	4b67      	ldr	r3, [pc, #412]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a66      	ldr	r2, [pc, #408]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6213      	str	r3, [r2, #32]
 8001cee:	4b64      	ldr	r3, [pc, #400]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a63      	ldr	r2, [pc, #396]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d015      	beq.n	8001d2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7ff fbd1 	bl	80014a8 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff fbcd 	bl	80014a8 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e0ab      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d20:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0ee      	beq.n	8001d0a <HAL_RCC_OscConfig+0x37e>
 8001d2c:	e014      	b.n	8001d58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2e:	f7ff fbbb 	bl	80014a8 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f7ff fbb7 	bl	80014a8 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e095      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4c:	4b4c      	ldr	r3, [pc, #304]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ee      	bne.n	8001d36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d58:	7dfb      	ldrb	r3, [r7, #23]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d105      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5e:	4b48      	ldr	r3, [pc, #288]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a47      	ldr	r2, [pc, #284]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8081 	beq.w	8001e76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d74:	4b42      	ldr	r3, [pc, #264]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d061      	beq.n	8001e44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d146      	bne.n	8001e16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d88:	4b3f      	ldr	r3, [pc, #252]	; (8001e88 <HAL_RCC_OscConfig+0x4fc>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fb8b 	bl	80014a8 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7ff fb87 	bl	80014a8 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e067      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da8:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f0      	bne.n	8001d96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d108      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dbe:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	492d      	ldr	r1, [pc, #180]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a19      	ldr	r1, [r3, #32]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	430b      	orrs	r3, r1
 8001de2:	4927      	ldr	r1, [pc, #156]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <HAL_RCC_OscConfig+0x4fc>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7ff fb5b 	bl	80014a8 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df6:	f7ff fb57 	bl	80014a8 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e037      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e08:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x46a>
 8001e14:	e02f      	b.n	8001e76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e16:	4b1c      	ldr	r3, [pc, #112]	; (8001e88 <HAL_RCC_OscConfig+0x4fc>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fb44 	bl	80014a8 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e24:	f7ff fb40 	bl	80014a8 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e020      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x498>
 8001e42:	e018      	b.n	8001e76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e013      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40007000 	.word	0x40007000
 8001e88:	42420060 	.word	0x42420060

08001e8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0d0      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d910      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b67      	ldr	r3, [pc, #412]	; (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 0207 	bic.w	r2, r3, #7
 8001eb6:	4965      	ldr	r1, [pc, #404]	; (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b63      	ldr	r3, [pc, #396]	; (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0b8      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee8:	4b59      	ldr	r3, [pc, #356]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	4a58      	ldr	r2, [pc, #352]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ef2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	494d      	ldr	r1, [pc, #308]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d040      	beq.n	8001fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d115      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e07f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4a:	4b41      	ldr	r3, [pc, #260]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e073      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06b      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f6a:	4b39      	ldr	r3, [pc, #228]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f023 0203 	bic.w	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4936      	ldr	r1, [pc, #216]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f7c:	f7ff fa94 	bl	80014a8 <HAL_GetTick>
 8001f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f84:	f7ff fa90 	bl	80014a8 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e053      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 020c 	and.w	r2, r3, #12
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d1eb      	bne.n	8001f84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fac:	4b27      	ldr	r3, [pc, #156]	; (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d210      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b24      	ldr	r3, [pc, #144]	; (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 0207 	bic.w	r2, r3, #7
 8001fc2:	4922      	ldr	r1, [pc, #136]	; (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e032      	b.n	8002042 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4916      	ldr	r1, [pc, #88]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	490e      	ldr	r1, [pc, #56]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800201a:	f000 f821 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 800201e:	4601      	mov	r1, r0
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_RCC_ClockConfig+0x1c8>)
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	fa21 f303 	lsr.w	r3, r1, r3
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1cc>)
 8002034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_RCC_ClockConfig+0x1d0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f9f2 	bl	8001424 <HAL_InitTick>

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40022000 	.word	0x40022000
 8002050:	40021000 	.word	0x40021000
 8002054:	08003b68 	.word	0x08003b68
 8002058:	20000000 	.word	0x20000000
 800205c:	20000004 	.word	0x20000004

08002060 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b490      	push	{r4, r7}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002066:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002068:	1d3c      	adds	r4, r7, #4
 800206a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800206c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002070:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b04      	cmp	r3, #4
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x40>
 800209a:	2b08      	cmp	r3, #8
 800209c:	d003      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x46>
 800209e:	e02d      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020a2:	623b      	str	r3, [r7, #32]
      break;
 80020a4:	e02d      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	0c9b      	lsrs	r3, r3, #18
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020b2:	4413      	add	r3, r2
 80020b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	0c5b      	lsrs	r3, r3, #17
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020d2:	4413      	add	r3, r2
 80020d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	4a0f      	ldr	r2, [pc, #60]	; (800211c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020de:	fb02 f203 	mul.w	r2, r2, r3
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ea:	e004      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020f0:	fb02 f303 	mul.w	r3, r2, r3
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	623b      	str	r3, [r7, #32]
      break;
 80020fa:	e002      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <HAL_RCC_GetSysClockFreq+0xbc>)
 80020fe:	623b      	str	r3, [r7, #32]
      break;
 8002100:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002102:	6a3b      	ldr	r3, [r7, #32]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3728      	adds	r7, #40	; 0x28
 8002108:	46bd      	mov	sp, r7
 800210a:	bc90      	pop	{r4, r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	08003b54 	.word	0x08003b54
 8002114:	08003b64 	.word	0x08003b64
 8002118:	40021000 	.word	0x40021000
 800211c:	007a1200 	.word	0x007a1200
 8002120:	003d0900 	.word	0x003d0900

08002124 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <RCC_Delay+0x34>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0a      	ldr	r2, [pc, #40]	; (800215c <RCC_Delay+0x38>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	0a5b      	lsrs	r3, r3, #9
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002140:	bf00      	nop
  }
  while (Delay --);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	60fa      	str	r2, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f9      	bne.n	8002140 <RCC_Delay+0x1c>
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000000 	.word	0x20000000
 800215c:	10624dd3 	.word	0x10624dd3

08002160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e01d      	b.n	80021ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff f80e 	bl	80011a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3304      	adds	r3, #4
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f000 fb1a 	bl	80027d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e01d      	b.n	8002204 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d106      	bne.n	80021e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f815 	bl	800220c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2202      	movs	r2, #2
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3304      	adds	r3, #4
 80021f2:	4619      	mov	r1, r3
 80021f4:	4610      	mov	r0, r2
 80021f6:	f000 faef 	bl	80027d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
	...

08002220 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2201      	movs	r2, #1
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fd50 	bl	8002cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a10      	ldr	r2, [pc, #64]	; (8002280 <HAL_TIM_PWM_Start+0x60>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d107      	bne.n	8002252 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b06      	cmp	r3, #6
 8002262:	d007      	beq.n	8002274 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40012c00 	.word	0x40012c00

08002284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b02      	cmp	r3, #2
 8002298:	d122      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d11b      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0202 	mvn.w	r2, #2
 80022b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fa6a 	bl	80027a0 <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa5d 	bl	800278e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fa6c 	bl	80027b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0204 	mvn.w	r2, #4
 8002304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fa40 	bl	80027a0 <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fa33 	bl	800278e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fa42 	bl	80027b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b08      	cmp	r3, #8
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0208 	mvn.w	r2, #8
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2204      	movs	r2, #4
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fa16 	bl	80027a0 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fa09 	bl	800278e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fa18 	bl	80027b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b10      	cmp	r3, #16
 8002394:	d122      	bne.n	80023dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d11b      	bne.n	80023dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0210 	mvn.w	r2, #16
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2208      	movs	r2, #8
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f9ec 	bl	80027a0 <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f9df 	bl	800278e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f9ee 	bl	80027b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0201 	mvn.w	r2, #1
 8002400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fe fc34 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b80      	cmp	r3, #128	; 0x80
 8002414:	d10e      	bne.n	8002434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b80      	cmp	r3, #128	; 0x80
 8002422:	d107      	bne.n	8002434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800242c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fd3e 	bl	8002eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	2b40      	cmp	r3, #64	; 0x40
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d107      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f9b2 	bl	80027c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b20      	cmp	r3, #32
 800246c:	d10e      	bne.n	800248c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b20      	cmp	r3, #32
 800247a:	d107      	bne.n	800248c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0220 	mvn.w	r2, #32
 8002484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fd09 	bl	8002e9e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e0b4      	b.n	8002618 <HAL_TIM_PWM_ConfigChannel+0x184>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	f200 809f 	bhi.w	8002604 <HAL_TIM_PWM_ConfigChannel+0x170>
 80024c6:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	08002501 	.word	0x08002501
 80024d0:	08002605 	.word	0x08002605
 80024d4:	08002605 	.word	0x08002605
 80024d8:	08002605 	.word	0x08002605
 80024dc:	08002541 	.word	0x08002541
 80024e0:	08002605 	.word	0x08002605
 80024e4:	08002605 	.word	0x08002605
 80024e8:	08002605 	.word	0x08002605
 80024ec:	08002583 	.word	0x08002583
 80024f0:	08002605 	.word	0x08002605
 80024f4:	08002605 	.word	0x08002605
 80024f8:	08002605 	.word	0x08002605
 80024fc:	080025c3 	.word	0x080025c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f9c8 	bl	800289c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0208 	orr.w	r2, r2, #8
 800251a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0204 	bic.w	r2, r2, #4
 800252a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6999      	ldr	r1, [r3, #24]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	619a      	str	r2, [r3, #24]
      break;
 800253e:	e062      	b.n	8002606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fa0e 	bl	8002968 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800255a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800256a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6999      	ldr	r1, [r3, #24]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	021a      	lsls	r2, r3, #8
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	619a      	str	r2, [r3, #24]
      break;
 8002580:	e041      	b.n	8002606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fa57 	bl	8002a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0208 	orr.w	r2, r2, #8
 800259c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0204 	bic.w	r2, r2, #4
 80025ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69d9      	ldr	r1, [r3, #28]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	61da      	str	r2, [r3, #28]
      break;
 80025c0:	e021      	b.n	8002606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 faa1 	bl	8002b10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69d9      	ldr	r1, [r3, #28]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	021a      	lsls	r2, r3, #8
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	61da      	str	r2, [r3, #28]
      break;
 8002602:	e000      	b.n	8002606 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002604:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_TIM_ConfigClockSource+0x18>
 8002634:	2302      	movs	r3, #2
 8002636:	e0a6      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x166>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800265e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d067      	beq.n	8002740 <HAL_TIM_ConfigClockSource+0x120>
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d80b      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x6c>
 8002674:	2b10      	cmp	r3, #16
 8002676:	d073      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x140>
 8002678:	2b10      	cmp	r3, #16
 800267a:	d802      	bhi.n	8002682 <HAL_TIM_ConfigClockSource+0x62>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d06f      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002680:	e078      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002682:	2b20      	cmp	r3, #32
 8002684:	d06c      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x140>
 8002686:	2b30      	cmp	r3, #48	; 0x30
 8002688:	d06a      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800268a:	e073      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800268c:	2b70      	cmp	r3, #112	; 0x70
 800268e:	d00d      	beq.n	80026ac <HAL_TIM_ConfigClockSource+0x8c>
 8002690:	2b70      	cmp	r3, #112	; 0x70
 8002692:	d804      	bhi.n	800269e <HAL_TIM_ConfigClockSource+0x7e>
 8002694:	2b50      	cmp	r3, #80	; 0x50
 8002696:	d033      	beq.n	8002700 <HAL_TIM_ConfigClockSource+0xe0>
 8002698:	2b60      	cmp	r3, #96	; 0x60
 800269a:	d041      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800269c:	e06a      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800269e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a2:	d066      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x152>
 80026a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a8:	d017      	beq.n	80026da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80026aa:	e063      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f000 faed 	bl	8002c9a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	609a      	str	r2, [r3, #8]
      break;
 80026d8:	e04c      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f000 fad6 	bl	8002c9a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026fc:	609a      	str	r2, [r3, #8]
      break;
 80026fe:	e039      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	461a      	mov	r2, r3
 800270e:	f000 fa4d 	bl	8002bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2150      	movs	r1, #80	; 0x50
 8002718:	4618      	mov	r0, r3
 800271a:	f000 faa4 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 800271e:	e029      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	461a      	mov	r2, r3
 800272e:	f000 fa6b 	bl	8002c08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2160      	movs	r1, #96	; 0x60
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fa94 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 800273e:	e019      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	6859      	ldr	r1, [r3, #4]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	461a      	mov	r2, r3
 800274e:	f000 fa2d 	bl	8002bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2140      	movs	r1, #64	; 0x40
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fa84 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 800275e:	e009      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	4610      	mov	r0, r2
 800276c:	f000 fa7b 	bl	8002c66 <TIM_ITRx_SetConfig>
      break;
 8002770:	e000      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
	...

080027d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a29      	ldr	r2, [pc, #164]	; (8002890 <TIM_Base_SetConfig+0xb8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00b      	beq.n	8002808 <TIM_Base_SetConfig+0x30>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f6:	d007      	beq.n	8002808 <TIM_Base_SetConfig+0x30>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a26      	ldr	r2, [pc, #152]	; (8002894 <TIM_Base_SetConfig+0xbc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d003      	beq.n	8002808 <TIM_Base_SetConfig+0x30>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a25      	ldr	r2, [pc, #148]	; (8002898 <TIM_Base_SetConfig+0xc0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d108      	bne.n	800281a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <TIM_Base_SetConfig+0xb8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00b      	beq.n	800283a <TIM_Base_SetConfig+0x62>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002828:	d007      	beq.n	800283a <TIM_Base_SetConfig+0x62>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <TIM_Base_SetConfig+0xbc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d003      	beq.n	800283a <TIM_Base_SetConfig+0x62>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a18      	ldr	r2, [pc, #96]	; (8002898 <TIM_Base_SetConfig+0xc0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d108      	bne.n	800284c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a07      	ldr	r2, [pc, #28]	; (8002890 <TIM_Base_SetConfig+0xb8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d103      	bne.n	8002880 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	615a      	str	r2, [r3, #20]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40000400 	.word	0x40000400
 8002898:	40000800 	.word	0x40000800

0800289c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	f023 0201 	bic.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 0302 	bic.w	r3, r3, #2
 80028e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <TIM_OC1_SetConfig+0xc8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d10c      	bne.n	8002912 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f023 0308 	bic.w	r3, r3, #8
 80028fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <TIM_OC1_SetConfig+0xc8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d111      	bne.n	800293e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	621a      	str	r2, [r3, #32]
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40012c00 	.word	0x40012c00

08002968 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f023 0210 	bic.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f023 0320 	bic.w	r3, r3, #32
 80029b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <TIM_OC2_SetConfig+0xd0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10d      	bne.n	80029e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <TIM_OC2_SetConfig+0xd0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d113      	bne.n	8002a14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr
 8002a38:	40012c00 	.word	0x40012c00

08002a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <TIM_OC3_SetConfig+0xd0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10d      	bne.n	8002ab6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <TIM_OC3_SetConfig+0xd0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d113      	bne.n	8002ae6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	621a      	str	r2, [r3, #32]
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40012c00 	.word	0x40012c00

08002b10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	031b      	lsls	r3, r3, #12
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ba8 <TIM_OC4_SetConfig+0x98>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d109      	bne.n	8002b84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	019b      	lsls	r3, r3, #6
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	621a      	str	r2, [r3, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	40012c00 	.word	0x40012c00

08002bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f023 0201 	bic.w	r2, r3, #1
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f023 030a 	bic.w	r3, r3, #10
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f023 0210 	bic.w	r2, r3, #16
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	031b      	lsls	r3, r3, #12
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	621a      	str	r2, [r3, #32]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f043 0307 	orr.w	r3, r3, #7
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	609a      	str	r2, [r3, #8]
}
 8002c90:	bf00      	nop
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b087      	sub	sp, #28
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	021a      	lsls	r2, r3, #8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	609a      	str	r2, [r3, #8]
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2201      	movs	r2, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1a      	ldr	r2, [r3, #32]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	6839      	ldr	r1, [r7, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f8c5 	bl	8002ec2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d007      	beq.n	8002d6a <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0201 	orr.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e032      	b.n	8002df2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e03d      	b.n	8002e94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b087      	sub	sp, #28
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2204      	movs	r2, #4
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1a      	ldr	r2, [r3, #32]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a1a      	ldr	r2, [r3, #32]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	431a      	orrs	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	621a      	str	r2, [r3, #32]
}
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
	...

08002f0c <__libc_init_array>:
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	2500      	movs	r5, #0
 8002f10:	4e0c      	ldr	r6, [pc, #48]	; (8002f44 <__libc_init_array+0x38>)
 8002f12:	4c0d      	ldr	r4, [pc, #52]	; (8002f48 <__libc_init_array+0x3c>)
 8002f14:	1ba4      	subs	r4, r4, r6
 8002f16:	10a4      	asrs	r4, r4, #2
 8002f18:	42a5      	cmp	r5, r4
 8002f1a:	d109      	bne.n	8002f30 <__libc_init_array+0x24>
 8002f1c:	f000 fe0e 	bl	8003b3c <_init>
 8002f20:	2500      	movs	r5, #0
 8002f22:	4e0a      	ldr	r6, [pc, #40]	; (8002f4c <__libc_init_array+0x40>)
 8002f24:	4c0a      	ldr	r4, [pc, #40]	; (8002f50 <__libc_init_array+0x44>)
 8002f26:	1ba4      	subs	r4, r4, r6
 8002f28:	10a4      	asrs	r4, r4, #2
 8002f2a:	42a5      	cmp	r5, r4
 8002f2c:	d105      	bne.n	8002f3a <__libc_init_array+0x2e>
 8002f2e:	bd70      	pop	{r4, r5, r6, pc}
 8002f30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f34:	4798      	blx	r3
 8002f36:	3501      	adds	r5, #1
 8002f38:	e7ee      	b.n	8002f18 <__libc_init_array+0xc>
 8002f3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f3e:	4798      	blx	r3
 8002f40:	3501      	adds	r5, #1
 8002f42:	e7f2      	b.n	8002f2a <__libc_init_array+0x1e>
 8002f44:	08003f48 	.word	0x08003f48
 8002f48:	08003f48 	.word	0x08003f48
 8002f4c:	08003f48 	.word	0x08003f48
 8002f50:	08003f4c 	.word	0x08003f4c

08002f54 <memset>:
 8002f54:	4603      	mov	r3, r0
 8002f56:	4402      	add	r2, r0
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d100      	bne.n	8002f5e <memset+0xa>
 8002f5c:	4770      	bx	lr
 8002f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f62:	e7f9      	b.n	8002f58 <memset+0x4>

08002f64 <cosf>:
 8002f64:	b507      	push	{r0, r1, r2, lr}
 8002f66:	4a18      	ldr	r2, [pc, #96]	; (8002fc8 <cosf+0x64>)
 8002f68:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	4601      	mov	r1, r0
 8002f70:	dc03      	bgt.n	8002f7a <cosf+0x16>
 8002f72:	2100      	movs	r1, #0
 8002f74:	f000 f9f8 	bl	8003368 <__kernel_cosf>
 8002f78:	e004      	b.n	8002f84 <cosf+0x20>
 8002f7a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8002f7e:	db04      	blt.n	8002f8a <cosf+0x26>
 8002f80:	f7fd fb7e 	bl	8000680 <__aeabi_fsub>
 8002f84:	b003      	add	sp, #12
 8002f86:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f8a:	4669      	mov	r1, sp
 8002f8c:	f000 f894 	bl	80030b8 <__ieee754_rem_pio2f>
 8002f90:	f000 0203 	and.w	r2, r0, #3
 8002f94:	2a01      	cmp	r2, #1
 8002f96:	d005      	beq.n	8002fa4 <cosf+0x40>
 8002f98:	2a02      	cmp	r2, #2
 8002f9a:	d00a      	beq.n	8002fb2 <cosf+0x4e>
 8002f9c:	b972      	cbnz	r2, 8002fbc <cosf+0x58>
 8002f9e:	9901      	ldr	r1, [sp, #4]
 8002fa0:	9800      	ldr	r0, [sp, #0]
 8002fa2:	e7e7      	b.n	8002f74 <cosf+0x10>
 8002fa4:	9901      	ldr	r1, [sp, #4]
 8002fa6:	9800      	ldr	r0, [sp, #0]
 8002fa8:	f000 fcfc 	bl	80039a4 <__kernel_sinf>
 8002fac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8002fb0:	e7e8      	b.n	8002f84 <cosf+0x20>
 8002fb2:	9901      	ldr	r1, [sp, #4]
 8002fb4:	9800      	ldr	r0, [sp, #0]
 8002fb6:	f000 f9d7 	bl	8003368 <__kernel_cosf>
 8002fba:	e7f7      	b.n	8002fac <cosf+0x48>
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	9901      	ldr	r1, [sp, #4]
 8002fc0:	9800      	ldr	r0, [sp, #0]
 8002fc2:	f000 fcef 	bl	80039a4 <__kernel_sinf>
 8002fc6:	e7dd      	b.n	8002f84 <cosf+0x20>
 8002fc8:	3f490fd8 	.word	0x3f490fd8

08002fcc <floorf>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8002fd2:	0df5      	lsrs	r5, r6, #23
 8002fd4:	3d7f      	subs	r5, #127	; 0x7f
 8002fd6:	2d16      	cmp	r5, #22
 8002fd8:	4601      	mov	r1, r0
 8002fda:	4604      	mov	r4, r0
 8002fdc:	dc26      	bgt.n	800302c <floorf+0x60>
 8002fde:	2d00      	cmp	r5, #0
 8002fe0:	da0e      	bge.n	8003000 <floorf+0x34>
 8002fe2:	4917      	ldr	r1, [pc, #92]	; (8003040 <floorf+0x74>)
 8002fe4:	f7fd fb4e 	bl	8000684 <__addsf3>
 8002fe8:	2100      	movs	r1, #0
 8002fea:	f7fd fe0f 	bl	8000c0c <__aeabi_fcmpgt>
 8002fee:	b128      	cbz	r0, 8002ffc <floorf+0x30>
 8002ff0:	2c00      	cmp	r4, #0
 8002ff2:	da23      	bge.n	800303c <floorf+0x70>
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <floorf+0x78>)
 8002ff6:	2e00      	cmp	r6, #0
 8002ff8:	bf18      	it	ne
 8002ffa:	461c      	movne	r4, r3
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	e01b      	b.n	8003038 <floorf+0x6c>
 8003000:	4e11      	ldr	r6, [pc, #68]	; (8003048 <floorf+0x7c>)
 8003002:	412e      	asrs	r6, r5
 8003004:	4230      	tst	r0, r6
 8003006:	d017      	beq.n	8003038 <floorf+0x6c>
 8003008:	490d      	ldr	r1, [pc, #52]	; (8003040 <floorf+0x74>)
 800300a:	f7fd fb3b 	bl	8000684 <__addsf3>
 800300e:	2100      	movs	r1, #0
 8003010:	f7fd fdfc 	bl	8000c0c <__aeabi_fcmpgt>
 8003014:	2800      	cmp	r0, #0
 8003016:	d0f1      	beq.n	8002ffc <floorf+0x30>
 8003018:	2c00      	cmp	r4, #0
 800301a:	bfbe      	ittt	lt
 800301c:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8003020:	fa43 f505 	asrlt.w	r5, r3, r5
 8003024:	1964      	addlt	r4, r4, r5
 8003026:	ea24 0406 	bic.w	r4, r4, r6
 800302a:	e7e7      	b.n	8002ffc <floorf+0x30>
 800302c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8003030:	d302      	bcc.n	8003038 <floorf+0x6c>
 8003032:	f7fd fb27 	bl	8000684 <__addsf3>
 8003036:	4601      	mov	r1, r0
 8003038:	4608      	mov	r0, r1
 800303a:	bd70      	pop	{r4, r5, r6, pc}
 800303c:	2400      	movs	r4, #0
 800303e:	e7dd      	b.n	8002ffc <floorf+0x30>
 8003040:	7149f2ca 	.word	0x7149f2ca
 8003044:	bf800000 	.word	0xbf800000
 8003048:	007fffff 	.word	0x007fffff

0800304c <sinf>:
 800304c:	b507      	push	{r0, r1, r2, lr}
 800304e:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <sinf+0x68>)
 8003050:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003054:	4293      	cmp	r3, r2
 8003056:	4601      	mov	r1, r0
 8003058:	dc04      	bgt.n	8003064 <sinf+0x18>
 800305a:	2200      	movs	r2, #0
 800305c:	2100      	movs	r1, #0
 800305e:	f000 fca1 	bl	80039a4 <__kernel_sinf>
 8003062:	e004      	b.n	800306e <sinf+0x22>
 8003064:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003068:	db04      	blt.n	8003074 <sinf+0x28>
 800306a:	f7fd fb09 	bl	8000680 <__aeabi_fsub>
 800306e:	b003      	add	sp, #12
 8003070:	f85d fb04 	ldr.w	pc, [sp], #4
 8003074:	4669      	mov	r1, sp
 8003076:	f000 f81f 	bl	80030b8 <__ieee754_rem_pio2f>
 800307a:	f000 0003 	and.w	r0, r0, #3
 800307e:	2801      	cmp	r0, #1
 8003080:	d006      	beq.n	8003090 <sinf+0x44>
 8003082:	2802      	cmp	r0, #2
 8003084:	d009      	beq.n	800309a <sinf+0x4e>
 8003086:	b980      	cbnz	r0, 80030aa <sinf+0x5e>
 8003088:	2201      	movs	r2, #1
 800308a:	9901      	ldr	r1, [sp, #4]
 800308c:	9800      	ldr	r0, [sp, #0]
 800308e:	e7e6      	b.n	800305e <sinf+0x12>
 8003090:	9901      	ldr	r1, [sp, #4]
 8003092:	9800      	ldr	r0, [sp, #0]
 8003094:	f000 f968 	bl	8003368 <__kernel_cosf>
 8003098:	e7e9      	b.n	800306e <sinf+0x22>
 800309a:	2201      	movs	r2, #1
 800309c:	9901      	ldr	r1, [sp, #4]
 800309e:	9800      	ldr	r0, [sp, #0]
 80030a0:	f000 fc80 	bl	80039a4 <__kernel_sinf>
 80030a4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80030a8:	e7e1      	b.n	800306e <sinf+0x22>
 80030aa:	9901      	ldr	r1, [sp, #4]
 80030ac:	9800      	ldr	r0, [sp, #0]
 80030ae:	f000 f95b 	bl	8003368 <__kernel_cosf>
 80030b2:	e7f7      	b.n	80030a4 <sinf+0x58>
 80030b4:	3f490fd8 	.word	0x3f490fd8

080030b8 <__ieee754_rem_pio2f>:
 80030b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030bc:	4a9d      	ldr	r2, [pc, #628]	; (8003334 <__ieee754_rem_pio2f+0x27c>)
 80030be:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80030c2:	4295      	cmp	r5, r2
 80030c4:	b087      	sub	sp, #28
 80030c6:	460c      	mov	r4, r1
 80030c8:	4607      	mov	r7, r0
 80030ca:	dc04      	bgt.n	80030d6 <__ieee754_rem_pio2f+0x1e>
 80030cc:	2300      	movs	r3, #0
 80030ce:	6020      	str	r0, [r4, #0]
 80030d0:	604b      	str	r3, [r1, #4]
 80030d2:	2600      	movs	r6, #0
 80030d4:	e01a      	b.n	800310c <__ieee754_rem_pio2f+0x54>
 80030d6:	4a98      	ldr	r2, [pc, #608]	; (8003338 <__ieee754_rem_pio2f+0x280>)
 80030d8:	4295      	cmp	r5, r2
 80030da:	dc4b      	bgt.n	8003174 <__ieee754_rem_pio2f+0xbc>
 80030dc:	2800      	cmp	r0, #0
 80030de:	f025 050f 	bic.w	r5, r5, #15
 80030e2:	4996      	ldr	r1, [pc, #600]	; (800333c <__ieee754_rem_pio2f+0x284>)
 80030e4:	4e96      	ldr	r6, [pc, #600]	; (8003340 <__ieee754_rem_pio2f+0x288>)
 80030e6:	dd23      	ble.n	8003130 <__ieee754_rem_pio2f+0x78>
 80030e8:	f7fd faca 	bl	8000680 <__aeabi_fsub>
 80030ec:	42b5      	cmp	r5, r6
 80030ee:	4607      	mov	r7, r0
 80030f0:	d010      	beq.n	8003114 <__ieee754_rem_pio2f+0x5c>
 80030f2:	4994      	ldr	r1, [pc, #592]	; (8003344 <__ieee754_rem_pio2f+0x28c>)
 80030f4:	f7fd fac4 	bl	8000680 <__aeabi_fsub>
 80030f8:	4601      	mov	r1, r0
 80030fa:	6020      	str	r0, [r4, #0]
 80030fc:	4638      	mov	r0, r7
 80030fe:	f7fd fabf 	bl	8000680 <__aeabi_fsub>
 8003102:	4990      	ldr	r1, [pc, #576]	; (8003344 <__ieee754_rem_pio2f+0x28c>)
 8003104:	f7fd fabc 	bl	8000680 <__aeabi_fsub>
 8003108:	2601      	movs	r6, #1
 800310a:	6060      	str	r0, [r4, #4]
 800310c:	4630      	mov	r0, r6
 800310e:	b007      	add	sp, #28
 8003110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003114:	498c      	ldr	r1, [pc, #560]	; (8003348 <__ieee754_rem_pio2f+0x290>)
 8003116:	f7fd fab3 	bl	8000680 <__aeabi_fsub>
 800311a:	498c      	ldr	r1, [pc, #560]	; (800334c <__ieee754_rem_pio2f+0x294>)
 800311c:	4605      	mov	r5, r0
 800311e:	f7fd faaf 	bl	8000680 <__aeabi_fsub>
 8003122:	4601      	mov	r1, r0
 8003124:	6020      	str	r0, [r4, #0]
 8003126:	4628      	mov	r0, r5
 8003128:	f7fd faaa 	bl	8000680 <__aeabi_fsub>
 800312c:	4987      	ldr	r1, [pc, #540]	; (800334c <__ieee754_rem_pio2f+0x294>)
 800312e:	e7e9      	b.n	8003104 <__ieee754_rem_pio2f+0x4c>
 8003130:	f7fd faa8 	bl	8000684 <__addsf3>
 8003134:	42b5      	cmp	r5, r6
 8003136:	4607      	mov	r7, r0
 8003138:	d00e      	beq.n	8003158 <__ieee754_rem_pio2f+0xa0>
 800313a:	4982      	ldr	r1, [pc, #520]	; (8003344 <__ieee754_rem_pio2f+0x28c>)
 800313c:	f7fd faa2 	bl	8000684 <__addsf3>
 8003140:	4601      	mov	r1, r0
 8003142:	6020      	str	r0, [r4, #0]
 8003144:	4638      	mov	r0, r7
 8003146:	f7fd fa9b 	bl	8000680 <__aeabi_fsub>
 800314a:	497e      	ldr	r1, [pc, #504]	; (8003344 <__ieee754_rem_pio2f+0x28c>)
 800314c:	f7fd fa9a 	bl	8000684 <__addsf3>
 8003150:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003154:	6060      	str	r0, [r4, #4]
 8003156:	e7d9      	b.n	800310c <__ieee754_rem_pio2f+0x54>
 8003158:	497b      	ldr	r1, [pc, #492]	; (8003348 <__ieee754_rem_pio2f+0x290>)
 800315a:	f7fd fa93 	bl	8000684 <__addsf3>
 800315e:	497b      	ldr	r1, [pc, #492]	; (800334c <__ieee754_rem_pio2f+0x294>)
 8003160:	4605      	mov	r5, r0
 8003162:	f7fd fa8f 	bl	8000684 <__addsf3>
 8003166:	4601      	mov	r1, r0
 8003168:	6020      	str	r0, [r4, #0]
 800316a:	4628      	mov	r0, r5
 800316c:	f7fd fa88 	bl	8000680 <__aeabi_fsub>
 8003170:	4976      	ldr	r1, [pc, #472]	; (800334c <__ieee754_rem_pio2f+0x294>)
 8003172:	e7eb      	b.n	800314c <__ieee754_rem_pio2f+0x94>
 8003174:	4a76      	ldr	r2, [pc, #472]	; (8003350 <__ieee754_rem_pio2f+0x298>)
 8003176:	4295      	cmp	r5, r2
 8003178:	f300 808c 	bgt.w	8003294 <__ieee754_rem_pio2f+0x1dc>
 800317c:	f000 fc88 	bl	8003a90 <fabsf>
 8003180:	4974      	ldr	r1, [pc, #464]	; (8003354 <__ieee754_rem_pio2f+0x29c>)
 8003182:	4680      	mov	r8, r0
 8003184:	f7fd fb86 	bl	8000894 <__aeabi_fmul>
 8003188:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800318c:	f7fd fa7a 	bl	8000684 <__addsf3>
 8003190:	f7fd fd46 	bl	8000c20 <__aeabi_f2iz>
 8003194:	4606      	mov	r6, r0
 8003196:	f7fd fb29 	bl	80007ec <__aeabi_i2f>
 800319a:	4968      	ldr	r1, [pc, #416]	; (800333c <__ieee754_rem_pio2f+0x284>)
 800319c:	4682      	mov	sl, r0
 800319e:	f7fd fb79 	bl	8000894 <__aeabi_fmul>
 80031a2:	4601      	mov	r1, r0
 80031a4:	4640      	mov	r0, r8
 80031a6:	f7fd fa6b 	bl	8000680 <__aeabi_fsub>
 80031aa:	4966      	ldr	r1, [pc, #408]	; (8003344 <__ieee754_rem_pio2f+0x28c>)
 80031ac:	4680      	mov	r8, r0
 80031ae:	4650      	mov	r0, sl
 80031b0:	f7fd fb70 	bl	8000894 <__aeabi_fmul>
 80031b4:	2e1f      	cmp	r6, #31
 80031b6:	4681      	mov	r9, r0
 80031b8:	dc0c      	bgt.n	80031d4 <__ieee754_rem_pio2f+0x11c>
 80031ba:	4a67      	ldr	r2, [pc, #412]	; (8003358 <__ieee754_rem_pio2f+0x2a0>)
 80031bc:	1e71      	subs	r1, r6, #1
 80031be:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80031c2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <__ieee754_rem_pio2f+0x11c>
 80031ca:	4649      	mov	r1, r9
 80031cc:	4640      	mov	r0, r8
 80031ce:	f7fd fa57 	bl	8000680 <__aeabi_fsub>
 80031d2:	e009      	b.n	80031e8 <__ieee754_rem_pio2f+0x130>
 80031d4:	4649      	mov	r1, r9
 80031d6:	4640      	mov	r0, r8
 80031d8:	f7fd fa52 	bl	8000680 <__aeabi_fsub>
 80031dc:	15ed      	asrs	r5, r5, #23
 80031de:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80031e2:	1aeb      	subs	r3, r5, r3
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	dc01      	bgt.n	80031ec <__ieee754_rem_pio2f+0x134>
 80031e8:	6020      	str	r0, [r4, #0]
 80031ea:	e024      	b.n	8003236 <__ieee754_rem_pio2f+0x17e>
 80031ec:	4956      	ldr	r1, [pc, #344]	; (8003348 <__ieee754_rem_pio2f+0x290>)
 80031ee:	4650      	mov	r0, sl
 80031f0:	f7fd fb50 	bl	8000894 <__aeabi_fmul>
 80031f4:	4681      	mov	r9, r0
 80031f6:	4601      	mov	r1, r0
 80031f8:	4640      	mov	r0, r8
 80031fa:	f7fd fa41 	bl	8000680 <__aeabi_fsub>
 80031fe:	4601      	mov	r1, r0
 8003200:	4683      	mov	fp, r0
 8003202:	4640      	mov	r0, r8
 8003204:	f7fd fa3c 	bl	8000680 <__aeabi_fsub>
 8003208:	4649      	mov	r1, r9
 800320a:	f7fd fa39 	bl	8000680 <__aeabi_fsub>
 800320e:	4680      	mov	r8, r0
 8003210:	494e      	ldr	r1, [pc, #312]	; (800334c <__ieee754_rem_pio2f+0x294>)
 8003212:	4650      	mov	r0, sl
 8003214:	f7fd fb3e 	bl	8000894 <__aeabi_fmul>
 8003218:	4641      	mov	r1, r8
 800321a:	f7fd fa31 	bl	8000680 <__aeabi_fsub>
 800321e:	4601      	mov	r1, r0
 8003220:	4681      	mov	r9, r0
 8003222:	4658      	mov	r0, fp
 8003224:	f7fd fa2c 	bl	8000680 <__aeabi_fsub>
 8003228:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800322c:	1aed      	subs	r5, r5, r3
 800322e:	2d19      	cmp	r5, #25
 8003230:	dc15      	bgt.n	800325e <__ieee754_rem_pio2f+0x1a6>
 8003232:	46d8      	mov	r8, fp
 8003234:	6020      	str	r0, [r4, #0]
 8003236:	6825      	ldr	r5, [r4, #0]
 8003238:	4640      	mov	r0, r8
 800323a:	4629      	mov	r1, r5
 800323c:	f7fd fa20 	bl	8000680 <__aeabi_fsub>
 8003240:	4649      	mov	r1, r9
 8003242:	f7fd fa1d 	bl	8000680 <__aeabi_fsub>
 8003246:	2f00      	cmp	r7, #0
 8003248:	6060      	str	r0, [r4, #4]
 800324a:	f6bf af5f 	bge.w	800310c <__ieee754_rem_pio2f+0x54>
 800324e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8003252:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003256:	6025      	str	r5, [r4, #0]
 8003258:	6060      	str	r0, [r4, #4]
 800325a:	4276      	negs	r6, r6
 800325c:	e756      	b.n	800310c <__ieee754_rem_pio2f+0x54>
 800325e:	493f      	ldr	r1, [pc, #252]	; (800335c <__ieee754_rem_pio2f+0x2a4>)
 8003260:	4650      	mov	r0, sl
 8003262:	f7fd fb17 	bl	8000894 <__aeabi_fmul>
 8003266:	4605      	mov	r5, r0
 8003268:	4601      	mov	r1, r0
 800326a:	4658      	mov	r0, fp
 800326c:	f7fd fa08 	bl	8000680 <__aeabi_fsub>
 8003270:	4601      	mov	r1, r0
 8003272:	4680      	mov	r8, r0
 8003274:	4658      	mov	r0, fp
 8003276:	f7fd fa03 	bl	8000680 <__aeabi_fsub>
 800327a:	4629      	mov	r1, r5
 800327c:	f7fd fa00 	bl	8000680 <__aeabi_fsub>
 8003280:	4605      	mov	r5, r0
 8003282:	4937      	ldr	r1, [pc, #220]	; (8003360 <__ieee754_rem_pio2f+0x2a8>)
 8003284:	4650      	mov	r0, sl
 8003286:	f7fd fb05 	bl	8000894 <__aeabi_fmul>
 800328a:	4629      	mov	r1, r5
 800328c:	f7fd f9f8 	bl	8000680 <__aeabi_fsub>
 8003290:	4681      	mov	r9, r0
 8003292:	e79a      	b.n	80031ca <__ieee754_rem_pio2f+0x112>
 8003294:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8003298:	db05      	blt.n	80032a6 <__ieee754_rem_pio2f+0x1ee>
 800329a:	4601      	mov	r1, r0
 800329c:	f7fd f9f0 	bl	8000680 <__aeabi_fsub>
 80032a0:	6060      	str	r0, [r4, #4]
 80032a2:	6020      	str	r0, [r4, #0]
 80032a4:	e715      	b.n	80030d2 <__ieee754_rem_pio2f+0x1a>
 80032a6:	15ee      	asrs	r6, r5, #23
 80032a8:	3e86      	subs	r6, #134	; 0x86
 80032aa:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 80032ae:	4628      	mov	r0, r5
 80032b0:	f7fd fcb6 	bl	8000c20 <__aeabi_f2iz>
 80032b4:	f7fd fa9a 	bl	80007ec <__aeabi_i2f>
 80032b8:	4601      	mov	r1, r0
 80032ba:	9003      	str	r0, [sp, #12]
 80032bc:	4628      	mov	r0, r5
 80032be:	f7fd f9df 	bl	8000680 <__aeabi_fsub>
 80032c2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80032c6:	f7fd fae5 	bl	8000894 <__aeabi_fmul>
 80032ca:	4680      	mov	r8, r0
 80032cc:	f7fd fca8 	bl	8000c20 <__aeabi_f2iz>
 80032d0:	f7fd fa8c 	bl	80007ec <__aeabi_i2f>
 80032d4:	4601      	mov	r1, r0
 80032d6:	9004      	str	r0, [sp, #16]
 80032d8:	4605      	mov	r5, r0
 80032da:	4640      	mov	r0, r8
 80032dc:	f7fd f9d0 	bl	8000680 <__aeabi_fsub>
 80032e0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80032e4:	f7fd fad6 	bl	8000894 <__aeabi_fmul>
 80032e8:	2100      	movs	r1, #0
 80032ea:	9005      	str	r0, [sp, #20]
 80032ec:	f7fd fc66 	bl	8000bbc <__aeabi_fcmpeq>
 80032f0:	b1e8      	cbz	r0, 800332e <__ieee754_rem_pio2f+0x276>
 80032f2:	2100      	movs	r1, #0
 80032f4:	4628      	mov	r0, r5
 80032f6:	f7fd fc61 	bl	8000bbc <__aeabi_fcmpeq>
 80032fa:	2800      	cmp	r0, #0
 80032fc:	bf14      	ite	ne
 80032fe:	2301      	movne	r3, #1
 8003300:	2302      	moveq	r3, #2
 8003302:	4a18      	ldr	r2, [pc, #96]	; (8003364 <__ieee754_rem_pio2f+0x2ac>)
 8003304:	4621      	mov	r1, r4
 8003306:	9201      	str	r2, [sp, #4]
 8003308:	2202      	movs	r2, #2
 800330a:	a803      	add	r0, sp, #12
 800330c:	9200      	str	r2, [sp, #0]
 800330e:	4632      	mov	r2, r6
 8003310:	f000 f8aa 	bl	8003468 <__kernel_rem_pio2f>
 8003314:	2f00      	cmp	r7, #0
 8003316:	4606      	mov	r6, r0
 8003318:	f6bf aef8 	bge.w	800310c <__ieee754_rem_pio2f+0x54>
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003322:	6023      	str	r3, [r4, #0]
 8003324:	6863      	ldr	r3, [r4, #4]
 8003326:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800332a:	6063      	str	r3, [r4, #4]
 800332c:	e795      	b.n	800325a <__ieee754_rem_pio2f+0x1a2>
 800332e:	2303      	movs	r3, #3
 8003330:	e7e7      	b.n	8003302 <__ieee754_rem_pio2f+0x24a>
 8003332:	bf00      	nop
 8003334:	3f490fd8 	.word	0x3f490fd8
 8003338:	4016cbe3 	.word	0x4016cbe3
 800333c:	3fc90f80 	.word	0x3fc90f80
 8003340:	3fc90fd0 	.word	0x3fc90fd0
 8003344:	37354443 	.word	0x37354443
 8003348:	37354400 	.word	0x37354400
 800334c:	2e85a308 	.word	0x2e85a308
 8003350:	43490f80 	.word	0x43490f80
 8003354:	3f22f984 	.word	0x3f22f984
 8003358:	08003b78 	.word	0x08003b78
 800335c:	2e85a300 	.word	0x2e85a300
 8003360:	248d3132 	.word	0x248d3132
 8003364:	08003bf8 	.word	0x08003bf8

08003368 <__kernel_cosf>:
 8003368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800336c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003370:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8003374:	4606      	mov	r6, r0
 8003376:	4688      	mov	r8, r1
 8003378:	da03      	bge.n	8003382 <__kernel_cosf+0x1a>
 800337a:	f7fd fc51 	bl	8000c20 <__aeabi_f2iz>
 800337e:	2800      	cmp	r0, #0
 8003380:	d05c      	beq.n	800343c <__kernel_cosf+0xd4>
 8003382:	4631      	mov	r1, r6
 8003384:	4630      	mov	r0, r6
 8003386:	f7fd fa85 	bl	8000894 <__aeabi_fmul>
 800338a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800338e:	4605      	mov	r5, r0
 8003390:	f7fd fa80 	bl	8000894 <__aeabi_fmul>
 8003394:	492b      	ldr	r1, [pc, #172]	; (8003444 <__kernel_cosf+0xdc>)
 8003396:	4607      	mov	r7, r0
 8003398:	4628      	mov	r0, r5
 800339a:	f7fd fa7b 	bl	8000894 <__aeabi_fmul>
 800339e:	492a      	ldr	r1, [pc, #168]	; (8003448 <__kernel_cosf+0xe0>)
 80033a0:	f7fd f970 	bl	8000684 <__addsf3>
 80033a4:	4629      	mov	r1, r5
 80033a6:	f7fd fa75 	bl	8000894 <__aeabi_fmul>
 80033aa:	4928      	ldr	r1, [pc, #160]	; (800344c <__kernel_cosf+0xe4>)
 80033ac:	f7fd f968 	bl	8000680 <__aeabi_fsub>
 80033b0:	4629      	mov	r1, r5
 80033b2:	f7fd fa6f 	bl	8000894 <__aeabi_fmul>
 80033b6:	4926      	ldr	r1, [pc, #152]	; (8003450 <__kernel_cosf+0xe8>)
 80033b8:	f7fd f964 	bl	8000684 <__addsf3>
 80033bc:	4629      	mov	r1, r5
 80033be:	f7fd fa69 	bl	8000894 <__aeabi_fmul>
 80033c2:	4924      	ldr	r1, [pc, #144]	; (8003454 <__kernel_cosf+0xec>)
 80033c4:	f7fd f95c 	bl	8000680 <__aeabi_fsub>
 80033c8:	4629      	mov	r1, r5
 80033ca:	f7fd fa63 	bl	8000894 <__aeabi_fmul>
 80033ce:	4922      	ldr	r1, [pc, #136]	; (8003458 <__kernel_cosf+0xf0>)
 80033d0:	f7fd f958 	bl	8000684 <__addsf3>
 80033d4:	4629      	mov	r1, r5
 80033d6:	f7fd fa5d 	bl	8000894 <__aeabi_fmul>
 80033da:	4629      	mov	r1, r5
 80033dc:	f7fd fa5a 	bl	8000894 <__aeabi_fmul>
 80033e0:	4641      	mov	r1, r8
 80033e2:	4605      	mov	r5, r0
 80033e4:	4630      	mov	r0, r6
 80033e6:	f7fd fa55 	bl	8000894 <__aeabi_fmul>
 80033ea:	4601      	mov	r1, r0
 80033ec:	4628      	mov	r0, r5
 80033ee:	f7fd f947 	bl	8000680 <__aeabi_fsub>
 80033f2:	4b1a      	ldr	r3, [pc, #104]	; (800345c <__kernel_cosf+0xf4>)
 80033f4:	4605      	mov	r5, r0
 80033f6:	429c      	cmp	r4, r3
 80033f8:	dc0a      	bgt.n	8003410 <__kernel_cosf+0xa8>
 80033fa:	4601      	mov	r1, r0
 80033fc:	4638      	mov	r0, r7
 80033fe:	f7fd f93f 	bl	8000680 <__aeabi_fsub>
 8003402:	4601      	mov	r1, r0
 8003404:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003408:	f7fd f93a 	bl	8000680 <__aeabi_fsub>
 800340c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003410:	4b13      	ldr	r3, [pc, #76]	; (8003460 <__kernel_cosf+0xf8>)
 8003412:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003416:	429c      	cmp	r4, r3
 8003418:	bfcc      	ite	gt
 800341a:	4c12      	ldrgt	r4, [pc, #72]	; (8003464 <__kernel_cosf+0xfc>)
 800341c:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8003420:	4621      	mov	r1, r4
 8003422:	f7fd f92d 	bl	8000680 <__aeabi_fsub>
 8003426:	4621      	mov	r1, r4
 8003428:	4606      	mov	r6, r0
 800342a:	4638      	mov	r0, r7
 800342c:	f7fd f928 	bl	8000680 <__aeabi_fsub>
 8003430:	4629      	mov	r1, r5
 8003432:	f7fd f925 	bl	8000680 <__aeabi_fsub>
 8003436:	4601      	mov	r1, r0
 8003438:	4630      	mov	r0, r6
 800343a:	e7e5      	b.n	8003408 <__kernel_cosf+0xa0>
 800343c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003440:	e7e4      	b.n	800340c <__kernel_cosf+0xa4>
 8003442:	bf00      	nop
 8003444:	ad47d74e 	.word	0xad47d74e
 8003448:	310f74f6 	.word	0x310f74f6
 800344c:	3493f27c 	.word	0x3493f27c
 8003450:	37d00d01 	.word	0x37d00d01
 8003454:	3ab60b61 	.word	0x3ab60b61
 8003458:	3d2aaaab 	.word	0x3d2aaaab
 800345c:	3e999999 	.word	0x3e999999
 8003460:	3f480000 	.word	0x3f480000
 8003464:	3e900000 	.word	0x3e900000

08003468 <__kernel_rem_pio2f>:
 8003468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800346c:	b0d9      	sub	sp, #356	; 0x164
 800346e:	9304      	str	r3, [sp, #16]
 8003470:	9101      	str	r1, [sp, #4]
 8003472:	4bc3      	ldr	r3, [pc, #780]	; (8003780 <__kernel_rem_pio2f+0x318>)
 8003474:	9962      	ldr	r1, [sp, #392]	; 0x188
 8003476:	1ed4      	subs	r4, r2, #3
 8003478:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800347c:	2500      	movs	r5, #0
 800347e:	9302      	str	r3, [sp, #8]
 8003480:	9b04      	ldr	r3, [sp, #16]
 8003482:	f04f 0a00 	mov.w	sl, #0
 8003486:	3b01      	subs	r3, #1
 8003488:	9303      	str	r3, [sp, #12]
 800348a:	2308      	movs	r3, #8
 800348c:	fb94 f4f3 	sdiv	r4, r4, r3
 8003490:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003494:	1c66      	adds	r6, r4, #1
 8003496:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800349a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800349e:	eb03 0802 	add.w	r8, r3, r2
 80034a2:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80034a4:	1aa7      	subs	r7, r4, r2
 80034a6:	9005      	str	r0, [sp, #20]
 80034a8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80034ac:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 80034b0:	4545      	cmp	r5, r8
 80034b2:	dd7f      	ble.n	80035b4 <__kernel_rem_pio2f+0x14c>
 80034b4:	f04f 0800 	mov.w	r8, #0
 80034b8:	f04f 0a00 	mov.w	sl, #0
 80034bc:	f06f 0b03 	mvn.w	fp, #3
 80034c0:	9b04      	ldr	r3, [sp, #16]
 80034c2:	aa1c      	add	r2, sp, #112	; 0x70
 80034c4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80034c8:	ab44      	add	r3, sp, #272	; 0x110
 80034ca:	9a02      	ldr	r2, [sp, #8]
 80034cc:	4590      	cmp	r8, r2
 80034ce:	f340 8097 	ble.w	8003600 <__kernel_rem_pio2f+0x198>
 80034d2:	4613      	mov	r3, r2
 80034d4:	aa08      	add	r2, sp, #32
 80034d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80034da:	9307      	str	r3, [sp, #28]
 80034dc:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80034de:	9f02      	ldr	r7, [sp, #8]
 80034e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80034e4:	9306      	str	r3, [sp, #24]
 80034e6:	46ba      	mov	sl, r7
 80034e8:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 80034ec:	ab58      	add	r3, sp, #352	; 0x160
 80034ee:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80034f2:	f853 4c50 	ldr.w	r4, [r3, #-80]
 80034f6:	ad07      	add	r5, sp, #28
 80034f8:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80034fc:	f1ba 0f00 	cmp.w	sl, #0
 8003500:	f300 8081 	bgt.w	8003606 <__kernel_rem_pio2f+0x19e>
 8003504:	4631      	mov	r1, r6
 8003506:	4620      	mov	r0, r4
 8003508:	f000 fac6 	bl	8003a98 <scalbnf>
 800350c:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8003510:	4604      	mov	r4, r0
 8003512:	f7fd f9bf 	bl	8000894 <__aeabi_fmul>
 8003516:	f7ff fd59 	bl	8002fcc <floorf>
 800351a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800351e:	f7fd f9b9 	bl	8000894 <__aeabi_fmul>
 8003522:	4601      	mov	r1, r0
 8003524:	4620      	mov	r0, r4
 8003526:	f7fd f8ab 	bl	8000680 <__aeabi_fsub>
 800352a:	4604      	mov	r4, r0
 800352c:	f7fd fb78 	bl	8000c20 <__aeabi_f2iz>
 8003530:	4681      	mov	r9, r0
 8003532:	f7fd f95b 	bl	80007ec <__aeabi_i2f>
 8003536:	4601      	mov	r1, r0
 8003538:	4620      	mov	r0, r4
 800353a:	f7fd f8a1 	bl	8000680 <__aeabi_fsub>
 800353e:	2e00      	cmp	r6, #0
 8003540:	4604      	mov	r4, r0
 8003542:	dd7e      	ble.n	8003642 <__kernel_rem_pio2f+0x1da>
 8003544:	1e7b      	subs	r3, r7, #1
 8003546:	aa08      	add	r2, sp, #32
 8003548:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800354c:	f1c6 0208 	rsb	r2, r6, #8
 8003550:	fa45 f002 	asr.w	r0, r5, r2
 8003554:	4481      	add	r9, r0
 8003556:	4090      	lsls	r0, r2
 8003558:	1a2d      	subs	r5, r5, r0
 800355a:	aa08      	add	r2, sp, #32
 800355c:	f1c6 0007 	rsb	r0, r6, #7
 8003560:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8003564:	4105      	asrs	r5, r0
 8003566:	2d00      	cmp	r5, #0
 8003568:	dd79      	ble.n	800365e <__kernel_rem_pio2f+0x1f6>
 800356a:	2200      	movs	r2, #0
 800356c:	4690      	mov	r8, r2
 800356e:	f109 0901 	add.w	r9, r9, #1
 8003572:	4297      	cmp	r7, r2
 8003574:	f300 80ae 	bgt.w	80036d4 <__kernel_rem_pio2f+0x26c>
 8003578:	2e00      	cmp	r6, #0
 800357a:	dd05      	ble.n	8003588 <__kernel_rem_pio2f+0x120>
 800357c:	2e01      	cmp	r6, #1
 800357e:	f000 80c0 	beq.w	8003702 <__kernel_rem_pio2f+0x29a>
 8003582:	2e02      	cmp	r6, #2
 8003584:	f000 80c7 	beq.w	8003716 <__kernel_rem_pio2f+0x2ae>
 8003588:	2d02      	cmp	r5, #2
 800358a:	d168      	bne.n	800365e <__kernel_rem_pio2f+0x1f6>
 800358c:	4621      	mov	r1, r4
 800358e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003592:	f7fd f875 	bl	8000680 <__aeabi_fsub>
 8003596:	4604      	mov	r4, r0
 8003598:	f1b8 0f00 	cmp.w	r8, #0
 800359c:	d05f      	beq.n	800365e <__kernel_rem_pio2f+0x1f6>
 800359e:	4631      	mov	r1, r6
 80035a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80035a4:	f000 fa78 	bl	8003a98 <scalbnf>
 80035a8:	4601      	mov	r1, r0
 80035aa:	4620      	mov	r0, r4
 80035ac:	f7fd f868 	bl	8000680 <__aeabi_fsub>
 80035b0:	4604      	mov	r4, r0
 80035b2:	e054      	b.n	800365e <__kernel_rem_pio2f+0x1f6>
 80035b4:	42ef      	cmn	r7, r5
 80035b6:	d407      	bmi.n	80035c8 <__kernel_rem_pio2f+0x160>
 80035b8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80035bc:	f7fd f916 	bl	80007ec <__aeabi_i2f>
 80035c0:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 80035c4:	3501      	adds	r5, #1
 80035c6:	e773      	b.n	80034b0 <__kernel_rem_pio2f+0x48>
 80035c8:	4650      	mov	r0, sl
 80035ca:	e7f9      	b.n	80035c0 <__kernel_rem_pio2f+0x158>
 80035cc:	fb0b 5207 	mla	r2, fp, r7, r5
 80035d0:	9306      	str	r3, [sp, #24]
 80035d2:	9b05      	ldr	r3, [sp, #20]
 80035d4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80035d8:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 80035dc:	f7fd f95a 	bl	8000894 <__aeabi_fmul>
 80035e0:	4601      	mov	r1, r0
 80035e2:	4648      	mov	r0, r9
 80035e4:	f7fd f84e 	bl	8000684 <__addsf3>
 80035e8:	4681      	mov	r9, r0
 80035ea:	9b06      	ldr	r3, [sp, #24]
 80035ec:	3701      	adds	r7, #1
 80035ee:	9a03      	ldr	r2, [sp, #12]
 80035f0:	4297      	cmp	r7, r2
 80035f2:	ddeb      	ble.n	80035cc <__kernel_rem_pio2f+0x164>
 80035f4:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 80035f8:	3504      	adds	r5, #4
 80035fa:	f108 0801 	add.w	r8, r8, #1
 80035fe:	e764      	b.n	80034ca <__kernel_rem_pio2f+0x62>
 8003600:	46d1      	mov	r9, sl
 8003602:	2700      	movs	r7, #0
 8003604:	e7f3      	b.n	80035ee <__kernel_rem_pio2f+0x186>
 8003606:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800360a:	4620      	mov	r0, r4
 800360c:	f7fd f942 	bl	8000894 <__aeabi_fmul>
 8003610:	f7fd fb06 	bl	8000c20 <__aeabi_f2iz>
 8003614:	f7fd f8ea 	bl	80007ec <__aeabi_i2f>
 8003618:	4641      	mov	r1, r8
 800361a:	4683      	mov	fp, r0
 800361c:	f7fd f93a 	bl	8000894 <__aeabi_fmul>
 8003620:	4601      	mov	r1, r0
 8003622:	4620      	mov	r0, r4
 8003624:	f7fd f82c 	bl	8000680 <__aeabi_fsub>
 8003628:	f7fd fafa 	bl	8000c20 <__aeabi_f2iz>
 800362c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003630:	f845 0f04 	str.w	r0, [r5, #4]!
 8003634:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8003638:	4658      	mov	r0, fp
 800363a:	f7fd f823 	bl	8000684 <__addsf3>
 800363e:	4604      	mov	r4, r0
 8003640:	e75c      	b.n	80034fc <__kernel_rem_pio2f+0x94>
 8003642:	d105      	bne.n	8003650 <__kernel_rem_pio2f+0x1e8>
 8003644:	1e7b      	subs	r3, r7, #1
 8003646:	aa08      	add	r2, sp, #32
 8003648:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800364c:	122d      	asrs	r5, r5, #8
 800364e:	e78a      	b.n	8003566 <__kernel_rem_pio2f+0xfe>
 8003650:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003654:	f7fd fad0 	bl	8000bf8 <__aeabi_fcmpge>
 8003658:	2800      	cmp	r0, #0
 800365a:	d139      	bne.n	80036d0 <__kernel_rem_pio2f+0x268>
 800365c:	4605      	mov	r5, r0
 800365e:	2100      	movs	r1, #0
 8003660:	4620      	mov	r0, r4
 8003662:	f7fd faab 	bl	8000bbc <__aeabi_fcmpeq>
 8003666:	2800      	cmp	r0, #0
 8003668:	f000 80a0 	beq.w	80037ac <__kernel_rem_pio2f+0x344>
 800366c:	1e7c      	subs	r4, r7, #1
 800366e:	4623      	mov	r3, r4
 8003670:	2200      	movs	r2, #0
 8003672:	9902      	ldr	r1, [sp, #8]
 8003674:	428b      	cmp	r3, r1
 8003676:	da55      	bge.n	8003724 <__kernel_rem_pio2f+0x2bc>
 8003678:	2a00      	cmp	r2, #0
 800367a:	d07e      	beq.n	800377a <__kernel_rem_pio2f+0x312>
 800367c:	ab08      	add	r3, sp, #32
 800367e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003682:	3e08      	subs	r6, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 808f 	beq.w	80037a8 <__kernel_rem_pio2f+0x340>
 800368a:	4631      	mov	r1, r6
 800368c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003690:	f000 fa02 	bl	8003a98 <scalbnf>
 8003694:	46a0      	mov	r8, r4
 8003696:	4682      	mov	sl, r0
 8003698:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 800369c:	af44      	add	r7, sp, #272	; 0x110
 800369e:	f1b8 0f00 	cmp.w	r8, #0
 80036a2:	f280 80b5 	bge.w	8003810 <__kernel_rem_pio2f+0x3a8>
 80036a6:	f04f 0a00 	mov.w	sl, #0
 80036aa:	2300      	movs	r3, #0
 80036ac:	00a6      	lsls	r6, r4, #2
 80036ae:	4a35      	ldr	r2, [pc, #212]	; (8003784 <__kernel_rem_pio2f+0x31c>)
 80036b0:	4437      	add	r7, r6
 80036b2:	eba4 010a 	sub.w	r1, r4, sl
 80036b6:	2900      	cmp	r1, #0
 80036b8:	f280 80db 	bge.w	8003872 <__kernel_rem_pio2f+0x40a>
 80036bc:	9b62      	ldr	r3, [sp, #392]	; 0x188
 80036be:	2b03      	cmp	r3, #3
 80036c0:	f200 80ff 	bhi.w	80038c2 <__kernel_rem_pio2f+0x45a>
 80036c4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80036c8:	01200102 	.word	0x01200102
 80036cc:	00d90120 	.word	0x00d90120
 80036d0:	2502      	movs	r5, #2
 80036d2:	e74a      	b.n	800356a <__kernel_rem_pio2f+0x102>
 80036d4:	ab08      	add	r3, sp, #32
 80036d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036da:	f1b8 0f00 	cmp.w	r8, #0
 80036de:	d109      	bne.n	80036f4 <__kernel_rem_pio2f+0x28c>
 80036e0:	b12b      	cbz	r3, 80036ee <__kernel_rem_pio2f+0x286>
 80036e2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80036e6:	a908      	add	r1, sp, #32
 80036e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80036ec:	2301      	movs	r3, #1
 80036ee:	3201      	adds	r2, #1
 80036f0:	4698      	mov	r8, r3
 80036f2:	e73e      	b.n	8003572 <__kernel_rem_pio2f+0x10a>
 80036f4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80036f8:	a908      	add	r1, sp, #32
 80036fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80036fe:	4643      	mov	r3, r8
 8003700:	e7f5      	b.n	80036ee <__kernel_rem_pio2f+0x286>
 8003702:	1e7a      	subs	r2, r7, #1
 8003704:	ab08      	add	r3, sp, #32
 8003706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800370a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800370e:	a908      	add	r1, sp, #32
 8003710:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003714:	e738      	b.n	8003588 <__kernel_rem_pio2f+0x120>
 8003716:	1e7a      	subs	r2, r7, #1
 8003718:	ab08      	add	r3, sp, #32
 800371a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800371e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003722:	e7f4      	b.n	800370e <__kernel_rem_pio2f+0x2a6>
 8003724:	a908      	add	r1, sp, #32
 8003726:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800372a:	3b01      	subs	r3, #1
 800372c:	430a      	orrs	r2, r1
 800372e:	e7a0      	b.n	8003672 <__kernel_rem_pio2f+0x20a>
 8003730:	3301      	adds	r3, #1
 8003732:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003736:	2900      	cmp	r1, #0
 8003738:	d0fa      	beq.n	8003730 <__kernel_rem_pio2f+0x2c8>
 800373a:	f06f 0803 	mvn.w	r8, #3
 800373e:	9a04      	ldr	r2, [sp, #16]
 8003740:	1c7d      	adds	r5, r7, #1
 8003742:	18bc      	adds	r4, r7, r2
 8003744:	aa1c      	add	r2, sp, #112	; 0x70
 8003746:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800374a:	441f      	add	r7, r3
 800374c:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8003750:	42af      	cmp	r7, r5
 8003752:	f6ff aec8 	blt.w	80034e6 <__kernel_rem_pio2f+0x7e>
 8003756:	9b06      	ldr	r3, [sp, #24]
 8003758:	f04f 0a00 	mov.w	sl, #0
 800375c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003760:	f7fd f844 	bl	80007ec <__aeabi_i2f>
 8003764:	f04f 0b00 	mov.w	fp, #0
 8003768:	6020      	str	r0, [r4, #0]
 800376a:	9b03      	ldr	r3, [sp, #12]
 800376c:	459a      	cmp	sl, r3
 800376e:	dd0b      	ble.n	8003788 <__kernel_rem_pio2f+0x320>
 8003770:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8003774:	3404      	adds	r4, #4
 8003776:	3501      	adds	r5, #1
 8003778:	e7ea      	b.n	8003750 <__kernel_rem_pio2f+0x2e8>
 800377a:	9a07      	ldr	r2, [sp, #28]
 800377c:	2301      	movs	r3, #1
 800377e:	e7d8      	b.n	8003732 <__kernel_rem_pio2f+0x2ca>
 8003780:	08003f3c 	.word	0x08003f3c
 8003784:	08003f10 	.word	0x08003f10
 8003788:	fb08 f30a 	mul.w	r3, r8, sl
 800378c:	9a05      	ldr	r2, [sp, #20]
 800378e:	58e0      	ldr	r0, [r4, r3]
 8003790:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8003794:	f7fd f87e 	bl	8000894 <__aeabi_fmul>
 8003798:	4601      	mov	r1, r0
 800379a:	4658      	mov	r0, fp
 800379c:	f7fc ff72 	bl	8000684 <__addsf3>
 80037a0:	f10a 0a01 	add.w	sl, sl, #1
 80037a4:	4683      	mov	fp, r0
 80037a6:	e7e0      	b.n	800376a <__kernel_rem_pio2f+0x302>
 80037a8:	3c01      	subs	r4, #1
 80037aa:	e767      	b.n	800367c <__kernel_rem_pio2f+0x214>
 80037ac:	4271      	negs	r1, r6
 80037ae:	4620      	mov	r0, r4
 80037b0:	f000 f972 	bl	8003a98 <scalbnf>
 80037b4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80037b8:	4604      	mov	r4, r0
 80037ba:	f7fd fa1d 	bl	8000bf8 <__aeabi_fcmpge>
 80037be:	b1f8      	cbz	r0, 8003800 <__kernel_rem_pio2f+0x398>
 80037c0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7fd f865 	bl	8000894 <__aeabi_fmul>
 80037ca:	f7fd fa29 	bl	8000c20 <__aeabi_f2iz>
 80037ce:	f7fd f80d 	bl	80007ec <__aeabi_i2f>
 80037d2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80037d6:	4680      	mov	r8, r0
 80037d8:	f7fd f85c 	bl	8000894 <__aeabi_fmul>
 80037dc:	4601      	mov	r1, r0
 80037de:	4620      	mov	r0, r4
 80037e0:	f7fc ff4e 	bl	8000680 <__aeabi_fsub>
 80037e4:	f7fd fa1c 	bl	8000c20 <__aeabi_f2iz>
 80037e8:	ab08      	add	r3, sp, #32
 80037ea:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80037ee:	4640      	mov	r0, r8
 80037f0:	f7fd fa16 	bl	8000c20 <__aeabi_f2iz>
 80037f4:	1c7c      	adds	r4, r7, #1
 80037f6:	ab08      	add	r3, sp, #32
 80037f8:	3608      	adds	r6, #8
 80037fa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80037fe:	e744      	b.n	800368a <__kernel_rem_pio2f+0x222>
 8003800:	4620      	mov	r0, r4
 8003802:	f7fd fa0d 	bl	8000c20 <__aeabi_f2iz>
 8003806:	ab08      	add	r3, sp, #32
 8003808:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800380c:	463c      	mov	r4, r7
 800380e:	e73c      	b.n	800368a <__kernel_rem_pio2f+0x222>
 8003810:	ab08      	add	r3, sp, #32
 8003812:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003816:	f7fc ffe9 	bl	80007ec <__aeabi_i2f>
 800381a:	4651      	mov	r1, sl
 800381c:	f7fd f83a 	bl	8000894 <__aeabi_fmul>
 8003820:	4631      	mov	r1, r6
 8003822:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 8003826:	4650      	mov	r0, sl
 8003828:	f7fd f834 	bl	8000894 <__aeabi_fmul>
 800382c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003830:	4682      	mov	sl, r0
 8003832:	e734      	b.n	800369e <__kernel_rem_pio2f+0x236>
 8003834:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8003838:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800383c:	9304      	str	r3, [sp, #16]
 800383e:	9203      	str	r2, [sp, #12]
 8003840:	f7fd f828 	bl	8000894 <__aeabi_fmul>
 8003844:	4601      	mov	r1, r0
 8003846:	4658      	mov	r0, fp
 8003848:	f7fc ff1c 	bl	8000684 <__addsf3>
 800384c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8003850:	4683      	mov	fp, r0
 8003852:	f108 0801 	add.w	r8, r8, #1
 8003856:	9902      	ldr	r1, [sp, #8]
 8003858:	4588      	cmp	r8, r1
 800385a:	dc01      	bgt.n	8003860 <__kernel_rem_pio2f+0x3f8>
 800385c:	45c2      	cmp	sl, r8
 800385e:	dae9      	bge.n	8003834 <__kernel_rem_pio2f+0x3cc>
 8003860:	a958      	add	r1, sp, #352	; 0x160
 8003862:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003866:	f841 bca0 	str.w	fp, [r1, #-160]
 800386a:	f10a 0a01 	add.w	sl, sl, #1
 800386e:	3f04      	subs	r7, #4
 8003870:	e71f      	b.n	80036b2 <__kernel_rem_pio2f+0x24a>
 8003872:	469b      	mov	fp, r3
 8003874:	f04f 0800 	mov.w	r8, #0
 8003878:	e7ed      	b.n	8003856 <__kernel_rem_pio2f+0x3ee>
 800387a:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800387e:	4456      	add	r6, sl
 8003880:	4637      	mov	r7, r6
 8003882:	46a0      	mov	r8, r4
 8003884:	f1b8 0f00 	cmp.w	r8, #0
 8003888:	dc4a      	bgt.n	8003920 <__kernel_rem_pio2f+0x4b8>
 800388a:	4627      	mov	r7, r4
 800388c:	2f01      	cmp	r7, #1
 800388e:	dc60      	bgt.n	8003952 <__kernel_rem_pio2f+0x4ea>
 8003890:	2000      	movs	r0, #0
 8003892:	2c01      	cmp	r4, #1
 8003894:	dc74      	bgt.n	8003980 <__kernel_rem_pio2f+0x518>
 8003896:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8003898:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800389a:	2d00      	cmp	r5, #0
 800389c:	d176      	bne.n	800398c <__kernel_rem_pio2f+0x524>
 800389e:	9901      	ldr	r1, [sp, #4]
 80038a0:	600a      	str	r2, [r1, #0]
 80038a2:	460a      	mov	r2, r1
 80038a4:	604b      	str	r3, [r1, #4]
 80038a6:	6090      	str	r0, [r2, #8]
 80038a8:	e00b      	b.n	80038c2 <__kernel_rem_pio2f+0x45a>
 80038aa:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 80038ae:	f7fc fee9 	bl	8000684 <__addsf3>
 80038b2:	3c01      	subs	r4, #1
 80038b4:	2c00      	cmp	r4, #0
 80038b6:	daf8      	bge.n	80038aa <__kernel_rem_pio2f+0x442>
 80038b8:	b10d      	cbz	r5, 80038be <__kernel_rem_pio2f+0x456>
 80038ba:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80038be:	9b01      	ldr	r3, [sp, #4]
 80038c0:	6018      	str	r0, [r3, #0]
 80038c2:	f009 0007 	and.w	r0, r9, #7
 80038c6:	b059      	add	sp, #356	; 0x164
 80038c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038cc:	2000      	movs	r0, #0
 80038ce:	ae30      	add	r6, sp, #192	; 0xc0
 80038d0:	e7f0      	b.n	80038b4 <__kernel_rem_pio2f+0x44c>
 80038d2:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 80038d6:	f7fc fed5 	bl	8000684 <__addsf3>
 80038da:	3e01      	subs	r6, #1
 80038dc:	2e00      	cmp	r6, #0
 80038de:	daf8      	bge.n	80038d2 <__kernel_rem_pio2f+0x46a>
 80038e0:	b1b5      	cbz	r5, 8003910 <__kernel_rem_pio2f+0x4a8>
 80038e2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80038e6:	9a01      	ldr	r2, [sp, #4]
 80038e8:	af58      	add	r7, sp, #352	; 0x160
 80038ea:	4601      	mov	r1, r0
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 80038f2:	f7fc fec5 	bl	8000680 <__aeabi_fsub>
 80038f6:	2601      	movs	r6, #1
 80038f8:	42b4      	cmp	r4, r6
 80038fa:	da0b      	bge.n	8003914 <__kernel_rem_pio2f+0x4ac>
 80038fc:	b10d      	cbz	r5, 8003902 <__kernel_rem_pio2f+0x49a>
 80038fe:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003902:	9b01      	ldr	r3, [sp, #4]
 8003904:	6058      	str	r0, [r3, #4]
 8003906:	e7dc      	b.n	80038c2 <__kernel_rem_pio2f+0x45a>
 8003908:	4626      	mov	r6, r4
 800390a:	2000      	movs	r0, #0
 800390c:	af30      	add	r7, sp, #192	; 0xc0
 800390e:	e7e5      	b.n	80038dc <__kernel_rem_pio2f+0x474>
 8003910:	4603      	mov	r3, r0
 8003912:	e7e8      	b.n	80038e6 <__kernel_rem_pio2f+0x47e>
 8003914:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8003918:	f7fc feb4 	bl	8000684 <__addsf3>
 800391c:	3601      	adds	r6, #1
 800391e:	e7eb      	b.n	80038f8 <__kernel_rem_pio2f+0x490>
 8003920:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 8003924:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4610      	mov	r0, r2
 800392c:	4619      	mov	r1, r3
 800392e:	9303      	str	r3, [sp, #12]
 8003930:	9202      	str	r2, [sp, #8]
 8003932:	f7fc fea7 	bl	8000684 <__addsf3>
 8003936:	9a02      	ldr	r2, [sp, #8]
 8003938:	4601      	mov	r1, r0
 800393a:	4683      	mov	fp, r0
 800393c:	4610      	mov	r0, r2
 800393e:	f7fc fe9f 	bl	8000680 <__aeabi_fsub>
 8003942:	9b03      	ldr	r3, [sp, #12]
 8003944:	4619      	mov	r1, r3
 8003946:	f7fc fe9d 	bl	8000684 <__addsf3>
 800394a:	f8c7 b000 	str.w	fp, [r7]
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	e798      	b.n	8003884 <__kernel_rem_pio2f+0x41c>
 8003952:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8003956:	3f01      	subs	r7, #1
 8003958:	f8d6 b004 	ldr.w	fp, [r6, #4]
 800395c:	4618      	mov	r0, r3
 800395e:	4659      	mov	r1, fp
 8003960:	9302      	str	r3, [sp, #8]
 8003962:	f7fc fe8f 	bl	8000684 <__addsf3>
 8003966:	9b02      	ldr	r3, [sp, #8]
 8003968:	4601      	mov	r1, r0
 800396a:	4680      	mov	r8, r0
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fe87 	bl	8000680 <__aeabi_fsub>
 8003972:	4659      	mov	r1, fp
 8003974:	f7fc fe86 	bl	8000684 <__addsf3>
 8003978:	f8c6 8000 	str.w	r8, [r6]
 800397c:	6070      	str	r0, [r6, #4]
 800397e:	e785      	b.n	800388c <__kernel_rem_pio2f+0x424>
 8003980:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8003984:	f7fc fe7e 	bl	8000684 <__addsf3>
 8003988:	3c01      	subs	r4, #1
 800398a:	e782      	b.n	8003892 <__kernel_rem_pio2f+0x42a>
 800398c:	9901      	ldr	r1, [sp, #4]
 800398e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8003992:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003996:	600a      	str	r2, [r1, #0]
 8003998:	604b      	str	r3, [r1, #4]
 800399a:	460a      	mov	r2, r1
 800399c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80039a0:	e781      	b.n	80038a6 <__kernel_rem_pio2f+0x43e>
 80039a2:	bf00      	nop

080039a4 <__kernel_sinf>:
 80039a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039a8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80039ac:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80039b0:	4604      	mov	r4, r0
 80039b2:	460f      	mov	r7, r1
 80039b4:	4691      	mov	r9, r2
 80039b6:	da03      	bge.n	80039c0 <__kernel_sinf+0x1c>
 80039b8:	f7fd f932 	bl	8000c20 <__aeabi_f2iz>
 80039bc:	2800      	cmp	r0, #0
 80039be:	d035      	beq.n	8003a2c <__kernel_sinf+0x88>
 80039c0:	4621      	mov	r1, r4
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7fc ff66 	bl	8000894 <__aeabi_fmul>
 80039c8:	4605      	mov	r5, r0
 80039ca:	4601      	mov	r1, r0
 80039cc:	4620      	mov	r0, r4
 80039ce:	f7fc ff61 	bl	8000894 <__aeabi_fmul>
 80039d2:	4929      	ldr	r1, [pc, #164]	; (8003a78 <__kernel_sinf+0xd4>)
 80039d4:	4606      	mov	r6, r0
 80039d6:	4628      	mov	r0, r5
 80039d8:	f7fc ff5c 	bl	8000894 <__aeabi_fmul>
 80039dc:	4927      	ldr	r1, [pc, #156]	; (8003a7c <__kernel_sinf+0xd8>)
 80039de:	f7fc fe4f 	bl	8000680 <__aeabi_fsub>
 80039e2:	4629      	mov	r1, r5
 80039e4:	f7fc ff56 	bl	8000894 <__aeabi_fmul>
 80039e8:	4925      	ldr	r1, [pc, #148]	; (8003a80 <__kernel_sinf+0xdc>)
 80039ea:	f7fc fe4b 	bl	8000684 <__addsf3>
 80039ee:	4629      	mov	r1, r5
 80039f0:	f7fc ff50 	bl	8000894 <__aeabi_fmul>
 80039f4:	4923      	ldr	r1, [pc, #140]	; (8003a84 <__kernel_sinf+0xe0>)
 80039f6:	f7fc fe43 	bl	8000680 <__aeabi_fsub>
 80039fa:	4629      	mov	r1, r5
 80039fc:	f7fc ff4a 	bl	8000894 <__aeabi_fmul>
 8003a00:	4921      	ldr	r1, [pc, #132]	; (8003a88 <__kernel_sinf+0xe4>)
 8003a02:	f7fc fe3f 	bl	8000684 <__addsf3>
 8003a06:	4680      	mov	r8, r0
 8003a08:	f1b9 0f00 	cmp.w	r9, #0
 8003a0c:	d111      	bne.n	8003a32 <__kernel_sinf+0x8e>
 8003a0e:	4601      	mov	r1, r0
 8003a10:	4628      	mov	r0, r5
 8003a12:	f7fc ff3f 	bl	8000894 <__aeabi_fmul>
 8003a16:	491d      	ldr	r1, [pc, #116]	; (8003a8c <__kernel_sinf+0xe8>)
 8003a18:	f7fc fe32 	bl	8000680 <__aeabi_fsub>
 8003a1c:	4631      	mov	r1, r6
 8003a1e:	f7fc ff39 	bl	8000894 <__aeabi_fmul>
 8003a22:	4601      	mov	r1, r0
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7fc fe2d 	bl	8000684 <__addsf3>
 8003a2a:	4604      	mov	r4, r0
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a32:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003a36:	4638      	mov	r0, r7
 8003a38:	f7fc ff2c 	bl	8000894 <__aeabi_fmul>
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	4681      	mov	r9, r0
 8003a40:	4630      	mov	r0, r6
 8003a42:	f7fc ff27 	bl	8000894 <__aeabi_fmul>
 8003a46:	4601      	mov	r1, r0
 8003a48:	4648      	mov	r0, r9
 8003a4a:	f7fc fe19 	bl	8000680 <__aeabi_fsub>
 8003a4e:	4629      	mov	r1, r5
 8003a50:	f7fc ff20 	bl	8000894 <__aeabi_fmul>
 8003a54:	4639      	mov	r1, r7
 8003a56:	f7fc fe13 	bl	8000680 <__aeabi_fsub>
 8003a5a:	490c      	ldr	r1, [pc, #48]	; (8003a8c <__kernel_sinf+0xe8>)
 8003a5c:	4605      	mov	r5, r0
 8003a5e:	4630      	mov	r0, r6
 8003a60:	f7fc ff18 	bl	8000894 <__aeabi_fmul>
 8003a64:	4601      	mov	r1, r0
 8003a66:	4628      	mov	r0, r5
 8003a68:	f7fc fe0c 	bl	8000684 <__addsf3>
 8003a6c:	4601      	mov	r1, r0
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f7fc fe06 	bl	8000680 <__aeabi_fsub>
 8003a74:	e7d9      	b.n	8003a2a <__kernel_sinf+0x86>
 8003a76:	bf00      	nop
 8003a78:	2f2ec9d3 	.word	0x2f2ec9d3
 8003a7c:	32d72f34 	.word	0x32d72f34
 8003a80:	3638ef1b 	.word	0x3638ef1b
 8003a84:	39500d01 	.word	0x39500d01
 8003a88:	3c088889 	.word	0x3c088889
 8003a8c:	3e2aaaab 	.word	0x3e2aaaab

08003a90 <fabsf>:
 8003a90:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003a94:	4770      	bx	lr
	...

08003a98 <scalbnf>:
 8003a98:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8003a9c:	b510      	push	{r4, lr}
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460c      	mov	r4, r1
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	d027      	beq.n	8003af6 <scalbnf+0x5e>
 8003aa6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003aaa:	d303      	bcc.n	8003ab4 <scalbnf+0x1c>
 8003aac:	f7fc fdea 	bl	8000684 <__addsf3>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	e020      	b.n	8003af6 <scalbnf+0x5e>
 8003ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ab8:	d215      	bcs.n	8003ae6 <scalbnf+0x4e>
 8003aba:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8003abe:	f7fc fee9 	bl	8000894 <__aeabi_fmul>
 8003ac2:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <scalbnf+0x8c>)
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	429c      	cmp	r4, r3
 8003ac8:	db22      	blt.n	8003b10 <scalbnf+0x78>
 8003aca:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003ace:	3b19      	subs	r3, #25
 8003ad0:	4423      	add	r3, r4
 8003ad2:	2bfe      	cmp	r3, #254	; 0xfe
 8003ad4:	dd09      	ble.n	8003aea <scalbnf+0x52>
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4813      	ldr	r0, [pc, #76]	; (8003b28 <scalbnf+0x90>)
 8003ada:	f000 f829 	bl	8003b30 <copysignf>
 8003ade:	4912      	ldr	r1, [pc, #72]	; (8003b28 <scalbnf+0x90>)
 8003ae0:	f7fc fed8 	bl	8000894 <__aeabi_fmul>
 8003ae4:	e7e4      	b.n	8003ab0 <scalbnf+0x18>
 8003ae6:	0ddb      	lsrs	r3, r3, #23
 8003ae8:	e7f2      	b.n	8003ad0 <scalbnf+0x38>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	dd05      	ble.n	8003afa <scalbnf+0x62>
 8003aee:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8003af2:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8003af6:	4610      	mov	r0, r2
 8003af8:	bd10      	pop	{r4, pc}
 8003afa:	f113 0f16 	cmn.w	r3, #22
 8003afe:	da09      	bge.n	8003b14 <scalbnf+0x7c>
 8003b00:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003b04:	429c      	cmp	r4, r3
 8003b06:	4611      	mov	r1, r2
 8003b08:	dce6      	bgt.n	8003ad8 <scalbnf+0x40>
 8003b0a:	4808      	ldr	r0, [pc, #32]	; (8003b2c <scalbnf+0x94>)
 8003b0c:	f000 f810 	bl	8003b30 <copysignf>
 8003b10:	4906      	ldr	r1, [pc, #24]	; (8003b2c <scalbnf+0x94>)
 8003b12:	e7e5      	b.n	8003ae0 <scalbnf+0x48>
 8003b14:	3319      	adds	r3, #25
 8003b16:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8003b1a:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8003b1e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8003b22:	e7dd      	b.n	8003ae0 <scalbnf+0x48>
 8003b24:	ffff3cb0 	.word	0xffff3cb0
 8003b28:	7149f2ca 	.word	0x7149f2ca
 8003b2c:	0da24260 	.word	0x0da24260

08003b30 <copysignf>:
 8003b30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003b34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003b38:	4308      	orrs	r0, r1
 8003b3a:	4770      	bx	lr

08003b3c <_init>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	bf00      	nop
 8003b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b42:	bc08      	pop	{r3}
 8003b44:	469e      	mov	lr, r3
 8003b46:	4770      	bx	lr

08003b48 <_fini>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	bf00      	nop
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr
